<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Release on MetaBates.com</title>
    <link>/tags/release/</link>
    <description>Recent content in Release on MetaBates.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mark&#43;blog@markbates.com (Mark Bates)</managingEditor>
    <webMaster>mark&#43;blog@markbates.com (Mark Bates)</webMaster>
    <copyright>(c) 2016 Mark Bates.</copyright>
    <lastBuildDate>Sun, 19 Jun 2011 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/release/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Backup and Bookmark your Tweets with TweetKO.com</title>
      <link>/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com/</link>
      <pubDate>Sun, 19 Jun 2011 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com/</guid>
      <description>&lt;p&gt;&lt;img style=&#34;float: left; padding-right: 10px&#34; class=&#34;size-medium wp-image-469&#34; title=&#34;bigbird_sq&#34; src=&#34;/assets/images/2011/06/bigbird_sq-300x300.png&#34; alt=&#34;&#34; width=&#34;300&#34; height=&#34;300&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: Unfortunately TweetKO is no longer available. Sorry about that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Twitter is an incredibly rich source of information. I find out about new libraries, applications, plugins, screen casts, etc&amp;hellip; But, there&amp;rsquo;s a problem with is overwhelming amount of information&amp;hellip; keeping track of it all. A lot of time I read Twitter when I&amp;rsquo;m on my phone. I&amp;rsquo;ll see a link to an article or website, etc&amp;hellip; but I don&amp;rsquo;t have time to read it then, what do I do? How do I find that tweet later? Or what about that announcement or news link for a new service or application that I saw six months ago? How do I find that again?&lt;/p&gt;

&lt;p&gt;Twitter is great but it&amp;rsquo;s ability to help you find specific tweets that are important to you is almost important. That&amp;rsquo;s why today I&amp;rsquo;m happy to announce TweetKO.com. TweetKO solves this problem by using the built &amp;lsquo;favorite&amp;rsquo; functionality that Twitter offers. From _ANY _Twitter client you can simply mark a tweet as a favorite and TweetKO will pull it in and save it for you so you can find it later.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! It really is that simple. TweetKO is &lt;em&gt;FREE&lt;/em&gt; and easy to use. In addition to pulling in your favorite tweets you can tell TweetKO to also pull in any tweets you wrote or retweeted, effectively backing up your Twitter history. A powerful search makes finding those tweets simple and easy. Plus you can save those search queries for later use.&lt;/p&gt;

&lt;p&gt;Well, I hope you check out TweetKO.com and find it as useful as I do. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CoverMe – Code Coverage for Ruby 1.9 Reaches RC1</title>
      <link>/2010/09/30/coverme-%E2%80%93-code-coverage-for-ruby-1-9-reaches-rc1/</link>
      <pubDate>Thu, 30 Sep 2010 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2010/09/30/coverme-%E2%80%93-code-coverage-for-ruby-1-9-reaches-rc1/</guid>
      <description>&lt;p&gt;In &lt;a href=&#34;http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/&#34;&gt;August&lt;/a&gt; I announced &lt;a href=&#34;http://github.com/markbates/cover_me&#34;&gt;CoverMe&lt;/a&gt; a code coverage tool for Ruby 1.9. Well, today I announce that it has hit it&amp;rsquo;s first release candidate! I&amp;rsquo;ve very excited by the fact it&amp;rsquo;s getting close to an &amp;lsquo;official&amp;rsquo; release.&lt;/p&gt;

&lt;p&gt;The response to CoverMe has been great and through feedback from the community I&amp;rsquo;ve made a lot of improvements and fixed a lot of issues.&lt;/p&gt;

&lt;p&gt;While quite a few things have changed under the hood, not much has changed in how you use CoverMe.
&lt;h2&gt;Installation&lt;/h2&gt;
The following are instructions for how you would configure CoverMe for a Rails 3 project, adjust to your local environment accordingly.&lt;/p&gt;

&lt;p&gt;In  your Gemfile add the following:
&lt;pre&gt;gem &amp;lsquo;cover_me&amp;rsquo;, &amp;lsquo;&amp;gt;= 1.0.0.rc1&amp;rsquo;, :group =&amp;gt; :test&lt;/pre&gt;
Then run:
&lt;pre&gt;$ bundle install&lt;/pre&gt;
After CoverMe is installed place the following line at the &lt;strong&gt;&lt;em&gt;VERY TOP&lt;/em&gt;&lt;/strong&gt; of your &amp;lsquo;test_helper.rb&amp;rsquo; or &amp;lsquo;spec_helper.rb&amp;rsquo; file (for Cucumber put it at the top of the &amp;lsquo;env.rb&amp;rsquo; file):
&lt;pre&gt;require &amp;lsquo;cover_me&amp;rsquo;&lt;/pre&gt;
I can&amp;rsquo;t emphasize enough how important it is that the require statement is at the &lt;strong&gt;&lt;em&gt;VERY&lt;/em&gt;&lt;/strong&gt; top of that file!&lt;/p&gt;

&lt;p&gt;Finally (and optionally) run:
&lt;pre&gt;$ rails g cover_me:install&lt;/pre&gt;
This will simply install a Rake task that will wrap both Test::Unit and RSpec tasks with CoverMe and will launch the results at the end of the test suites. I would recommend it. It&amp;rsquo;s kinda the whole point. :)
&lt;h2&gt;That&amp;rsquo;s it!&lt;/h2&gt;
Enjoy the release candidate, and of course, please let me know if you find any issues with it. Issues can be reported on &lt;a href=&#34;http://github.com/markbates/cover_me/issues&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CoverMe - Code Coverage for Ruby 1.9</title>
      <link>/2010/08/13/coverme-code-coverage-for-ruby-1-9/</link>
      <pubDate>Fri, 13 Aug 2010 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2010/08/13/coverme-code-coverage-for-ruby-1-9/</guid>
      <description>&lt;p&gt;Ruby 1.9(.2) is an amazing language to develop applications in. It&amp;rsquo;s faster, more powerful, cleaner, and a huge improvement over Ruby 1.8.x. Because of those reasons every Ruby developer should move to this exciting new version of our language.&lt;/p&gt;

&lt;p&gt;When making a move of this size it&amp;rsquo;s important to have the right tools to help us along. Unfortunately, one of the most useful tools as a Ruby developer, &lt;a href=&#34;http://github.com/relevance/rcov&#34;&gt;RCov&lt;/a&gt;, does not work with Ruby 1.9.&lt;/p&gt;

&lt;p&gt;RCov, for those unfamiliar analyzes your code and tells you which part of your code was not executed. This is INCREDIBLY useful when hooked up to your test suite. While, it&amp;rsquo;s not the only metric you should use when determining how good your test coverage it, it certainly is a great first step to point out exactly which parts of your code haven&amp;rsquo;t been touched at all!&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#34;http://github.com/markbates/cover_me&#34;&gt;CoverMe&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;##History&lt;/p&gt;

&lt;p&gt;While working on a Ruby 1.9/Rails 3 project, and loving everything about it (except for the lack of RCov), I came across a &lt;a href=&#34;http://engineering.attinteractive.com/2010/08/code-coverage-in-ruby-1-9/&#34;&gt;post&lt;/a&gt; by Aaron Patterson (of &lt;a href=&#34;http://github.com/tenderlove/nokogiri&#34;&gt;Nokogiri&lt;/a&gt; fame). In this post he quickly outlined a very basic coverage tool using the new built-in Coverage module in Ruby 1.9.&lt;/p&gt;

&lt;p&gt;After spending a morning playing with it, I was quickly able to grow the idea into something useful for the project. Later that day the company I was consulting for &lt;a href=&#34;http://www.biddingforgood.com&#34;&gt;BiddingForGood.com&lt;/a&gt;, and in particular their chief architect, &lt;a href=&#34;http://twitter.com/stuartmg&#34;&gt;Stuart Garner&lt;/a&gt;, told me to take a day or two and clean it up and release it for the world to use, and so &lt;a href=&#34;http://github.com/markbates/cover_me&#34;&gt;here&lt;/a&gt; it is.
##Features&lt;/p&gt;

&lt;p&gt;Here is a brief overview of the features of CoverMe:&lt;/p&gt;

&lt;p&gt;###Index Page&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sortable column headers (File, Lines, Lines of Code, Tested %).&lt;/li&gt;
&lt;li&gt;Searching/filtering by file name.&lt;/li&gt;
&lt;li&gt;Filtering by coverage percent.&lt;/li&gt;
&lt;li&gt;Color coded list of files to quickly see which ones are 100% covered, &amp;gt; 90% covered, or less than 90% covered.&lt;/li&gt;
&lt;li&gt;Large color coded average coverage percent, for quick reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;###Detail Page&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Line by line coverage report&lt;/li&gt;
&lt;li&gt;Color coded lines to quickly see which lines where executed and which ones were not.&lt;/li&gt;
&lt;li&gt;Side by side viewing with the corresponding test/spec file (if one exists).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&#34;http://github.com/markbates/cover_me&#34;&gt;README&lt;/a&gt; file for more information on installation and usage.&lt;/p&gt;

&lt;p&gt;##Thanks&lt;/p&gt;

&lt;p&gt;I would just quickly like to give another quick thanks to Aaron Patterson for pointing out the Coverage module in Ruby 1.9 and inspiring this, hopefully, helpful little gem. Also another big thanks to Stuart Garner for pushing me to package this up and release it to the world.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing Warp Drive for Rails</title>
      <link>/2009/10/07/introducing-warp-drive-for-rails/</link>
      <pubDate>Wed, 07 Oct 2009 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2009/10/07/introducing-warp-drive-for-rails/</guid>
      <description>

&lt;p&gt;At work recently we had a need to build a large Rails application that we then wanted to, for lack of a better word, subclass. Unfortunately there is no real good way of doing that. Rails Engines and templates have way too may limitations. We wanted to bundle up the entire Rails app (models, controllers, views, routes, migrations, configurations, libs, assets, etc&amp;hellip; everything!), but there was no good way of doing that. Well, now there is, it&amp;rsquo;s called the Warp Drive.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve decided to just include my README file below to explain what it is, since it&amp;rsquo;s a bit lengthy, and I don&amp;rsquo;t feel like retyping.&lt;/p&gt;

&lt;p&gt;This is still in it&amp;rsquo;s early stages, so use with care, but it does seem to be working for us on a daily basis. Let me know what you think!&lt;/p&gt;

&lt;h2 id=&#34;what-is-warp-drive&#34;&gt;What is Warp Drive?&lt;/h2&gt;

&lt;p&gt;Warp Drive is what Rails Engines wish they could be, and more! They kick Rails templates in the ass, and they beat keeping an ever evolving base Rails app up to date.&lt;/p&gt;

&lt;h3 id=&#34;what-are-rails-engines&#34;&gt;What are Rails Engines?&lt;/h3&gt;

&lt;p&gt;Rails Engines allow you to package up some of a Rails app (controllers, models, views, routes, libs) and put them in a plugin that can be included into a new Rails app, thereby giving it the functionality you had in the engine. That sounds good, but what about the downsides of using an engine? Well, you can&amp;rsquo;t override or extend any of the functionality from the engine in your main application. You can hack at the plugin, but now you&amp;rsquo;ve made it difficult to update. So what do you do if you want to add or alter a method to a controller or model? What do you do if you want to change the look and feel of a view? You have to copy everything into your main application. Boo!&lt;/p&gt;

&lt;p&gt;Rails Engines also don&amp;rsquo;t allow you to package up migrations, assets, plugins, initializers, etc&amp;hellip; All the fun stuff that you&amp;rsquo;ve come to know and love about a Rails application.&lt;/p&gt;

&lt;h3 id=&#34;enter-the-warp-drive&#34;&gt;Enter the Warp Drive!&lt;/h3&gt;

&lt;p&gt;So what is a Warp Drive? Great question. To put it simply a Warp Drive is a standard, full featured, Rails application that you can easily bundle up into a Ruby Gem, and include into another Rails app. That second Rails app now has all the power of the first Rails. That is all there is to it.&lt;/p&gt;

&lt;h2 id=&#34;creating-a-warp-drive&#34;&gt;Creating a Warp Drive.&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s assume we have an application that implements AuthLogic for handling user registration/authentication. We have controllers, views, models, plugins, initializers, configurations, migrations, tasks, etc&amp;hellip; it&amp;rsquo;s a full featured fully functional Rails application, we call it authenticator.&lt;/p&gt;

&lt;p&gt;We want to turn our authenticator application into a Warp Drive. We can do it in three simple steps, the first two steps you only need to do the first time, to set everything up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ gem install warp_drive&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ warpify&lt;/code&gt; That will add a little bit of code to your &lt;code&gt;Rakefile&lt;/code&gt;. That code simply requires the Warp Drive gem, and gives you hooks to configure the gem of your Warp Drive application.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ rake warp_drive:compile&lt;/code&gt; (&lt;code&gt;$ rake warp_drive:install&lt;/code&gt;) This will either compile your gem for your (&lt;code&gt;warp_drive:compile&lt;/code&gt;) or compile and install your gem (&lt;code&gt;warp_drive:install&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;rsquo;s it! You should now have your Rails application bundled up and/or installed as a RubyGem!&lt;/p&gt;

&lt;h2 id=&#34;using-a-warp-drive&#34;&gt;Using a Warp Drive.&lt;/h2&gt;

&lt;p&gt;With your fancy new Warp Drive, authenticator, built and installed how do you use it in that new application your building? Again, it&amp;rsquo;s stupid easy, and it only takes one step, that only needs to be run once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ install_warp_drive authenticator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That will put a few lines of code in your &lt;code&gt;Rakefile&lt;/code&gt;, so you have access to all the &lt;code&gt;Rakefile&lt;/code&gt; tasks in your Warp Drive, and a line in your &lt;code&gt;config/environment.rb&lt;/code&gt; so that it will load your Warp Drive when you launch your application.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! You&amp;rsquo;re done. Now you can run &lt;code&gt;rake db:migrate&lt;/code&gt; to run the migrations from both your Warp Drive and your new application. Enjoy!&lt;/p&gt;

&lt;h2 id=&#34;overriding-extending-and-other-such-fun-things&#34;&gt;Overriding, Extending, and Other Such Fun Things&lt;/h2&gt;

&lt;h3 id=&#34;overriding-and-extending&#34;&gt;Overriding and Extending&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ve been enjoying your new Warp Drive back application for a little while now, but you decide you really need to change an action in your controller, how do you go about that? Simple, just like you would any normal alteration to a Ruby class.&lt;/p&gt;

&lt;p&gt;Example:
Here is what the action looks like in our Warp Drive UsersController:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new&lt;/span&gt;
  &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;new&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our new application we can just open up the UsersController like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;UsersController&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;ApplicationController&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;new_with_default_name&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;new_without_default_name&lt;/span&gt;
    &lt;span class=&#34;vi&#34;&gt;@user&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;login&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;default_name&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;alias_method_chain&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:default_name&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Viola! The same works for any thing else in the system, models, libs, etc&amp;hellip; In our example we used &lt;code&gt;alias_method_chain&lt;/code&gt; to retain the original method, but we could have completely rewritten the method as well.&lt;/p&gt;

&lt;p&gt;You can also plop in a new view and it will override the view that was in your Warp Drive. The sky is really the limit.&lt;/p&gt;

&lt;h3 id=&#34;assets&#34;&gt;Assets&lt;/h3&gt;

&lt;p&gt;You can easily bundle assets from your public directory in your Warp Drive. Just make sure they are in folders called &lt;code&gt;warp_drive&lt;/code&gt;. Those folders will then be symlinked to your new project&amp;rsquo;s public directory when the application starts up.&lt;/p&gt;

&lt;h3 id=&#34;keep-those-rake-tasks-private&#34;&gt;Keep Those Rake Tasks Private!&lt;/h3&gt;

&lt;p&gt;We all them, Rake tasks we have created to help us do all sorts of things, and we usually don&amp;rsquo;t want them to ship. Well, Warp Drive has you covered there. Just place your tasks in folders called &lt;code&gt;private&lt;/code&gt; and Bob&amp;rsquo;s your uncle they won&amp;rsquo;t be available in the compiled gem.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;tasks&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rake&lt;/span&gt;
    &lt;span class=&#34;kp&#34;&gt;private&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rake&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In this example &lt;code&gt;foo.rake&lt;/code&gt; will be available to clients of your Warp Drive, but &lt;code&gt;bar.rake&lt;/code&gt; will not be.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>APN on Rails 0.3.0 Released</title>
      <link>/2009/07/31/apn-on-rails-0-3-0-released/</link>
      <pubDate>Fri, 31 Jul 2009 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2009/07/31/apn-on-rails-0-3-0-released/</guid>
      <description>&lt;p&gt;The latest version of Apple Push Notifications on Rails (APN on Rails) has been released. This release brings a few bug fixes, a new migration, and Feedback processing.&lt;/p&gt;

&lt;p&gt;Installing/upgrading is easy:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ sudo gem install apn_on_rails
$ ruby script/generate apn_migrations
$ rake db:migrate
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to always run the migrations generator after each update to get the latest database schema needed for the the gem.&lt;/p&gt;

&lt;p&gt;To use the new Feedback integration you have to first make sure that you update the new &lt;code&gt;last_registered_at&lt;/code&gt; column when your iPhone application calls home. This column is checked against the timestamp Apple returns with the device token. If the &lt;code&gt;last_registered_at&lt;/code&gt; is older than Apple&amp;rsquo;s date then the device is deleted, otherwise the Feedback is ignored.&lt;/p&gt;

&lt;p&gt;To get and process the list of devices from Apple&amp;rsquo;s Feedback service just run the following Rake task:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ rake apn:feedback:process&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cachetastic 3.0.0 Released</title>
      <link>/2009/06/18/cachetastic-3-0-0-released/</link>
      <pubDate>Thu, 18 Jun 2009 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2009/06/18/cachetastic-3-0-0-released/</guid>
      <description>&lt;p&gt;After more than two years powering production level applications I found that Cachetastic was starting to get a bit long in the tooth. I felt that there was a lot I could to make Cachetastic an even better library than it already was. I thought that I had added a bunch of cruft to the framework that people were just not using and maintaining it all seemed like a bit of a pointless chore.&lt;/p&gt;

&lt;p&gt;So what was I unhappy about?
&lt;h3&gt;Configuration:&lt;/h3&gt;
I was pretty unhappy with the way configuration was being done. I liked using Configatron to power the configuration, but I didn&amp;rsquo;t like the way I implemented the way I was using Configatron. For example, to set up one of the default settings, like the expiry time, you would configure it like such:
&lt;pre&gt;configatron.cachetastic_default_options.expiry_time = 30.minutes&lt;/pre&gt;
Now you would configure that same option like this:
&lt;pre&gt;configatron.cachetastic.defaults.expiry_time = 30.minutes&lt;/pre&gt;
That&amp;rsquo;s a little savings, but it really hits when you want to configure a particular cache. Let&amp;rsquo;s say we a cache called My::Super::AwesomeCache, to configure it in past versions of Cachetastic we would do this:
&lt;pre&gt;configatron.my_super_awesome_cache_options.expiry_time = 15.minutes&lt;/pre&gt;
Now in Cachetastic 3.0.0 we configure like this:
&lt;pre&gt;configatron.cachetastic.my.super.awesome_cache.expire_time = 15.minutes.&lt;/pre&gt;
As you can see all configuration now happens under the cachetastic namespace in Configatron. Then it&amp;rsquo;s a matter of using a Configatron namespace for each of your modules. I find it a lot easier to manage.&lt;/p&gt;

&lt;p&gt;Another change in configuration is that in previous versions if you wanted to override one default configuration value for a particular cache,  you had to override them all. Now, you can just override the one value  you want, and the rest will be nicely inherited from the defaults.
&lt;h3&gt;Speed&lt;/h3&gt;
Cachetastic has always been a very fast library, but I knew that more could be squeezed from that stone. With Cachetastic 3.0.0 you now get a hefty 25% improvement in the Memcached adapter and a whopping 99% in the LocalMemory adapter! Those are pretty awesome numbers. These numbers were easy to achieve when I stepped back and examined what it was I really wanted to do, and picked the most straightforward path to that goal.
&lt;h3&gt;Bloat&lt;/h3&gt;
After more than two years Cachetastic was starting to suffer from a severe case of bloat. For example, I&amp;rsquo;ve never used the DRb adapter, have you? So why is it there? The same goes for the HtmlFile adapter. I wrote that because at my last job the operations team weren&amp;rsquo;t savvy  enough to be able to get Apache to talk to Memcached, so they wanted to serve HTML files, hence the rather awful adapter. Both of those adapters are now history.&lt;/p&gt;

&lt;p&gt;There also used to be support for Rails Session Caching. Considering that most people are now using the Cookie store for sessions, there really is no need for this cache. It could also be argued that it should not have been bundled with Cachetastic at all. I would agree with those arguments. Cachetastic is, and should always be, a standalone caching framework, that can be plugged into Rails or any plain old Ruby project that needs caching support.&lt;/p&gt;

&lt;p&gt;Also purged is automatic support for mixing in the Cachetastic::Cacheable module into ActiveRecord. If you want this functionality, it is very easy to include in your application. I don&amp;rsquo;t want to force it on anyone, so that is gone now.&lt;/p&gt;

&lt;p&gt;Finally there are a handful of smaller features that I&amp;rsquo;m sure no one will miss that I&amp;rsquo;ve yanked out in the name of performance, reliability, and ease of maintenance.
&lt;h3&gt;Nice and Clean&lt;/h3&gt;
When I realized what I really wanted, and what I didn&amp;rsquo;t want, it became clear that what was needed was a fresh code base. With that said, I hit delete (well, not really) and started over again. The code is now smooth, so much easier to read, and fast. In previous versions even my eyes went a bit crossed when I tried to figure out exactly what was going on. There where quite a few levels of indirection, and things just weren&amp;rsquo;t place where they probably should&amp;rsquo;ve been. That has all been fixed.&lt;/p&gt;

&lt;p&gt;With a nice, clean code base comes a brand new set of tests. The tests are now extremely comprehensive, and while 2.x was very well tested, I know that 3.0.0, is tested to the hilt.&lt;/p&gt;

&lt;p&gt;Because 3.0.0 is a brand new code base, I should probably stress the fact that is &lt;strong&gt;NOT&lt;/strong&gt; backward compatible. So please be advised.
&lt;h3&gt;Installation:&lt;/h3&gt;
&lt;pre&gt;$ sudo gem install cachetastic&lt;/pre&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
I really hope everyone likes this brand new version of Cachetastic. I&amp;rsquo;m very happy with it, and I think if you give it a chance, you will be too.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to have a peek at the RDoc, it can be found at:
&lt;a href=&#34;http://cachetastic-api.mackframework.com/&#34;&gt;http://cachetastic-api.mackframework.com/&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release 0.8.3</title>
      <link>/2009/01/18/release-083/</link>
      <pubDate>Sun, 18 Jan 2009 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2009/01/18/release-083/</guid>
      <description>&lt;p&gt;Thanks to the cold and snowy New England winter this year, I&amp;rsquo;ve been able to devote quite a bit of time to getting Mack to run on Ruby 1.9, so with that said, here&amp;rsquo;s the 0.8.3 release of Mack, featuring&amp;hellip; TADA&amp;hellip; Ruby 1.9!! Of course there are a few other features and improvements in this release. Here&amp;rsquo;s a quick run down:
&lt;h3&gt;Ruby 1.9&lt;/h3&gt;
The big one. Mack runs very well on Ruby 1.9, unfortunately I can&amp;rsquo;t say the same thing about some other frameworks. I&amp;rsquo;ve had some run ins with DataMapper on 1.9, but I&amp;rsquo;m sure those will be ironed out shortly.&lt;/p&gt;

&lt;p&gt;A few weeks ago I announced I was working on getting Ruby 1.9 support for all my gems and libraries. I started out with Configatron, then upgraded Cachetastic and Genosaurus. Now Mack is 1.9 compatible. When I made the announcement the guys at RailsEnvy picked up on it and said that I made a call to arms to the community to pick up 1.9 support. Now granted, I didn&amp;rsquo;t actually say those words, but I think the intent was there, so I&amp;rsquo;m going to now officially say those words. This is a &amp;lsquo;call to arms&amp;rsquo; to the Ruby community to upgrade their gems, plugins, libraries, frameworks, etc&amp;hellip; to work on Ruby 1.9. I&amp;rsquo;ve done it, and I can tell you, it&amp;rsquo;s not that tough. Just use multiruby, and you&amp;rsquo;re off and running.
&lt;h3&gt;ActiveSupport In, Facets Out&lt;/h3&gt;
What with the world getting smaller these days, well, at least the world of Ruby web frameworks. A lot of great work is going into refactoring ActiveSupport and making it faster, better, and smaller. Because of that and the fact that every time a new release of Facets comes out it breaks a whole lot of stuff, I&amp;rsquo;ve decided to use ActiveSupport as the basis of the mack-facets gem. So basically mack-facets is just ActiveSupport with a few more enhancements.
&lt;h3&gt;JavaScript Effects&lt;/h3&gt;
Thanks to the tireless efforts of Gerardo Pis-Lopez, mack-javascript, has been upgraded to add helpers methods for effects for both Prototype/Scriptaculous and jQuery. Thank you to Gerardo for the much needed upgraded to mack-javascript.
&lt;h3&gt;Upgrades&lt;/h3&gt;
Mack has been upgraded to use Rack 0.9.1, DataMapper 0.9.9, and a few other smaller gems.&lt;/p&gt;

&lt;p&gt;Changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;#243 - Upgraded to Rack 0.9.1&lt;/li&gt;
&lt;li&gt;#242 - Upgraded to DataMapper 0.9.9&lt;/li&gt;
&lt;li&gt;#241 - Removed dependency on Facets&lt;/li&gt;
&lt;li&gt;#239 - Add do_sqlite3 to gems.rb&lt;/li&gt;
&lt;li&gt;#166 - Effects for mack-javascript&lt;/li&gt;
&lt;li&gt;#133 - Added Form Builders&lt;/li&gt;
&lt;li&gt;#22 - Ruby 1.9 Support&lt;/li&gt;
&lt;li&gt;gem: rack 0.9.1&lt;/li&gt;
&lt;li&gt;gem: rspec 1.1.12&lt;/li&gt;
&lt;li&gt;gem: configatron 2.2.2&lt;/li&gt;
&lt;li&gt;gem: cachetastic 2.1.2&lt;/li&gt;
&lt;li&gt;gem: data_mapper 0.9.9&lt;/li&gt;
&lt;li&gt;gem: addressable 2.0.1&lt;/li&gt;
&lt;li&gt;gem: extlib 0.9.9&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>