<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rack on MetaBates.com</title>
    <link>/tags/rack/</link>
    <description>Recent content in Rack on MetaBates.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>mark&#43;blog@markbates.com (Mark Bates)</managingEditor>
    <webMaster>mark&#43;blog@markbates.com (Mark Bates)</webMaster>
    <copyright>(c) 2016 Mark Bates.</copyright>
    <lastBuildDate>Sat, 08 Dec 2012 00:00:00 +0000</lastBuildDate>
    <atom:link href="/tags/rack/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Getting Started with Sinatra (Video)</title>
      <link>/2012/12/08/getting-started-with-sinatra-video/</link>
      <pubDate>Sat, 08 Dec 2012 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2012/12/08/getting-started-with-sinatra-video/</guid>
      <description>&lt;p&gt;In an earlier video we took a look at Rack to build incredibly lightweight web applications with Ruby. Rack&amp;rsquo;s toolkit allowed us to quickly throw to get a working application, but we did have to put a little effort into it once we wanted to build something a little more complex.&lt;/p&gt;

&lt;p&gt;Sometimes you want a fast and simple framework for building a simple web application. Perhaps you only need to respond to a handful of routes, or you want the response time for a small part of a bigger application to be lighting fast. The &lt;a href=&#34;http://www.sinatrarb.com/&#34;&gt;Sinatra&lt;/a&gt; framework is made for just these moments.&lt;/p&gt;

&lt;p&gt;Today let&amp;rsquo;s take a quick look at this framework and see how quickly we can build lightweight web applications.&lt;/p&gt;

&lt;iframe src=&#34;http://player.vimeo.com/video/55188956&#34; width=&#34;620&#34; height=&#34;350&#34; frameborder=&#34;0&#34; webkitAllowFullScreen=&#34;webkitAllowFullScreen&#34; mozallowfullscreen=&#34;mozallowfullscreen&#34; allowFullScreen=&#34;allowFullScreen&#34;&gt;&lt;!-- fixes a wierd problem with jekyll --&gt;&lt;/iframe&gt;

&lt;p&gt;The full script, including source code, can be found here &lt;a href=&#34;https://gist.github.com/4243330&#34;&gt;https://gist.github.com/4243330&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started with Rack (Video)</title>
      <link>/2012/12/02/getting-started-with-rack-video/</link>
      <pubDate>Sun, 02 Dec 2012 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2012/12/02/getting-started-with-rack-video/</guid>
      <description>

&lt;p&gt;If you&amp;rsquo;re writing web applications with Ruby there comes a time when you might need something a lot simpler, or even faster, than Ruby on Rails or the Sinatra micro-framework. Enter Rack.&lt;/p&gt;

&lt;p&gt;In this 5:25 minute long video we&amp;rsquo;ll quickly explore the Rack framework, which powers Ruby on Rails, Sinatra, and a whole host of other frameworks. We&amp;rsquo;ll start with a one line Rack application and move on to write a very simple web framework using this powerful tool.&lt;/p&gt;

&lt;h3 id=&#34;update&#34;&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;A lot of people have asked about a gist of the code, here it is &lt;a href=&#34;https://gist.github.com/4240848&#34;&gt;https://gist.github.com/4240848&lt;/a&gt; it&amp;rsquo;s the full script of the screen cast along with all of the code. Enjoy!&lt;/p&gt;

&lt;h3 id=&#34;update-1&#34;&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;This video is now available on &lt;a href=&#34;http://www.metacasts.tv/casts/getting-started-with-rack&#34;&gt;MetaCasts.tv&lt;/a&gt;. A new screen cast subscription site that focuses on Ruby and related technologies, such as Rails, JavaScript, CoffeeScript and more.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Sprockets without Rails</title>
      <link>/2011/08/31/using-sprockets-without-rails/</link>
      <pubDate>Wed, 31 Aug 2011 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2011/08/31/using-sprockets-without-rails/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve started working this week on an example application for the next book I&amp;rsquo;m about to write and I wanted a simple way for my readers to easily run the app (it&amp;rsquo;s going to be a single HTML file with a ton of cool JavaScript going on in it). My first choice for running this app was to use the popular Ruby library, &lt;a href=&#34;http://rack.rubyforge.org/&#34;&gt;Rack&lt;/a&gt;. If you are unfamiliar with Rack, please check it out. It provides a simple interface for writing web applications. By writing a simple Ruby file readers can use their favorite Rack compatible web server to launch the application. Sounds simple, eh? That&amp;rsquo;s because it is.&lt;/p&gt;

&lt;p&gt;With a simple Rack application written in a few lines of code I was able to start developing my example application. That&amp;rsquo;s when I realized I needed a good way to serve up all my &lt;a href=&#34;http://jashkenas.github.com/coffee-script/&#34;&gt;CoffeeScript&lt;/a&gt; and &lt;a href=&#34;http://sass-lang.com/&#34;&gt;Sass&lt;/a&gt; files. I was going to write a watchr script that did this, but I thought that was a bit heavy handed, and not very flexible, so I turned to &lt;a href=&#34;https://github.com/sstephenson/sprockets&#34;&gt;Sprockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sprockets recently gained a lot of attention because it is bundled in with &lt;a href=&#34;http://guides.rubyonrails.org/3_1_release_notes.html&#34;&gt;Rails 3.1&lt;/a&gt; to serve up an application&amp;rsquo;s assets. It&amp;rsquo;s a clever little library that will process your files using CoffeeScript, Sass, etc&amp;hellip; and let you bundle them up in to a single asset by using a manifest. That was exactly what I wanted. After I spent the better part of an afternoon doing a bit of research and debugging here is the Rack configuration file I came up with:&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/1184400.js&#34;&gt; &lt;/script&gt;

&lt;p&gt;That will serve
&lt;pre&gt;/assets/application.css&lt;/pre&gt;
via Sprockets. The file itself will live in
&lt;pre&gt;&amp;lt;pwd&amp;gt;/app/assets/stylesheets/application.scss&lt;/pre&gt;
The same goes for JavaScript files.&lt;/p&gt;

&lt;p&gt;Hopefully this will save someone else a little of time when they&amp;rsquo;re trying to do the same thing. Enjoy!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Release 0.8.3</title>
      <link>/2009/01/18/release-083/</link>
      <pubDate>Sun, 18 Jan 2009 00:00:00 +0000</pubDate>
      <author>mark&#43;blog@markbates.com (Mark Bates)</author>
      <guid>/2009/01/18/release-083/</guid>
      <description>&lt;p&gt;Thanks to the cold and snowy New England winter this year, I&amp;rsquo;ve been able to devote quite a bit of time to getting Mack to run on Ruby 1.9, so with that said, here&amp;rsquo;s the 0.8.3 release of Mack, featuring&amp;hellip; TADA&amp;hellip; Ruby 1.9!! Of course there are a few other features and improvements in this release. Here&amp;rsquo;s a quick run down:
&lt;h3&gt;Ruby 1.9&lt;/h3&gt;
The big one. Mack runs very well on Ruby 1.9, unfortunately I can&amp;rsquo;t say the same thing about some other frameworks. I&amp;rsquo;ve had some run ins with DataMapper on 1.9, but I&amp;rsquo;m sure those will be ironed out shortly.&lt;/p&gt;

&lt;p&gt;A few weeks ago I announced I was working on getting Ruby 1.9 support for all my gems and libraries. I started out with Configatron, then upgraded Cachetastic and Genosaurus. Now Mack is 1.9 compatible. When I made the announcement the guys at RailsEnvy picked up on it and said that I made a call to arms to the community to pick up 1.9 support. Now granted, I didn&amp;rsquo;t actually say those words, but I think the intent was there, so I&amp;rsquo;m going to now officially say those words. This is a &amp;lsquo;call to arms&amp;rsquo; to the Ruby community to upgrade their gems, plugins, libraries, frameworks, etc&amp;hellip; to work on Ruby 1.9. I&amp;rsquo;ve done it, and I can tell you, it&amp;rsquo;s not that tough. Just use multiruby, and you&amp;rsquo;re off and running.
&lt;h3&gt;ActiveSupport In, Facets Out&lt;/h3&gt;
What with the world getting smaller these days, well, at least the world of Ruby web frameworks. A lot of great work is going into refactoring ActiveSupport and making it faster, better, and smaller. Because of that and the fact that every time a new release of Facets comes out it breaks a whole lot of stuff, I&amp;rsquo;ve decided to use ActiveSupport as the basis of the mack-facets gem. So basically mack-facets is just ActiveSupport with a few more enhancements.
&lt;h3&gt;JavaScript Effects&lt;/h3&gt;
Thanks to the tireless efforts of Gerardo Pis-Lopez, mack-javascript, has been upgraded to add helpers methods for effects for both Prototype/Scriptaculous and jQuery. Thank you to Gerardo for the much needed upgraded to mack-javascript.
&lt;h3&gt;Upgrades&lt;/h3&gt;
Mack has been upgraded to use Rack 0.9.1, DataMapper 0.9.9, and a few other smaller gems.&lt;/p&gt;

&lt;p&gt;Changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;#243 - Upgraded to Rack 0.9.1&lt;/li&gt;
&lt;li&gt;#242 - Upgraded to DataMapper 0.9.9&lt;/li&gt;
&lt;li&gt;#241 - Removed dependency on Facets&lt;/li&gt;
&lt;li&gt;#239 - Add do_sqlite3 to gems.rb&lt;/li&gt;
&lt;li&gt;#166 - Effects for mack-javascript&lt;/li&gt;
&lt;li&gt;#133 - Added Form Builders&lt;/li&gt;
&lt;li&gt;#22 - Ruby 1.9 Support&lt;/li&gt;
&lt;li&gt;gem: rack 0.9.1&lt;/li&gt;
&lt;li&gt;gem: rspec 1.1.12&lt;/li&gt;
&lt;li&gt;gem: configatron 2.2.2&lt;/li&gt;
&lt;li&gt;gem: cachetastic 2.1.2&lt;/li&gt;
&lt;li&gt;gem: data_mapper 0.9.9&lt;/li&gt;
&lt;li&gt;gem: addressable 2.0.1&lt;/li&gt;
&lt;li&gt;gem: extlib 0.9.9&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>