<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Mark Bates</title>
 <link href="http://www.metabates.com/atom.xml" rel="self"/>
 <link href="http://www.metabates.com"/>
 <updated>2013-10-01T17:44:27-04:00</updated>
 <id>http://www.metabates.com</id>
 <author>
   <name>Mark Bates</name>
   <email>mark@markbates.com</email>
 </author>

 
 <entry>
   <title>Introducting LineLytics.com</title>
   <link href="http://www.metabates.com/2013/06/02/introducting-linelyticscom"/>
   <updated>2013-06-02T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2013/06/02/introducting-linelyticscom</id>
   <content type="html">&lt;img class=&#39;img-right&#39; src=&#39;https://www.linelytics.com/assets/screenshots/dashboard.png&#39; style=&#39;width: 400px&#39; /&gt;
&lt;p&gt;Today I am announcing the release of a new SaaS application I&amp;#8217;ve written, &lt;a href=&#39;http://www.linelytics.com?from=metabates.com&#39;&gt;LineLytics.com&lt;/a&gt;. I&amp;#8217;m very excited about this application, and if you are a &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; user, then you should be too.&lt;/p&gt;

&lt;p&gt;So what is &lt;a href=&#39;http://www.linelytics.com?from=metabates.com&#39;&gt;LineLytics.com&lt;/a&gt;? First, let me give you a little background on how the application came to be. At the beginning of the year I announced my weekly screen cast site, &lt;a href=&#39;http://www.metacasts.tv&#39;&gt;MetaCasts.tv&lt;/a&gt;. The site has a monthly subscription of $9, or a yearly subscription of $90. If you don&amp;#8217;t want to subscribe you can also buy individual videos, usually around $6 each.&lt;/p&gt;

&lt;p&gt;When it came time to implement the purchasing/subscribing functionality in MetaCasts I looked at all the different payment processors on the market. I&amp;#8217;ve used several different ones in the past, and was never satisfied with them. Either they charged too much (even if you weren&amp;#8217;t making any money) or they were difficult to implement. Usually it was both. Then I found &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt;. &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; was a revelation. It was both sanely priced (2.9% + $.30) &lt;em&gt;and&lt;/em&gt; easy to implement. I was in love.&lt;/p&gt;
&lt;img class=&#39;img-left&#39; src=&#39;https://www.linelytics.com/assets/screenshots/sales.png&#39; style=&#39;width: 400px&#39; /&gt;
&lt;p&gt;After using &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; for several months to power MetaCasts, I found a chink in their armor. I had no idea where my revenue was coming from. Which of my products were selling the best? Which coupons were proving effective? What was my subscriber churn? I needed this information, and more. I needed to be able to analyze my revenue and make decisions based on it.&lt;/p&gt;

&lt;p&gt;That is where &lt;a href=&#39;http://www.linelytics.com?from=metabates.com&#39;&gt;LineLytics.com&lt;/a&gt;. Knowing that &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; has an amazing API I was able to build an application that provided to me, in real-time mind you, all sorts of great information about my sales.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve been using &lt;a href=&#39;http://www.linelytics.com?from=metabates.com&#39;&gt;LineLytics.com&lt;/a&gt; last couple of months while I&amp;#8217;ve been developing it, and I can tell you my mind has been blown at some of the information I&amp;#8217;ve seen in my data. Information that is just not readily apparent in the &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; platform today.&lt;/p&gt;

&lt;p&gt;I could go into specifics about the technologies I&amp;#8217;m using, but I won&amp;#8217;t, this isn&amp;#8217;t that sort of post. Instead I just want to say that if you too are a &lt;a href=&#39;http://stripe.com&#39;&gt;Stripe&lt;/a&gt; customer, than you owe it to yourself to sign up for &lt;a href=&#39;http://www.linelytics.com?from=metabates.com&#39;&gt;LineLytics.com&lt;/a&gt; your business better than you&amp;#8217;ve ever been able to before.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m really looking forward to seeing how people use the application, and I&amp;#8217;m open to any suggestions you might have on reports that you&amp;#8217;d like to see, I know I have a lot of great ideas that I still want to implement.&lt;/p&gt;

&lt;p&gt;I hope this helps!&lt;/p&gt;
&lt;div style=&#39;text-align: center&#39;&gt;
  &lt;a class=&#39;btn btn-large btn-primary&#39; href=&#39;http://www.linelytics.com?from=metabates.com&#39; target=&#39;_blank&#39;&gt;&lt;b&gt;Check out LineLytics.com&lt;/b&gt;&lt;/a&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Announcing MetaCasts.tv Screen Casts</title>
   <link href="http://www.metabates.com/2013/01/01/announcing-metacaststv-screen-casts"/>
   <updated>2013-01-01T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2013/01/01/announcing-metacaststv-screen-casts</id>
   <content type="html">&lt;p&gt;One of my favorite things to do is learn. I love learning. It&amp;#8217;s been a central tenet of my life. When I was 11 I taught myself to play guitar and then ended up receiving an honors BA degree in music years later. During college I taught myself how to program and have spent the last 14 years as a professional developer. I&amp;#8217;ve parlayed my love of learning into a successful career that has included working with some of the brightest minds in the industry, authoring two books, and speaking at conferences all around the world.&lt;/p&gt;

&lt;p&gt;One of my favorite ways to learn is through video. I love watching videos about technology. I love seeing it in action. I love hearing the tips and tricks as they come up. I find it to be an incredibly immersive and engaging experience, as well as a fun way to learn. It&amp;#8217;s like having a pairing partner right there with you.&lt;/p&gt;

&lt;p&gt;Because of my love of screen casts and learning I have decided to launch &lt;a href=&#39;http://www.metacasts.tv&#39;&gt;MetaCasts.tv&lt;/a&gt;! MetaCasts are weekly screen casts that center around Ruby and related technologies, such as JavaScript, CoffeeScript, Rails, etc&amp;#8230; All of the screen casts are presented in HD and are available to watch on all platforms! You can even subscribe to them in iTunes and new episodes will automatically be downloaded for you.&lt;/p&gt;

&lt;p&gt;As of right now there will be a guaranteed new video each week. Some weeks there will be more, but never less. When I reach a threshold of subscribers to focus on MetaCasts 100% then you can expect 2-3 videos a week, plus longer form videos as well. If you&amp;#8217;d like that to happen, then I strongly encourage you to sign up now, and spread the word!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m very excited about this new venture, and I hope you are too! So please head on over to &lt;a href=&#39;http://www.metacasts.tv&#39;&gt;MetaCasts.tv&lt;/a&gt; now and check it out. You won&amp;#8217;t be disappointed.&lt;/p&gt;
&lt;div style=&#39;text-align: center&#39;&gt;
  &lt;a class=&#39;btn btn-large btn-primary&#39; href=&#39;http://www.metacasts.tv&#39; target=&#39;_blank&#39;&gt;&lt;b&gt;Check out MetaCasts.tv&lt;/b&gt;&lt;/a&gt;
&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>JavaScript Prototypes (Video)</title>
   <link href="http://www.metabates.com/2012/12/15/javascript-prototypes-video"/>
   <updated>2012-12-15T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2012/12/15/javascript-prototypes-video</id>
   <content type="html">&lt;p&gt;In this short video we&amp;#8217;ll take a look at the basics of how JavaScript prototypes work. We&amp;#8217;ll also look at a few of the fun things you can do with JavaScript prototypes, as well as how they can be dangerous if mis-used.&lt;/p&gt;

&lt;h3 id=&#39;update&#39;&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;This video is now available on &lt;a href=&#39;http://www.metacasts.tv/casts/javascript-prototypes&#39;&gt;MetaCasts.tv&lt;/a&gt;. A new screen cast subscription site that focuses on Ruby and related technologies, such as Rails, JavaScript, CoffeeScript and more.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting Started with Sinatra (Video)</title>
   <link href="http://www.metabates.com/2012/12/08/getting-started-with-sinatra-video"/>
   <updated>2012-12-08T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2012/12/08/getting-started-with-sinatra-video</id>
   <content type="html">&lt;p&gt;In an earlier video we took a look at Rack to build incredibly lightweight web applications with Ruby. Rack&amp;#8217;s toolkit allowed us to quickly throw to get a working application, but we did have to put a little effort into it once we wanted to build something a little more complex.&lt;/p&gt;

&lt;p&gt;Sometimes you want a fast and simple framework for building a simple web application. Perhaps you only need to respond to a handful of routes, or you want the response time for a small part of a bigger application to be lighting fast. The &lt;a href=&#39;http://www.sinatrarb.com/&#39;&gt;Sinatra&lt;/a&gt; framework is made for just these moments.&lt;/p&gt;

&lt;p&gt;Today let&amp;#8217;s take a quick look at this framework and see how quickly we can build lightweight web applications.&lt;/p&gt;
&lt;iframe allowFullScreen=&#39;allowFullScreen&#39; frameborder=&#39;0&#39; height=&#39;350&#39; mozallowfullscreen=&#39;mozallowfullscreen&#39; src=&#39;http://player.vimeo.com/video/55188956&#39; webkitAllowFullScreen=&#39;webkitAllowFullScreen&#39; width=&#39;620&#39;&gt;&lt;!-- fixes a wierd problem with jekyll --&gt;&lt;/iframe&gt;
&lt;p&gt;The full script, including source code, can be found here &lt;a href=&#39;https://gist.github.com/4243330&#39;&gt;https://gist.github.com/4243330&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting Started with Rack (Video)</title>
   <link href="http://www.metabates.com/2012/12/02/getting-started-with-rack-video"/>
   <updated>2012-12-02T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2012/12/02/getting-started-with-rack-video</id>
   <content type="html">&lt;p&gt;If you&amp;#8217;re writing web applications with Ruby there comes a time when you might need something a lot simpler, or even faster, than Ruby on Rails or the Sinatra micro-framework. Enter Rack.&lt;/p&gt;

&lt;p&gt;In this 5:25 minute long video we&amp;#8217;ll quickly explore the Rack framework, which powers Ruby on Rails, Sinatra, and a whole host of other frameworks. We&amp;#8217;ll start with a one line Rack application and move on to write a very simple web framework using this powerful tool.&lt;/p&gt;

&lt;h3 id=&#39;update&#39;&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;A lot of people have asked about a gist of the code, here it is &lt;a href=&#39;https://gist.github.com/4240848&#39;&gt;https://gist.github.com/4240848&lt;/a&gt; it&amp;#8217;s the full script of the screen cast along with all of the code. Enjoy!&lt;/p&gt;

&lt;h3 id=&#39;update&#39;&gt;UPDATE:&lt;/h3&gt;

&lt;p&gt;This video is now available on &lt;a href=&#39;http://www.metacasts.tv/casts/getting-started-with-rack&#39;&gt;MetaCasts.tv&lt;/a&gt;. A new screen cast subscription site that focuses on Ruby and related technologies, such as Rails, JavaScript, CoffeeScript and more.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CoffeeScript: Fat Arrow Functions (Video)</title>
   <link href="http://www.metabates.com/2012/11/21/coffeescript-fat-arrow-functions"/>
   <updated>2012-11-21T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2012/11/21/coffeescript-fat-arrow-functions</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve just started to work on a series of screencasts. The topics will be varied, but will center around Ruby, Rails, JavaScript, CoffeeScript, iOS, and the like, ranging in time from 2 minutes to 10-15 minutes.&lt;/p&gt;

&lt;p&gt;Because I&amp;#8217;m just starting to get my feet wet in this area I thought I would share the first of these screencasts with everyone here in the hopes of getting some feedback, good or bad.&lt;/p&gt;

&lt;p&gt;So without further adieu I offer up to you my first screencast, &amp;#8220;CoffeeScript: Fat Arrow Functions&amp;#8221;. Enjoy!&lt;/p&gt;
&lt;iframe allowFullScreen=&#39;allowFullScreen&#39; frameborder=&#39;0&#39; height=&#39;350&#39; mozallowfullscreen=&#39;mozallowfullscreen&#39; src=&#39;http://player.vimeo.com/video/54050364&#39; webkitAllowFullScreen=&#39;webkitAllowFullScreen&#39; width=&#39;620&#39;&gt;&lt;!-- sdfasdfasd --&gt;&lt;/iframe&gt;</content>
 </entry>
 
 <entry>
   <title>Deploying to Heroku from TravisCI</title>
   <link href="http://www.metabates.com/2012/10/23/deploying-to-heroku-from-travisci"/>
   <updated>2012-10-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/10/23/deploying-to-heroku-from-travisci</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;http://www.travisci.org&#39;&gt;Travis CI&lt;/a&gt; and &lt;a href=&#39;http://www.heroku.com&#39;&gt;Heroku&lt;/a&gt; are two of my favorite tools. Recently I tried to figure out if there was an easy way to have Travis automatically deploy to Heroku once the tests have passed. Turns out it&amp;#8217;s incredibly easy!&lt;/p&gt;

&lt;p&gt;All you need to do is add the following as your &lt;code&gt;after_script&lt;/code&gt; in your &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Replace with your own Heroku API key and your Heroku git endpoint and Bob&amp;#8217;s your uncle Travis will do the heavy lifting for you and deploy to Heroku for you if, and only if, your tests pass.&lt;/p&gt;

&lt;p&gt;One quick final note, I would recommend creating a new Heroku account to use as a &amp;#8220;deployer&amp;#8221; account because you do have to include your API key in the &lt;code&gt;.travis.yml&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it! Enjoy your continuous integration and continuous deployment all mixed up.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Editor Wars (Won&#39;t Someone Think of the Children?)</title>
   <link href="http://www.metabates.com/2012/10/19/editor-wars-wont-someone-think-of-the-children"/>
   <updated>2012-10-19T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/10/19/editor-wars-wont-someone-think-of-the-children</id>
   <content type="html">&lt;p&gt;My editor/IDE is better than yours! That&amp;#8217;s right. My editor can do everything, and yours is just a toy. My editor let&amp;#8217;s me write code, edit code, delete code. It can generate Lorem Ipsum, flay a salmon, and program my VCR. Can your editor do that? I doubt it. My awesome editor makes me a better developer. More importantly it makes me a better developer than you. If you don&amp;#8217;t switch to my editor you&amp;#8217;re a fool and your code must clearly be terrible.&lt;/p&gt;

&lt;p&gt;Does this conversation sound familiar to you? It should. I hear similar conversations to this all the time. There are a lot of different editors/IDEs out there, but they all pretty much do the same thing. Some do certain things better than others, and so on. So why do we feel that those who don&amp;#8217;t use the same editor that we do are somehow inferior developers to ourselves?&lt;/p&gt;

&lt;p&gt;Do you use VIM? Sublime Text 2? TextMate? Emacs? Etc&amp;#8230;? Who cares? I have a better question for you. If the need arose could you write your code without the help of a dedicated editor or IDE? Could you wrap an entire application using Notepad? I&amp;#8217;m not saying that you would want to, but could you?&lt;/p&gt;

&lt;p&gt;A lot of developers use their preferred editor as a crutch. A way to not truly have to learn the languages, frameworks, and other tools that are actively developing in. Why should you learn the correct syntax for something when your editor will fill it all in for you with a keyboard shortcut? Sadly, I know a lot of developers who fall into this category. Developers who are being held hostage by their editors.&lt;/p&gt;

&lt;p&gt;We don&amp;#8217;t go around arguing with people over which toaster they should be using, so why should we do that with text editors? Instead of arguing about editor choices, instead, spend that time being constructive. Challenge yourself to try those other editors, and see what the fuss is about, or better yet, throw away your editor and try coding your next project in the most basic text editor you can find. It&amp;#8217;ll be an eye opening experience. Trust me.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Just Say No To Laptops... At Conferences</title>
   <link href="http://www.metabates.com/2012/05/09/just-say-no-to-laptops-at-conferences"/>
   <updated>2012-05-09T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/05/09/just-say-no-to-laptops-at-conferences</id>
   <content type="html">&lt;img class=&#39;img-right&#39; src=&#39;/assets/images/2012/05/09/laptop-ban.jpg&#39; style=&#39;width: 300px&#39; /&gt;
&lt;p&gt;Conferences, user groups, etc&amp;#8230; are about two things as far as I&amp;#8217;m concerned; education and networking. Those points often coincide with one another and are not mutually exclusive.&lt;/p&gt;

&lt;p&gt;Recently at conferences, user groups, meet ups, what have you, I have noticed a distrubing trend; developers sitting in the back of the rooms, hallways, and other common areas, hacking away on their laptops.&lt;/p&gt;

&lt;p&gt;Lot&amp;#8217;s of time, energy, and money is spent to create an environment at these events where people can come and learn both from the speakers of the event as well as from each during the social events that are scheduled. To sit in the hallway, eat the boxed lunch the conference gives you, and hack away in solitude you are missing the whole point of these events. Why even bother to attend? It just seems like a waste.&lt;/p&gt;

&lt;p&gt;Event talks can be informative, but they can also be boring and poorly executed, but you&amp;#8217;ll never know which it is if you&amp;#8217;re too engrossed in your own laptop than if you&amp;#8217;re paying attention. All talks will seem boring and uninteresting if you&amp;#8217;re not paying attention.&lt;/p&gt;

&lt;p&gt;When I sit in a talk and find it to be irrelevant to my interests or the present is doing a poor job of presenting the talk, I head out to the common areas and try and find a person to talk to. Why, because that person might have something interesting to say that I can learn from.&lt;/p&gt;

&lt;p&gt;Interacting with other developers is possibly the biggest win you can get from one of these events. Grab a cup of coffee, a beer, lunch, whatever, with someone you DON&amp;#8217;T know. Ask them what they do, how they do it, you&amp;#8217;ll be surprised at what you&amp;#8217;ll learn. These social interactions are one of the main reasons I go to conferences. I have learned about new libraries, new techniques, new design patterns, and more, all while enjoying a good meal or a few drinks.&lt;/p&gt;

&lt;p&gt;If I just sat somewhere with my laptop it would be significantly harder for me to learn about these things, ask questions, and grow as a developer.&lt;/p&gt;

&lt;p&gt;People, outside of the tech world, have a misconception that developers are introverts. People who shy away from social interaction and who are just too focused on their own worlds to care about what others might have to offer. Sadly, this misconception is based in reality, a reality that must change.&lt;/p&gt;

&lt;p&gt;To event organizers I say this, find a way to get developers to put down their laptops. Change up the format, turn off the wifi, set off an EMP, or just downright ban laptops from the event areas.&lt;/p&gt;

&lt;p&gt;To attendees I say TURN OFF YOUR LAPTOPS, PHONES, TABLETS, etc&amp;#8230; It won&amp;#8217;t kill you to be disconnected for a hours. In fact, it will only help you. It will help you to become connected to other developers. Build relationships with these people.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m not just preaching something here that doesn&amp;#8217;t really work in practice. It does. I have gotten lucrative contracts, book deals, friendships, speaking engagements, and more simply by closing my laptop and opening my mind. I encourage you to do the same. You&amp;#8217;ll thank me in the end.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>There is No Escape! (Actually There is and You Should Always Use It.)</title>
   <link href="http://www.metabates.com/2012/04/17/there-is-no-escape-actually-there-is-and-you-should-always-use-it"/>
   <updated>2012-04-17T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/04/17/there-is-no-escape-actually-there-is-and-you-should-always-use-it</id>
   <content type="html">&lt;h3 id=&#39;beware_your_users&#39;&gt;Beware Your Users:&lt;/h3&gt;
&lt;img class=&#39;img-right&#39; src=&#39;/assets/images/2012/04/17/escape_pod.jpg&#39; style=&#39;width: 300px&#39; /&gt;
&lt;p&gt;Every developer should already know about, and work to prevent, &lt;a href=&#39;http://en.wikipedia.org/wiki/Cross-site_scripting&#39;&gt;scripting attacks&lt;/a&gt; on their site. Scripting attacks are one of the easiest ways for a hacker to attack your site, they are also one of the easiest attacks to prevent.&lt;/p&gt;

&lt;p&gt;Whenever you let an end user enter text into a form on your site, and then display that text to other users on your site, you&amp;#8217;ve opened yourself up to this sort of attack.&lt;/p&gt;

&lt;p&gt;What can a hacker do in these sorts of attacks? Well, they can run malicious JavaScript that appears to the world to have come from your site. That means they can read cookies? Alter the page and ask for things such as passwords, credit card numbers, etc&amp;#8230; All the while the end user believes these requests are coming from your site. That&amp;#8217;s not good.&lt;/p&gt;

&lt;p&gt;So how do you prevent against this? Well, you should always escape any text that orginally came from an end user to get rid of any &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags for a start. I would say go all out and get rid of, or escape, anything inside of &lt;code&gt;&amp;lt;&lt;/code&gt; or &lt;code&gt;&amp;gt;&lt;/code&gt; brackets.&lt;/p&gt;

&lt;p&gt;A lot of web frameworks are trying to build this in now, to make it easier for developers to protect against such attacks. For example, in &lt;a href=&#39;http://rubyonrails.org/&#39;&gt;Rails&lt;/a&gt; all data that comes from the database is considered tainted and will be automatically escaped when displayed to the screen. The developer has to go out of their way to tell Rails that a particular string is safe. I, personally, really like this approach.&lt;/p&gt;

&lt;p&gt;Lately I&amp;#8217;ve been doing a lot of work with &lt;a href=&#39;http://documentcloud.github.com/backbone/&#39;&gt;Backbone.js&lt;/a&gt;, it has replaced the view layer in Rails for me. When working with a Backbone model if you want to get an attribute you would normally call the &lt;code&gt;get&lt;/code&gt; function. Let me demonstrate:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;That code will set the &lt;code&gt;h1&lt;/code&gt; tag on the page to whatever the value of the attribute &lt;code&gt;foo&lt;/code&gt; is, in this case the value &lt;code&gt;&quot;Bar&quot;&lt;/code&gt;. That&amp;#8217;s all fine and dandy, but what if we set the value of the &lt;code&gt;foo&lt;/code&gt; attribute to something a bit more malicious:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;If we were to run that code this time we would get an alert window that said &lt;code&gt;xss&lt;/code&gt;. Not the worse thing that can happen, but it&amp;#8217;s still pretty darn bad!&lt;/p&gt;

&lt;p&gt;How can you prevent this from happening when using Backbone? Stop using the &lt;code&gt;get&lt;/code&gt; function! There are only two places where I can see ever using the &lt;code&gt;get&lt;/code&gt;function, and I&amp;#8217;ll get to those in a second.&lt;/p&gt;

&lt;h3 id=&#39;_is_your_only_option&#39;&gt;&lt;code&gt;escape&lt;/code&gt; is Your Only Option:&lt;/h3&gt;

&lt;p&gt;To prevent these sorts of scripting attacks when using Backbone, you should be using the &lt;code&gt;escape&lt;/code&gt; function. It essentially behaves just like the &lt;code&gt;get&lt;/code&gt; function, but it will return an escaped version of the attribute.&lt;/p&gt;

&lt;p&gt;If we were to update the malicious code example to look something like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;when it is run we would end up with an &lt;code&gt;h1&lt;/code&gt; tag that had a value of &lt;code&gt;&amp;amp;lt;script&amp;amp;gt;alert(&amp;amp;#x27;xss&amp;amp;#x27;)&amp;amp;lt;&amp;amp;#x2F;script&amp;amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, I&amp;#8217;ll be the first to admit that doesn&amp;#8217;t look very pretty, but at least the scripting attack has failed.&lt;/p&gt;

&lt;h3 id=&#39;when_you_should_use_&#39;&gt;When You Should Use &lt;code&gt;get&lt;/code&gt;:&lt;/h3&gt;

&lt;p&gt;Earlier I mentioned there are two places where I could see using the &lt;code&gt;get&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Because the &lt;code&gt;escape&lt;/code&gt; function is santizing the value of the attribute for you there is a slight performance overhead, therefore, if you are definitely not going to executing the value of that attribute, then using the &lt;code&gt;get&lt;/code&gt; function is acceptable. For example if you were doing something like the following:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Notice how there I used the &lt;code&gt;get&lt;/code&gt; function to check whether the attribute&amp;#8217;s value was &lt;code&gt;null&lt;/code&gt; and then I used the &lt;code&gt;escape&lt;/code&gt; function to actually print out that value. That is a perfectly acceptable use of the &lt;code&gt;get&lt;/code&gt; function. It also, happens to the exact reason for use case number two.&lt;/p&gt;

&lt;p&gt;The second reason you would want to use the &lt;code&gt;get&lt;/code&gt; function has already been highlighted in the previous code example. The &lt;code&gt;get&lt;/code&gt; function returns the original attribute value, unaltered. The &lt;code&gt;escape&lt;/code&gt; function, however, will always return a &lt;code&gt;string&lt;/code&gt; value, even if the original value was &lt;code&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;See the difference there? I believe this to be a bug. I&amp;#8217;ve submitted a &lt;a href=&#39;https://github.com/documentcloud/backbone/pull/1227&#39;&gt;pull request&lt;/a&gt; to fix this issue, so hopefully it&amp;#8217;ll be resolved shortly. Because of this if you are doing any sort of comparisons, boolean checks, etc&amp;#8230; always do it with the &lt;code&gt;get&lt;/code&gt; function. If you are executing the value, such as printing it to the screen, always use the &lt;code&gt;escape&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Your users will be happier, and you&amp;#8217;ll sleep better, if you always use the &lt;code&gt;escape&lt;/code&gt; route!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Capturing and Uploading Photos on iOS with PhoneGap (Cordova)</title>
   <link href="http://www.metabates.com/2012/04/15/capturing-and-uploading-photos-on-ios-with-phonegap"/>
   <updated>2012-04-15T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/04/15/capturing-and-uploading-photos-on-ios-with-phonegap</id>
   <content type="html">&lt;img class=&#39;img-left&#39; src=&#39;/assets/images/2012/04/15/phonegaplogo.png&#39; style=&#39;width: 120px; height: 120px;&#39; /&gt;
&lt;p&gt;Lately I&amp;#8217;ve been doing a lot of work with &lt;a href=&#39;http://docs.phonegap.com&#39;&gt;PhoneGap&lt;/a&gt;, now known as Cordova. PhoneGap lets you write &amp;#8220;native&amp;#8221; iOS, Android, Blackberry, etc&amp;#8230; applications using standard web technologies, such as HTML, CSS, and JavaScript. They also give you a JavaScript API to access parts of the device, such as the camera, the accelerometer, the compass, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;In this article I would like to take a quick look at how to take a new picture, or use an existing library photo, and how to upload it to a webserver somewhere. This is one of the most common things to do in a mobile application, and as you&amp;#8217;re about to see, PhoneGap makes this, commonly painful task, pretty simple.&lt;/p&gt;

&lt;h3 id=&#39;the_code&#39;&gt;The Code:&lt;/h3&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;On the whole it&amp;#8217;s not all that difficult a task to accomplish. The two functions that deserve a bit of attention are &lt;code&gt;capture&lt;/code&gt; and &lt;code&gt;onCaptureSuccess&lt;/code&gt;. Those two functions are where the real heavy lifting is happening.&lt;/p&gt;

&lt;h3 id=&#39;capture&#39;&gt;capture:&lt;/h3&gt;

&lt;p&gt;Let&amp;#8217;s look at the &lt;code&gt;capture&lt;/code&gt; function first. The &lt;code&gt;navigator.camera.getPicture&lt;/code&gt; function that is provided by PhoneGap takes three arguments. The first argument is a success callback, the second argument is a failure callback, and the third argument is an object containing options. The documentation spells out most of the options you can pass in here, but since the docs don&amp;#8217;t cover all of the options, specifically the &lt;code&gt;correctOrientation&lt;/code&gt; option, let&amp;#8217;s quickly look at what each one does.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;destinationType&lt;/strong&gt;: It is &lt;em&gt;incredibly&lt;/em&gt; important that you set this options to &lt;code&gt;Camera.DestinationType.FILE_URI&lt;/code&gt;. This will make sure the &lt;code&gt;onCaptureSuccess&lt;/code&gt; gets a path to the image file, and not the image file itself. This is important because as cameras get more powerful on phones, the more memory these images will take up. If you don&amp;#8217;t set this option correctly your application will quickly throw a out of memory exception and that&amp;#8217;s it, game over.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;sourceType&lt;/strong&gt;: This option defines where the photo will be coming from. Set to &lt;code&gt;Camera.PictureSourceType.SAVEDPHOTOALBUM&lt;/code&gt; for an existing photo or &lt;code&gt;Camera.PictureSourceType.CAMERA&lt;/code&gt; to take a new picture.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;correctOrientation&lt;/strong&gt;: This last option is undocumented, but also &lt;em&gt;incredibly&lt;/em&gt; important! By default &lt;code&gt;correctOrientation&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt;, because of this the photo that is uploaded won&amp;#8217;t necessarily have the orientation that the user who took the photo intended. This is because the meta data for such things as orientation is store on the device, and not in the phone. By setting this to &lt;code&gt;true&lt;/code&gt;, the photo will be adjusted to the correct orientation when it is passed into the &lt;code&gt;onCaptureSuccess&lt;/code&gt; function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So those are the most important options that need to be set when calling &lt;code&gt;navigator.camera.getPicture&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#39;oncapturesuccess&#39;&gt;onCaptureSuccess:&lt;/h3&gt;

&lt;p&gt;When a photo is successfully captured, via the &lt;code&gt;capture&lt;/code&gt; function, the &lt;code&gt;onCaptureSuccess&lt;/code&gt; function will be called. This function will be passed a path, &lt;code&gt;imageURI&lt;/code&gt; to the photo on disk.&lt;/p&gt;

&lt;p&gt;PhoneGap has an object that is specifically designed for transfers files from the phone to a web service somewhere. This object is called, &lt;code&gt;FileTransfer&lt;/code&gt;. This object exposes a function called, &lt;code&gt;upload&lt;/code&gt;, that will send an HTTP POST to the web service and properly encode the photo (we can send file we want, for this example it&amp;#8217;s a photo) for transport.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;upload&lt;/code&gt; function takes five arguments. We can see this in action near the bottom of the &lt;code&gt;onCaptureSuccess&lt;/code&gt; function.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The first argument is the path to the file on disk, the &lt;code&gt;imageURI&lt;/code&gt; argument that the &lt;code&gt;onCaptureSuccess&lt;/code&gt; function received.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The second argument is the URL of the web service you wish to post the file to.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The third argument is a callback that will be executed when the file has been successfully uploaded to the server. This is the &lt;code&gt;success&lt;/code&gt; function we defined inside of &lt;code&gt;onCaptureSuccess&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The fourth argument is a callback that will be executed should the file fail to upload successfully to the server. This is the &lt;code&gt;fail&lt;/code&gt; function we defined inside of &lt;code&gt;onCaptureSuccess&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;The fifth argument is an object containing any extra parameters you want to send to the server. Let&amp;#8217;s talk about that a bit more.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#39;fileuploadoptions&#39;&gt;FileUploadOptions:&lt;/h3&gt;

&lt;p&gt;PhoneGap provides a &lt;code&gt;FileUploadOptions&lt;/code&gt; object that convienently sets a few helpful defaults for uploading files to a server, include the mime-type, data chunking, etc&amp;#8230; There are three of these parameters that are important to set your own values for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fileKey&lt;/strong&gt;: This will be the name of the request parameter that is sent to the server. The default value is &lt;code&gt;file&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;fileName&lt;/strong&gt;: This is the name you want the file to be called when the server recieves it. The default is &lt;code&gt;image.jpg&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;params&lt;/strong&gt;: This an object containing any additional parameters you want sent to the server. Pretty simple.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#39;the_end&#39;&gt;The End&lt;/h3&gt;

&lt;p&gt;And with all of that you have successfully uploaded a photo from and iOS device using PhoneGap. It might seem a little daunting, but actually it pretty and straightforward. Honestly, it is a lot simplier than doing it in Objective-C.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How To Write An API Without Even Trying</title>
   <link href="http://www.metabates.com/2012/04/05/how-to-write-an-api-without-even-trying"/>
   <updated>2012-04-05T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/04/05/how-to-write-an-api-without-even-trying</id>
   <content type="html">&lt;p&gt;Recently I fell upon a way of working that I think is just fantastic. So far I have no complaints about it, and neither do my clients.&lt;/p&gt;

&lt;h3 id=&#39;how_i_used_to_work&#39;&gt;How I used to work&lt;/h3&gt;

&lt;p&gt;In the past I would write my Rails applications just like everyone else did. I had all my business logic in my models and my controllers were very lightweight. Just enough to have the data I need to render the page.&lt;/p&gt;

&lt;p&gt;My views on the other hand were big. They contained all of the view logic. There were loops to print things to the screen, helpers to make things easier to do in the view layer, forms, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;Somewhere near the end of the project my client would inevitably tell me they want me to build an API for them. Of course, this usually happens with only minutes left on the clock. So quickly, and hastily, I throw together a quick API for them. Sure I test the API with my test suite, but the API has never really been &amp;#8220;tested&amp;#8221;, in a real world sense.&lt;/p&gt;

&lt;p&gt;This writing an API in a vacuum seems to be quite a common practice. Everyone knows they need an API, but people don&amp;#8217;t put much thought into it because they&amp;#8217;re too busy trying to crank out their great idea as fast as possible. This leads to less than stellar APIs, which can both hurt the business and make it difficult when the time comes to do things like build clients for mobile devices and desktops.&lt;/p&gt;

&lt;p&gt;So how can we solve this problem without putting too much extra strain on us poor developers? The answer is incredibly simple, eat your own dog food.&lt;/p&gt;

&lt;h3 id=&#39;eating_the_dog_food_and_loving_it&#39;&gt;Eating the Dog Food (and loving it!)&lt;/h3&gt;

&lt;p&gt;I, like a lot of my colleagues, have been turning to JavaScript frameworks, such as Backbone.js, to help create a richer, and more responsive, front-end user experience for the applications we write. A lot of what makes these types of frameworks so responsive is that they can make remote AJAX calls to your server to fetch, update, or destroy objects.&lt;/p&gt;

&lt;p&gt;Since I&amp;#8217;m doing all of my front-end work using Backbone, my Rails view layer has become almost not existent. I use views simply to launch my Backbone application. A typical view my look something like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;All my views are responsible for now is launching the Backbone application to serve up the appropriate views and handle all of the user interaction. My controllers are also now even smaller. They are essentially just there to serve up that basic template page.&lt;/p&gt;

&lt;p&gt;So what does all of this have to do with writing an API without trying?&lt;/p&gt;

&lt;p&gt;Well, the Backbone application needs to communicate back to the server if the user wants to update, create, or destroy a resource, so why not simply write a very nice API to do that? You were going to spend all this time writing controllers and view logic anyway, why not move those controllers to the API and that view logic to Backbone.&lt;/p&gt;

&lt;p&gt;The win is outstanding! Because you&amp;#8217;ve written a full client, your actual application, for your API you know that your API is more than capable of letting others do the same. Your API works, it&amp;#8217;s battle tested, it&amp;#8217;s proven, and it exists! The best part is it didn&amp;#8217;t take you any longer to write it either.&lt;/p&gt;

&lt;p&gt;This pays off down the line in spades. For example, I&amp;#8217;ve just finished up a project for a client and I took this exact approach. The client then asked me if I could write them a mobile application. I said sure, I created a new PhoneGap application and within a few minutes I copied in the Backbone models from my webapp I had written and was well on the way to writing a second full client for the API, and I didn&amp;#8217;t even break a sweat.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Now Blogging with Jekyll</title>
   <link href="http://www.metabates.com/2012/04/04/now-blogging-with-jekyll"/>
   <updated>2012-04-04T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2012/04/04/now-blogging-with-jekyll</id>
   <content type="html">&lt;p&gt;As you may or may not have noticed there&amp;#8217;s a new blog in town! That&amp;#8217;s right, I&amp;#8217;ve ditched the zero, WordPress, and got with the hero, &lt;a href=&#39;https://github.com/mojombo/jekyll&#39;&gt;Jekyll&lt;/a&gt;. And I have to say, it sure feels good.&lt;/p&gt;

&lt;p&gt;WordPress worked well for me for years, but I have to say that I never enjoyed the process of writing a technical blog in a browser. I hated the lack of tools that my editor has at it&amp;#8217;s disposal. It was too slow to do previews with. And all together it just always felt a bit &amp;#8220;hacky&amp;#8221;, and not in a good way.&lt;/p&gt;

&lt;p&gt;Jekyll let&amp;#8217;s me write my blog entries in my favorite local text editor. I can preview my blog, locally, which is great if you want to make a sweeping change to the whole thing. When I&amp;#8217;m done writing I can do a &lt;code&gt;git push&lt;/code&gt; and the site now has all the new content.&lt;/p&gt;

&lt;p&gt;I know that I haven&amp;#8217;t been that great over the last few months at keeping this blog up to date. Part of that was due to writing a new book, &lt;a href=&#39;http://books.markbates.com&#39;&gt;Programming in CoffeeScript&lt;/a&gt;, and the other because I just didn&amp;#8217;t like writing in WordPress. I&amp;#8217;m hoping that now that I&amp;#8217;ve got a bit more of a &amp;#8220;hacker&amp;#8221; friendly way of blogging, that I get back into the habit of blogging more often.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s to the hopes of happy blogging!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Adding Pagination to an API</title>
   <link href="http://www.metabates.com/2012/02/22/adding-pagination-to-an-api"/>
   <updated>2012-02-22T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2012/02/22/adding-pagination-to-an-api</id>
   <content type="html">&lt;img alt=&#39;&#39; src=&#39;http://www.robertsabuda.com/store/images/sharks_shark.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;popup book&#39; width=&#39;250&#39; /&gt;
&lt;p&gt;&lt;em&gt;Before I start this article, let me apologize for the lack of writing over the last six months. My only excuse is that I&amp;#8217;ve been working on a new book and that is where all my writing energy has gone. So with apologies out of the way, let&amp;#8217;s talk pagination.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dealing with pagination in any application is never easy. There are a lot of great libraries out there that help you better handle this awkward, but unavoidable part of application programming. Things get even more complicated when you are trying to define an API.&lt;/p&gt;

&lt;p&gt;APIs are fickle beasts. They have to be both clean and functional. Two things that are often at odds with one another. No sooner does clean and functional have a go at each than when trying to add pagination to an API. Pagination requires all sorts of meta-data; how many total results there are, how pages there are, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;There are two approaches to handling pagination in your API, let&amp;#8217;s look at those two approaches in this article.&lt;/p&gt;

&lt;p&gt;The first approach is the easiest one to code, but I find it to be the most intrusive and less clean approach. A typical response would look something like this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1889261.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;Here the API returns the pagination meta-data right inside of the JSON response. The advantage here is that everything is very visible to the end developer. They can easily see the details of the pagination, as well as the &lt;code&gt;widgets&lt;/code&gt; element which contains the array of data the end user was most likely looking for when they requested the API.&lt;/p&gt;

&lt;p&gt;The downside of this approach is that the pagination meta-data is right there in the body of the response. The client trying to use the API has to dig into the response to extract the data it was originally looking for, potentially ignoring the pagination meta-data, if it doesn&amp;#8217;t need it.&lt;/p&gt;

&lt;p&gt;The other way to send the pagination meta-data along with our response is in the headers of the response. This is my preferred way of handling this situation.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s look at how we can do this in a Rails application using WillPaginate. Of course if you&amp;#8217;re not using WillPaginate you can easily substitute your pagination library of choice.&lt;/p&gt;

&lt;p&gt;I start by creating a class method in &lt;code&gt;ApplicationController&lt;/code&gt; that will create an &lt;code&gt;after_filter&lt;/code&gt; that will set the pagination meta-data in the response headers:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1889206.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;Then in the controller we want to add pagination headers we can call it like such:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1889221.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;Now when someone calls the &lt;code&gt;index&lt;/code&gt; action on the &lt;code&gt;API::V1::WidgetsController&lt;/code&gt; it will respond with JSON that looks like this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1889259.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;And with response headers that look like this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1889226.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;Now the client can easily gain access to the array of widgets they originally wanted, and should they need the pagination meta-data the client can just easily pull that information right out of the headers.&lt;/p&gt;

&lt;p&gt;The API is once again nice and clean and yet it can now easily be paginated.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Using Sprockets without Rails</title>
   <link href="http://www.metabates.com/2011/08/31/using-sprockets-without-rails"/>
   <updated>2011-08-31T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/08/31/using-sprockets-without-rails</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve started working this week on an example application for the next book I&amp;#8217;m about to write and I wanted a simple way for my readers to easily run the app (it&amp;#8217;s going to be a single HTML file with a ton of cool JavaScript going on in it). My first choice for running this app was to use the popular Ruby library, &lt;a href=&#39;http://rack.rubyforge.org/&#39;&gt;Rack&lt;/a&gt;. If you are unfamiliar with Rack, please check it out. It provides a simple interface for writing web applications. By writing a simple Ruby file readers can use their favorite Rack compatible web server to launch the application. Sounds simple, eh? That&amp;#8217;s because it is.&lt;/p&gt;

&lt;p&gt;With a simple Rack application written in a few lines of code I was able to start developing my example application. That&amp;#8217;s when I realized I needed a good way to serve up all my &lt;a href=&#39;http://jashkenas.github.com/coffee-script/&#39;&gt;CoffeeScript&lt;/a&gt; and &lt;a href=&#39;http://sass-lang.com/&#39;&gt;Sass&lt;/a&gt; files. I was going to write a watchr script that did this, but I thought that was a bit heavy handed, and not very flexible, so I turned to &lt;a href=&#39;https://github.com/sstephenson/sprockets&#39;&gt;Sprockets&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sprockets recently gained a lot of attention because it is bundled in with &lt;a href=&#39;http://guides.rubyonrails.org/3_1_release_notes.html&#39;&gt;Rails 3.1&lt;/a&gt; to serve up an application&amp;#8217;s assets. It&amp;#8217;s a clever little library that will process your files using CoffeeScript, Sass, etc&amp;#8230; and let you bundle them up in to a single asset by using a manifest. That was exactly what I wanted. After I spent the better part of an afternoon doing a bit of research and debugging here is the Rack configuration file I came up with:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1184400.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;That will serve &lt;pre&gt;/assets/application.css&lt;/pre&gt; via Sprockets. The file itself will live in &lt;pre&gt;&amp;lt;pwd&amp;gt;/app/assets/stylesheets/application.scss&lt;/pre&gt; The same goes for JavaScript files.&lt;/p&gt;

&lt;p&gt;Hopefully this will save someone else a little of time when they&amp;#8217;re trying to do the same thing. Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CoffeeScript - A Rubyist&#39;s Love Affair</title>
   <link href="http://www.metabates.com/2011/08/10/coffeescript-a-rubyists-love-affair"/>
   <updated>2011-08-10T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/08/10/coffeescript-a-rubyists-love-affair</id>
   <content type="html">&lt;p&gt;Last night I had the pleasure of presenting to the &lt;a href=&#39;http://www.bostonrb.org&#39;&gt;Boston Ruby User&amp;#8217;s Group&lt;/a&gt; on CoffeeScript. My talk was geared to helping Rubyists understand, and hopefully love, CoffeeScript. Along the way I tried to debunk a few myths and preconceptions as to what CoffeeScript is and isn&amp;#8217;t. The reaction was really positive, so hopefully I did my job. Anyway, here are the slides:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.slideshare.net/markykang/coffeescript-bostonrb-892011&#39;&gt;http://www.slideshare.net/markykang/coffeescript-bostonrb-892011&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&amp;#160;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Let&#39;s say goodbye to YAML for configuration, shall we?</title>
   <link href="http://www.metabates.com/2011/06/28/lets-say-goodbye-to-yaml-for-configuration-shall-we"/>
   <updated>2011-06-28T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/06/28/lets-say-goodbye-to-yaml-for-configuration-shall-we</id>
   <content type="html">&lt;img alt=&#39;&#39; class=&#39;size-medium wp-image-489&#39; height=&#39;180&#39; src=&#39;/assets/images/2011/06/yml-300x300.png&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;yml&#39; width=&#39;180&#39; /&gt;
&lt;p&gt;I have to ask a question to my fellow Rubyists out there? Why are you still using YAML? I know why you &lt;em&gt;think&lt;/em&gt; you like YAML. You think it&amp;#8217;s a great way to write configuration files, but it&amp;#8217;s really not. You know what&amp;#8217;s a great way of writing configuration files for Ruby apps? RUBY!&lt;/p&gt;

&lt;p&gt;I know it&amp;#8217;s crazy, isn&amp;#8217;t it? But why not? Why would you not want to use Ruby for configuring your applications instead of YAML?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m the maintainer of a pretty popular configuration tool for Ruby apps, &lt;a href=&#39;http://github.com/markbates/configatron&#39;&gt;Configatron&lt;/a&gt;, so I think I have a little experience in this field. I also write and maintain a lot of libraries that require configuration and I have never thought that YAML is the best way to do this.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s look at an example of what a library developer has to do to load a YAML file to get configurations:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1051635.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;I don&amp;#8217;t know about you, but I think that&amp;#8217;s kind of lame. Most everybody runs their YAML files through ERB so that they can make their YAML files more &amp;#8216;Ruby-ish&amp;#8217;. Why not just use Ruby?? Here&amp;#8217;s the same example in Ruby:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/1051638.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;In addition to not having to deal with all the whitespace, tabs, crazy nesting, etc&amp;#8230; that YAML brings we get to use the full power of Ruby for our configurations! Try storing a Proc in YAML. Yeah, that&amp;#8217;s what I thought. You can drive configurations from the database, environment variables, crazy equations, etc&amp;#8230; the world is your oyster. All you need to do now is stop using YAML!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve decided to drop YAML support in Configatron 2.9 (coming sometime this Summer) and I encourage all other library developers to do the same. It&amp;#8217;s just not needed, or very nice for that matter. Now, if we can only get Rails to drop the database.yml file, I think we&amp;#8217;ll be all set.&lt;/p&gt;
&lt;address&gt;Ps. Make sure to check out my app [FluxTracker.com](http://www.fluxtracker.com?ref=yaml) for all your issue, project, and error tracking needs. Also check out [TweetKO.com](http://tweetko.com?ref=yaml) for backing up and bookmarking your favorite tweets.&lt;/address&gt;</content>
 </entry>
 
 <entry>
   <title>Backup and Bookmark your Tweets with TweetKO.com</title>
   <link href="http://www.metabates.com/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com"/>
   <updated>2011-06-19T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/06/19/backup-and-bookmark-your-tweets-with-tweetko-com</id>
   <content type="html">&lt;img alt=&#39;&#39; class=&#39;size-medium wp-image-469&#39; height=&#39;300&#39; src=&#39;/assets/images/2011/06/bigbird_sq-300x300.png&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;bigbird_sq&#39; width=&#39;300&#39; /&gt;
&lt;p&gt;&lt;em&gt;UPDATE: Unfortunately TweetKO is no longer available. Sorry about that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Twitter is an incredibly rich source of information. I find out about new libraries, applications, plugins, screen casts, etc&amp;#8230; But, there&amp;#8217;s a problem with is overwhelming amount of information&amp;#8230; keeping track of it all. A lot of time I read Twitter when I&amp;#8217;m on my phone. I&amp;#8217;ll see a link to an article or website, etc&amp;#8230; but I don&amp;#8217;t have time to read it then, what do I do? How do I find that tweet later? Or what about that announcement or news link for a new service or application that I saw six months ago? How do I find that again?&lt;/p&gt;

&lt;p&gt;Twitter is great but it&amp;#8217;s ability to help you find specific tweets that are important to you is almost important. That&amp;#8217;s why today I&amp;#8217;m happy to announce TweetKO.com. TweetKO solves this problem by using the built &amp;#8216;favorite&amp;#8217; functionality that Twitter offers. From &lt;em&gt;ANY&lt;/em&gt;Twitter client you can simply mark a tweet as a favorite and TweetKO will pull it in and save it for you so you can find it later.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it! It really is that simple. TweetKO is &lt;em&gt;FREE&lt;/em&gt; and easy to use. In addition to pulling in your favorite tweets you can tell TweetKO to also pull in any tweets you wrote or retweeted, effectively backing up your Twitter history. A powerful search makes finding those tweets simple and easy. Plus you can save those search queries for later use.&lt;/p&gt;

&lt;p&gt;Well, I hope you check out TweetKO.com and find it as useful as I do. Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Collect user feedback through FluxTracker.com</title>
   <link href="http://www.metabates.com/2011/06/13/collect-user-feedback-through-fluxtracker-com"/>
   <updated>2011-06-13T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/06/13/collect-user-feedback-through-fluxtracker-com</id>
   <content type="html">&lt;p&gt;About six weeks ago I announced &lt;a href=&#39;http://www.fluxtracker.com?ref=metabates2&#39;&gt;FluxTracker.com&lt;/a&gt; a unified issue, document, and error management service. The response has been amazing. People love that you can now manage all of those things in one place, without any configuration. Well, today I&amp;#8217;m happy to announce that FluxTracker has taken the next step forward to make managing all aspects of your project easier. Introducing FluxTracker &lt;a href=&#39;http://bit.ly/juVpLJ&#39;&gt;Feedback&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;FluxTracker Feedback allows you to put a little feedback widget on your site that can be used to collect information from your users, such as feature requests, support requests, and general comments. This feedback is automatically added to your FluxTracker project and from there it&amp;#8217;s up to you to decide what you want to do with it. Of course it supports FluxTracker&amp;#8217;s Issue Connect system so you can turn that customer feedback into an actionable issue with just one click?&lt;/p&gt;

&lt;p&gt;Now you&amp;#8217;re probably saying to yourself, I bet it&amp;#8217;s really difficult to implement on my site. Well, you&amp;#8217;d be wrong! It&amp;#8217;s as simple as just adding one line to your site:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.fluxtracker.com/pages/api/feedback&#39;&gt;http://www.fluxtracker.com/pages/api/feedback&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The widget can be customized too. CSS, text, and even the questions can be customized (well, depending on the plan you&amp;#8217;re on). Just check out the Feedback tab on the right side of the page to see the Feedback widget in action.&lt;/p&gt;

&lt;p&gt;Well, as you can tell I&amp;#8217;m very excited about this. I think it really makes FluxTracker the true center for managing your application, and I think  you&amp;#8217;ll find that too. Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Stop Complaining. Start Contributing!</title>
   <link href="http://www.metabates.com/2011/05/24/stop-complaining-start-contributing"/>
   <updated>2011-05-24T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/05/24/stop-complaining-start-contributing</id>
   <content type="html">&lt;img alt=&#39;&#39; height=&#39;225&#39; src=&#39;http://tanamatales.com/wp-content/uploads/2011/05/stop_complaining1.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;stop complaining&#39; width=&#39;300&#39; /&gt;
&lt;p&gt;Because I maintain several open source projects on &lt;a href=&#39;http://github.com/markbates&#39;&gt;Github&lt;/a&gt; I&amp;#8217;m constantly getting emailed questions or issues, or people are always opening up tickets with bugs, issues, complaints, etc&amp;#8230; And I really appreciate the feedback on these projects, I really do. What I would appreciate more is if instead of just opening a ticket, or sending an email, why not fork the project, fix it, and then contact me?&lt;/p&gt;

&lt;p&gt;Now, I know that sounds like a lot of work, but honestly it&amp;#8217;s really not. Github has made contributing to open source projects so trivial that everyone should be doing it. Take for example a recent ticket I got for one of my projects. The gist of ticket was that if there was a space in the project name the library would throw an error. That&amp;#8217;s a great bug! It&amp;#8217;s also an incredibly easy one to fix. If the person who opened the ticket has actually just submitted a pull request with the fix instead the fix would already have been deployed. Granted it would&amp;#8217;ve taken a bit more than the few minutes to open the ticket, but not that much more. &lt;strong&gt;UPDATE: He actually did fork the project and is trying to fix it! Awesome!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So why should you do this? Why should you take the time to fix your own issues instead of having the library owner/maintainer do it? Well, the reasons are plentiful, but here are a few of my favorites:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can have it now! That&amp;#8217;s right, if you fork the project and fix the bug or add that new feature you can start using today! Even before the project owner has a chance to merge in the pull request. That&amp;#8217;s a total win right there!&lt;/li&gt;

&lt;li&gt;Quicker to be released to the general public. Maintainers of open source projects are busy people and, usually, don&amp;#8217;t spend all day working on their open source libraries. If someone submits a good patch or feature then it&amp;#8217;s easier for them to pull it in and get it out as a proper release sooner.&lt;/li&gt;

&lt;li&gt;It feels good! It feels really good to contribute back to a project that you use often. After awhile you might even get commit rights to the project and won&amp;#8217;t have to maintain a fork. That feels really good!&lt;/li&gt;

&lt;li&gt;Build a name for yourself. That&amp;#8217;s one of the ways you land better jobs or contracts. People start seeing your name floating around commit messages. You get to know the people maintaining the projects, they like your work, then when they&amp;#8217;re looking to fill a position, guess who they think of?&lt;/li&gt;

&lt;li&gt;It makes you a better developer. By contributing to different projects you learn different techniques. You get to understand the code of the library you&amp;#8217;re using and learn little tricks that you might not have known about otherwise.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those are just a few of the reasons why giving back to the open source community is great. So the question I&amp;#8217;m going to leave you with now is are you going to be a player or a hater? Someone who just complains all day, or someone who helps to make the world a better place? I&amp;#8217;m hoping you become the latter.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Project, Issue, and Error Tracking United!</title>
   <link href="http://www.metabates.com/2011/04/25/project-issue-and-error-tracking-united"/>
   <updated>2011-04-25T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/04/25/project-issue-and-error-tracking-united</id>
   <content type="html">&lt;img alt=&#39;&#39; class=&#39;size-medium wp-image-437&#39; height=&#39;225&#39; src=&#39;/assets/images/2011/04/issue_list_big-300x225.png&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;issue_list_big&#39; width=&#39;300&#39; /&gt;
&lt;p&gt;&lt;em&gt;UPDATE: Unfortunately FluxTracker is no longer available. Sorry about that.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For the last few years every project or company I&amp;#8217;ve worked for has started the same way, by setting up Basecamp, Lighthouse and Hoptoad (or similar ones anyway). Why? Basecamp  - so we could share documents and todos. Lighthouse - so we could track our issues and bugs. Hoptoad - so we could track the errors our application was generating.&lt;/p&gt;

&lt;p&gt;These are all very good applications and have served myself and my clients well, but they&amp;#8217;ve suffered from several very big flaws. The first big flaw was the cost. You can easily drop $100 or more a month across these different services. But that wasn&amp;#8217;t the biggest flaw or problem I&amp;#8217;ve had with these services. The biggest problem was lack of integration.&lt;/p&gt;

&lt;p&gt;So what do I mean by lack of integration? Well, when an error comes in I want to easily be able to create a new issue from it. When the issue gets resolved, so should the error. If the error reoccurs it should re-open automatically, and so should the issue. I want to be able to create an issue right from a document or be able to attach issues to a document. I should be able to follow the flow from document to issue to error and back again very easily. Unfortunately, these applications don&amp;#8217;t give you that level of integration. They offer some level, but just not enough.&lt;/p&gt;

&lt;p&gt;Well, my friends, welcome to the future. Welcome to FluxTracker.com. FluxTracker combines a great issue tracker, a project management system, and an error tracker all in one application. Now you can full integration without any configuration, oh, and you can do it at a fraction of the cost!&lt;/p&gt;

&lt;p&gt;We know it isn&amp;#8217;t easy to switch to a different application, that&amp;#8217;s why we&amp;#8217;ve made it easy for you. You can easily import your Lighthouse account. FluxTracker also allows you to easily use the Hoptoad Notifier plugin for your project by just setting a few configuration parameters.&lt;/p&gt;

&lt;p&gt;So know you know, you&amp;#8217;re life can be easier. And you now know how easy it is to get started! So what are you waiting for? Go and sign up for our Free plan and start living the dream.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Because everybody has an opinion...</title>
   <link href="http://www.metabates.com/2011/04/15/because-everybody-has-an-opinion"/>
   <updated>2011-04-15T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2011/04/15/because-everybody-has-an-opinion</id>
   <content type="html">&lt;p&gt;In case you&amp;#8217;ve been living in a cave this week you&amp;#8217;ve probably heard that &lt;a href=&#39;http://www.rubyinside.com/rails-3-1-adopts-coffeescript-jquery-sass-and-controversy-4669.html&#39;&gt;Ruby on Rails&lt;/a&gt; is going to be including both the &lt;a href=&#39;http://coffeescript.org/&#39;&gt;CoffeeScript&lt;/a&gt; and &lt;a href=&#39;http://sass-lang.com/&#39;&gt;SASS&lt;/a&gt; libraries, it will also make &lt;a href=&#39;http://jquery.com/&#39;&gt;jQuery&lt;/a&gt; the default JavaScript framework, replacing the &lt;a href=&#39;http://www.prototypejs.org/&#39;&gt;Prototype&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;I would like to start by addressing my experiences with CoffeeScript. My opinion of it is of ambivalence. I&amp;#8217;ve used it on a project, I&amp;#8217;ve played with and in the end I&amp;#8217;ve come out with the opinion of &amp;#8220;it&amp;#8217;s ok&amp;#8221;. It didn&amp;#8217;t blow me away, but at the same time I can see why so many people like. It offers some really cool features that I really wish JavaScript had and you can cut down on the amount of code you have to write. On the other hand the apps I tend to write don&amp;#8217;t tend to be that JavaScript heavy that I really needed to reach out for something like CoffeeScript.&lt;/p&gt;
&lt;img alt=&#39;&#39; height=&#39;246&#39; src=&#39;http://blogs.worldbank.org/files/publicsphere/public%20opinion_JGRNLY.jpeg&#39; style=&#39;float: left; padding-right: 10px&#39; width=&#39;326&#39; /&gt;
&lt;p&gt;So, how do I feel about CoffeeScript being included with Rails? Well, I&amp;#8217;ll get to that. Let&amp;#8217;s go over some of the most common arguments I&amp;#8217;ve heard from people this week about why they&amp;#8217;re anti-CoffeeScript in Rails.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;It&amp;#8217;s an abstraction layer of JavaScript! JavaScript isn&amp;#8217;t that bad, why can&amp;#8217;t you just write JavaScript?&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;It&amp;#8217;s going to be a hinderance to newbies. It&amp;#8217;ll be too much of a learning curve!&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let&amp;#8217;s start with that second point first, shall we? I agree, it does represent a new element that needs to be learned when coming to Rails. But here&amp;#8217;s the pretty nifty thing about how it&amp;#8217;s all implemented in Rails. In order to actually use CoffeeScript in Rails you have to create your files named foo.js.coffee if, however, you just name your file foo.js then, guess what? You will have to write plain old JavaScript! Seems like newbies, and those who don&amp;#8217;t like CoffeeScript, can just keep writing plain old JavaScript without anything stopping them at all.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#8217;s talk about the abstraction layer argument. Yes, CoffeeScript is an abstraction on top of JavaScript, but let&amp;#8217;s take a look at a few other parts of the Rails stack and see how they hold up against this argument.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s a fairly common Rails stack:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ActiveRecord&lt;/li&gt;

&lt;li&gt;Haml&lt;/li&gt;

&lt;li&gt;jQuery&lt;/li&gt;

&lt;li&gt;RSpec&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What do all those things have in common? Well, they&amp;#8217;re all abstraction layers that sit on top of something else, don&amp;#8217;t they? Let&amp;#8217;s look at that list again?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ActiveRecord - SQL (Structured Query Language)&lt;/li&gt;

&lt;li&gt;Haml - HTML&lt;/li&gt;

&lt;li&gt;jQuery - JavaScript, you could just as easily hand roll those AJAX calls in pure JavaScript.&lt;/li&gt;

&lt;li&gt;RSpec - Test/Unit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What I&amp;#8217;ve found funny about the particular argument is that I&amp;#8217;ve heard it MOST from those who use things like HAML, which is a DEFINITELY an abstraction layer that sits on top of HTML. See where I&amp;#8217;m going with this one? Good, I don&amp;#8217;t want to belabor the point. :)&lt;/p&gt;

&lt;p&gt;So, finally, where do I stand on this whole thing? Well, I view like it Test/Unit and Prototype. Those are both the current standard (although jQuery will replace Prototype in 3.1) and I don&amp;#8217;t like or use either of them. Instead I configure Rails to use jQuery and RSpec. I don&amp;#8217;t like Haml, but those that do simply replace ERB with Haml and they move on with their day. So my take is this, it&amp;#8217;s there, it&amp;#8217;s included. Use it if you like, or don&amp;#8217;t. Is it really that big a deal? No, it really isn&amp;#8217;t. If Rails dropped ERB and went with Haml as the default, would I bitch and moan, probably a bit, but then I&amp;#8217;d just install the Rails-ERB gem and move on with my day, just like I do with jQuery and RSpec today.&lt;/p&gt;

&lt;p&gt;So sit back, relax, use the libraries that you want to use, Rails let&amp;#8217;s you do that. Oh, while you&amp;#8217;re relaxing why not try out CoffeeScript, who knows, you might just enjoy it. Or not.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Testing Tools Aren&#39;t All the Same, Choose Wisely</title>
   <link href="http://www.metabates.com/2011/03/04/407-testing-tools-arent-all-the-same-choose-wisely"/>
   <updated>2011-03-04T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2011/03/04/407-testing-tools-arent-all-the-same-choose-wisely</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Testing is painful.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Testing is hard.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Testing is complicated.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8220;Testing is not fun.&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I hear those sorts of things all the time when I talk to people about testing. I agree that sometimes testing can be all of those things, but if you choose the right tools, the tools that best suite you, testing doesn&amp;#8217;t have to be. Let me give you an example of what I&amp;#8217;m talking about, how choosing the right tools can make a huge impact on how you feel about testing.&lt;/p&gt;

&lt;p&gt;When working for a client recently I came across the need for end to end integration testing. I needed to test, amongst other things, the flow of a user registering through the application in a few different ways. Because registration behaves differently based on where you come from and where you want to go, I needed a good way to test that entire flow, so simple unit and functional tests just were not going to cut it.&lt;/p&gt;

&lt;p&gt;In the Ruby community there is a big push to use a testing framework called, &lt;a href=&#39;http://cukes.info/&#39;&gt;Cucumber&lt;/a&gt;. Cucumber is a behavior driven development (BDD) tool that let&amp;#8217;s you write user stories in plain English. Those stories then get translated into Ruby code that tests those stories against your application. Because of it&amp;#8217;s popularity, and some of it&amp;#8217;s quite amazing features, this was my first stop on the path to integration testing bliss.&lt;/p&gt;

&lt;p&gt;Let me give you an example of a Cucumber script:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/854764.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;That script tests the user registration flow through an application in a couple of different ways, first through &amp;#8216;standard&amp;#8217; registration, and then through being invited to join. Now, the beauty of Cucumber is that these scripts are &amp;#8216;human&amp;#8217; readable. Your product manager, or other stake holders, should be able to write these scripts themselves, and you, the developer, should be able to just plug them in and code until those scripts pass.&lt;/p&gt;

&lt;p&gt;Unfortunately, while that sounds like a little slice of Heaven, the reality is far from it in practice. First, getting stake holders to actually write these &amp;#8216;stories&amp;#8217;, as their typically called, is a tough chore to begin with. If they do write them, they&amp;#8217;re typically not going to be &amp;#8216;plug and play&amp;#8217;. Why? Well, when Cucumber reads these scripts it goes line by line and tries to find some code that matches the regular expression of that line and then execute it. If it doesn&amp;#8217;t find matching code, then it fails. That means that your stake holders need to write these scripts in a very particular way or developers need to sit down and massage those stories to fit the correct regular expression.&lt;/p&gt;

&lt;p&gt;Now, let me just take this opportunity to say that this is not a post about how much I hate Cucumber, in fact I think Cucumber is a pretty amazing piece of software, and does in fact have a lot of great uses. Instead, what I&amp;#8217;m talking about it is how Cucumber turned out not to be the right tool for the job for me on a recent project.&lt;/p&gt;

&lt;p&gt;So why wasn&amp;#8217;t Cucumber the right tool for the job? Great question, glad you asked. Cucumber turned out not to be the right tool for a few reasons. The biggest of which was that I was the one who was writing the user stories. The stake holders had no desire to write these stories, which meant I had to write them. The I had to write the &amp;#8216;steps&amp;#8217; that back each line of the script. In all fairness, Cucumber does give you some great steps right out of the box. After some fiddling I finally got the Cucumber scripts up and running and testing my work flow. But I definitely ran into some issues.&lt;/p&gt;

&lt;p&gt;Because Cucumber isn&amp;#8217;t pure Ruby I had a hard time doing something as simple as just printing out the request&amp;#8217;s body and headers without having to write a step that did just that, then add that step to my story, etc&amp;#8230; It&amp;#8217;s overall fiddlyness and non-intuitive way of doing things caused me a lot of grief and time. And, most importantly, I wasn&amp;#8217;t really getting the big benefit of Cucumber, stake holder&amp;#8217;s writing the stories. So I was doing all this work and not getting the benefits of Cucumber.&lt;/p&gt;

&lt;p&gt;So what did I do? I turned to a library called &lt;a href=&#39;https://github.com/cavalle/steak&#39;&gt;Steak&lt;/a&gt;. Steak allows you to write integration tests using pure Ruby and integrates directly in with &lt;a href=&#39;http://relishapp.com/rspec&#39;&gt;RSpec&lt;/a&gt;, my preferred testing framework. With Steak I was able to write my integration tests in just a few minutes.&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/854844.js&#39;&gt; &lt;/script&gt;
&lt;p&gt;While my Steak scripts a bit more wordy and are definitely not &amp;#8216;human&amp;#8217; readable and editable by stakeholders, they did achieve my goal of allowing me to write integration tests quickly.&lt;/p&gt;

&lt;p&gt;So here you see I picked a very powerful tool, that has a lot of great benefits, Cucumber, but I picked it for the wrong reasons. I picked it because it was popular, and not because it would help me achieve my goals. If my goals where to have stakeholders write the stories and hand them off to development, than it would&amp;#8217;ve been a better choice. But in the end my goal was to write integration tests and write them quickly, which is why Steak ended up being the right tool for that job.&lt;/p&gt;

&lt;p&gt;This has all been a really long winded way of saying doing some research before choosing your testing frameworks, or any framework for that matter. Play with it, research it, make sure it meets your goals, not somebody else&amp;#8217;s. If you choose the right tools then testing doesn&amp;#8217;t need to be scary, complicated, frustrating, etc&amp;#8230; Testing is a &lt;a href=&#39;/2010/07/01/testing-is-not-an-option/&#39;&gt;requirement&lt;/a&gt; and a must have, so why not make it fun?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Building Interfaces and Abstract Classes in Ruby</title>
   <link href="http://www.metabates.com/2011/02/07/building-interfaces-and-abstract-classes-in-ruby"/>
   <updated>2011-02-07T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2011/02/07/building-interfaces-and-abstract-classes-in-ruby</id>
   <content type="html">&lt;p&gt;So back in the dark ages of my career, pre-2006, I spent a long time coding Java. Yeah, I know, please don&amp;#8217;t judge. Anyway, In Java, for those of you who are unaware were two constructs that I occasionally wish I had in Ruby, those are &lt;a href=&#39;http://download.oracle.com/javase/tutorial/java/concepts/interface.html&#39;&gt;Interfaces&lt;/a&gt; and &lt;a href=&#39;http://download.oracle.com/javase/tutorial/java/IandI/abstract.html&#39;&gt;Abstract Classes&lt;/a&gt;. The difference between these two constructs is subtle, but important.&lt;/p&gt;

&lt;p&gt;In Java an Interface is a basically a blueprint of methods that the class who implements the Interface needs to implement. For example:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Here we have a &lt;code&gt;Bicycle&lt;/code&gt; Interface that says there are three methods that need to be implemented. It is then the responsibility of the &lt;code&gt;ACMEBicycle&lt;/code&gt; class to implement those methods. Now, an Abstract Class in Java is similar to an Interface in that it too is a blueprint of methods that the extending class may or may not need to implement. There in lies one of the differences between the two. Let&amp;#8217;s take a look at the same example, but this time we want to implement the same behavior of all of our extending classes for the &lt;code&gt;applyBrakes&lt;/code&gt; method:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;An Abstract Class is a great way to provide a mix of fully implemented methods as well as providing subclasses with a mixture of methods that need to be implemented by the extending class.&lt;/p&gt;

&lt;p&gt;The really powerful part of all of this is two fold. First, the Java compiler will happily yell at you and fail if it finds that you haven&amp;#8217;t implemented some of the methods that you were told you had to. Second, you can easily see the methods that you need to document right there, you can even copy/paste their definitions right into your class so you can start to fill them out.&lt;/p&gt;

&lt;p&gt;So, how does this bring us over to Ruby? Great question. I&amp;#8217;d like to take a few moments and explore a few ways we can get some of this power in Ruby.&lt;/p&gt;

&lt;p&gt;Unfortunately, or fortunately depending on how you look at it (I see it as a mixed blessing), there is no compiler in Ruby, so we don&amp;#8217;t really have a good way of having the system yell at us if we don&amp;#8217;t implement the methods we were supposed to. But, there is still plenty we can do to help those who are implementing our classes both know what they need to implement and to find out what they haven&amp;#8217;t implemented when their program is executing.&lt;/p&gt;

&lt;p&gt;Here is one implementation on we can gain a bit of that functionality back in Ruby:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;What we&amp;#8217;ve done here is to inject a Module into our &lt;code&gt;Bicycle&lt;/code&gt; class to give it a nice error it can raise and a little bit of help building a nice error message for the user. Then in our &lt;code&gt;Bicycle&lt;/code&gt; class we define all the methods we want and in the ones we need the end user to define we can call the &lt;code&gt;api_not_implemented&lt;/code&gt; method and it will raise the &lt;code&gt;AbstractInterface::InterfaceNotImplementedError&lt;/code&gt; error for us.&lt;/p&gt;

&lt;p&gt;We could simplify this a bit by having a nice little helper macro that we can use to build these methods, like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;That approach certainly makes our code look a bit cleaner, I&amp;#8217;m not denying that, however it has one really big flaw, at least for me anyway, it doesn&amp;#8217;t give us a good to place to hang our documentation hat. In the previous approach we had actual methods that we could then document and that documentation would then show up in RDoc when it&amp;#8217;s outputted. With the latter approach, however, we can document the hell out of the &lt;code&gt;needs_implementation&lt;/code&gt; calls we have in the &lt;code&gt;Bicycle&lt;/code&gt; class, but they won&amp;#8217;t ever show up in the documentation. That means that users of our library have to crack open the actual code itself to see what it they are expected to implement.&lt;/p&gt;

&lt;p&gt;Another approach we could&amp;#8217;ve taken, which I bother to demonstrate here as I don&amp;#8217;t think it offers a better approach is to have the &lt;code&gt;needs_implementation&lt;/code&gt; method collect up the names of those methods and use &lt;code&gt;method_missing&lt;/code&gt; to report that the method needs to be implemented. I mention it here only for completeness, but it definitely is not the best solution to this problem.&lt;/p&gt;

&lt;p&gt;Finally, I would like to note that, as far as I can see, there is no way in Ruby to create a callback hook for when a class has been defined. If there was in fact such a hook we could use to it immediately notify the end user that they have forgotten to implement certain methods. Perhaps in Ruby 2.0??? That&amp;#8217;s just pure hope on my part.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it. I hope you enjoyed our brief (&lt;em&gt;cough&lt;/em&gt;) look through implementing Interface and Abstract Classes in Ruby. I hope you&amp;#8217;ve enjoyed it.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PS, yes, I&amp;#8217;m aware I didn&amp;#8217;t talk about multiple vs. single inheritance in either Java or Ruby, nor did I talk about the fact that in Ruby you can&amp;#8217;t really have Abstract Classes. I thought that was all a bit much for an already rather lengthy post as it was. Perhaps another day. :)&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Becoming an &#39;Expert&#39; Developer</title>
   <link href="http://www.metabates.com/2010/11/17/becoming-an-expert-developer"/>
   <updated>2010-11-17T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2010/11/17/becoming-an-expert-developer</id>
   <content type="html">&lt;p&gt;Last week I received an email from someone who used to work at a company that I used to work with. I didn&amp;#8217;t know him, but he knew me through my work at the company, and my other exploits. He sent me an email to say that after a short time with the company he had been laid off, along with half of the development team. He wasn&amp;#8217;t looking for pity, but rather advice.&lt;/p&gt;

&lt;p&gt;What kind of advice was he asking for, well, he quite simply needed to know how could he become an &amp;#8216;expert&amp;#8217; Ruby on Rails developer. First, let me say that this post won&amp;#8217;t have anything to do with Ruby, Rails, or any other specific programming language. Everything I&amp;#8217;ll talk about is valid in ANY language on ANY platform. With that disclaimer, let&amp;#8217;s move on, shall we?&lt;/p&gt;
&lt;img alt=&#39;&#39; src=&#39;http://herd.typepad.com/.a/6a00d83451e1dc69e2010536ad3deb970b-800wi&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;Monkey&#39; width=&#39;250&#39; /&gt;
&lt;p&gt;While at this company he got introduced to Ruby on Rails and really loved it, coming from a non-Rails background. Since being laid off he&amp;#8217;s been trying to land another Rails gig, but everyone is looking for &amp;#8216;expert&amp;#8217; Rails developers. So the question was, how to become an &amp;#8216;expert&amp;#8217; developer?&lt;/p&gt;

&lt;p&gt;I keep putting &amp;#8216;expert&amp;#8217; in quotes because, let&amp;#8217;s be honest here, that&amp;#8217;s a VERY subjective term. As someone who has hired many developers in his day, I can tell you that I&amp;#8217;v&lt;/p&gt;

&lt;p&gt;e hired newbies to &amp;#8216;experts&amp;#8217; and everywhere in between. Everyone has their merits and possibilities. I&amp;#8217;ve met &amp;#8216;experts&amp;#8217; that I wouldn&amp;#8217;t hire to take out my trash, let alone build my business. I&amp;#8217;ve also met people right out of college that I would hire again and again. So your mileage my vary.&lt;/p&gt;

&lt;p&gt;So&amp;#8230; how do you build up that &amp;#8216;expert&amp;#8217; reputation? Let&amp;#8217;s look at it. Below are some of things I&amp;#8217;ve done, as well as some of the things that I look for as a hiring manager. Some are incredibly easy to do, others require work, but in the end they WILL pay off, and you&amp;#8217;ll easily be at the head of the pack when going for that job. &lt;h3&gt;Build Something&lt;/h3&gt; When you are looking for a job people want to see what it is you&amp;#8217;ve actually built. If you haven&amp;#8217;t built anything, then how are you an expert? Build a lot of different things and put them up on the web for perspective employers to find and play around with. Use these are a playground for trying out all those cool new technologies you keep hearing about. Want to give NoSQL a try? Great, build an app that uses it. Need to improve your testing chops? Write an application and write all the tests you can possibly think of! &lt;h3&gt;Get a GitHub Account&lt;/h3&gt; I can&amp;#8217;t tell you how important GitHub has become when trying to make a name for yourself. It seems like unless you&amp;#8217;re on GitHub, you&amp;#8217;re nobody. While that might not be true, it certainly hurts more than it helps to not have an account. You know those apps you&amp;#8217;ve just been building and playing around with? Post them on GitHub! Then put your profile page link on your resume. Yep, you read that right. Give those looking at your resume a link to your code. Let them see how good a developer you actually are. Show them you know how to code all the things you&amp;#8217;ve got on your resume. Listing a language, platform, or tool on resume is one thing, but actually showing your perspective employer is another! They&amp;#8217;ll love it.&lt;/p&gt;

&lt;p&gt;While you&amp;#8217;re on GitHub, why not contribute to an open source project that&amp;#8217;s up there. There are plenty of them, and they&amp;#8217;re ALL looking for people to help out with their projects. Simply fork the projects, make some improvements, and then give those changes back to the projects owner. This looks great on a resume and really helps to show that you are interested and active in the community. Again, employers love this! Plus, you&amp;#8217;ll be starting to build a name for yourself, and building a network, and a network is INCREDIBLY important when looking for work. &lt;h3&gt;Blog and Write&lt;/h3&gt; I should probably heed my own advice here and blog more often, but do as I say, not as I do. :) With that said I wrote a book, which looks AMAZING on a resume, but might be a bit out of reach for most people, so I recommend blogging instead. Why should you blog? Well, it shows that you have good communications skills, again very important to most employers. It can also show that you have a deep understanding of whatever it is you blog about.&lt;/p&gt;

&lt;p&gt;What should you write about? If you&amp;#8217;re stuck on a topic, might I make a recommendation or two. First, when you&amp;#8217;re building those applications I mentioned early if you run into a bug or something else that got you a bit stuck, blog about it! Others could really benefit from your experience. Explain the problem and how you went about solving it. Another great thing to write about is your favorite libraries or plugins. Pick a different one each week and dissect it. Write about how it works, what it does, etc&amp;#8230; This is a great exercise in both writing and learning about how things work. Very valuable. &lt;h3&gt;Network&lt;/h3&gt; I mentioned earlier that a good network is INCREDIBLY important when looking for work, and I wasn&amp;#8217;t lying. It&amp;#8217;s the most important thing. A good network will constantly be feeding you new opportunities, or putting you in touch with those who can. So how do you develop that network? A few ways, I mentioned contributing to open source earlier, that&amp;#8217;s a great way. Another great way is through conferences, hackfests, rumbles, and whatever other local (and non-local) events are being held in your development community of choice. Attend these events, participate, introduce yourself, speak, buy drinks, whatever! Just get out there and NETWORK!! &lt;h3&gt;Conclusion&lt;/h3&gt; The gentleman who emailed me said that he was reading a lot of books in hopes of becoming an &amp;#8216;expert&amp;#8217;. While I&amp;#8217;m not going to tell you not to read books (you should!!), I will tell you that there is no substitute for doing. All of things I&amp;#8217;ve talked about above are ALL about doing. Reading is not doing, it&amp;#8217;s reading. It&amp;#8217;s passive and will not get you further in your career. There&amp;#8217;s no place on a resume for the books you&amp;#8217;ve read. Take what you&amp;#8217;ve read and put it into action, then you&amp;#8217;ll be on your way to becoming an &amp;#8216;expert&amp;#8217; developer.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to Become a Test-driven Developer</title>
   <link href="http://www.metabates.com/2010/10/12/how-to-become-a-test-driven-developer"/>
   <updated>2010-10-12T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/10/12/how-to-become-a-test-driven-developer</id>
   <content type="html">&lt;p&gt;In a previous post, &lt;a href=&#39;http://www.metabates.com/2010/07/01/testing-is-not-an-option/&#39;&gt;Testing Is Not An Option&lt;/a&gt;, I talked a lot about why you should write tests, and the arguments you can put forth to your client, manager, or whoever it may be as to why you should write tests. What I didn&amp;#8217;t talk about was how to start writing tests. So let&amp;#8217;s talk about that for a bit, shall we?&lt;/p&gt;

&lt;p&gt;When I&amp;#8217;m talking with a potential client, well at least a client that has an existing code base, I always ask what their code coverage stats are. Now, I know at code coverage stats aren&amp;#8217;t the be all end all of measuring how good your tests are, but they&amp;#8217;re a basic enough metric to use as a guide. If they say they&amp;#8217;re high, then I usually dig in more about how they&amp;#8217;re testing; what frameworks, BDD, TDD, that sort of thing. Usually though I get a few minutes where they apologize and sheepishly give me their reasons for having little or no tests.&lt;/p&gt;

&lt;p&gt;Here are few of those reasons: &lt;ul&gt;
	&lt;li&gt;We don&#39;t/didn&#39;t have the time.&lt;/li&gt;
	&lt;li&gt;We don&#39;t know how.&lt;/li&gt;
	&lt;li&gt;It was/is too complicated.&lt;/li&gt;
	&lt;li&gt;It was/is too overwhelming.&lt;/li&gt;
&lt;/ul&gt; Let&amp;#8217;s talk about each of this points for a minute. &lt;h3&gt;&quot;We don&#39;t/didn&#39;t have the time.&quot;&lt;/h3&gt; &lt;h3&gt;&lt;span style=&#39;font-weight: normal; font-size: 13px;&#39;&gt;I never accept time as an argument against testing. Testing ends up repaying it&#39;s time investment, and will ultimately give you more time than if you didn&#39;t write code. It&#39;s a win-win. Again see my previous post in how to get the time signed off on as part of t he project timeline.&lt;/span&gt;&lt;/h3&gt; &lt;h3&gt;&quot;We don&#39;t know how.&quot;&lt;/h3&gt; Learn. There&amp;#8217;s no better time than the present and no better way to learn than being thrown into the deep end. The web is crawling with documentation, screen casts, how to articles and tutorials, and there are plenty of books to get you going. In short the k knowledge is literally at your finger tips, and to be honest it&amp;#8217;s easier than you think. &lt;h3&gt;&quot;It was/is too complicated.&quot;&lt;/h3&gt; That usually means you&amp;#8217;re doing it wrong. Take a step back and assess what it is you&amp;#8217;re trying to do. You&amp;#8217;re tests should be simple and concise. Don&amp;#8217;t write tests that are hundreds of lines long. They&amp;#8217;re tests, not entrance exams to MIT. &lt;h3&gt;&quot;It was/is too overwhelming.&quot;&lt;/h3&gt; Certainly if you didn&amp;#8217;t write tests as you went along it can get quite overwhelming thinking about all the tests you now need to write for your monolithic app. I&amp;#8217;ll talk about how you can solve that problem in a minute. &lt;h2&gt;Making It Happen&lt;/h2&gt; Ok, so now that we&amp;#8217;ve identified a few of the excuses let&amp;#8217;s talk about how you can starting writing tests today for your application. So, take a deep breath and let&amp;#8217;s begin.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re staring at an existing application, don&amp;#8217;t try to tackle it all at once, you&amp;#8217;ll just get overwhelmed, scared, and confused. Instead take it one file/class at a time. First start with your models, as this is where the majority of your application business logic should be. Alphabetically each day pick the next class (or a couple of them) in the list and start to fill our your test files.&lt;/p&gt;

&lt;p&gt;What do I mean by fill out your tests files, I mean creating pending tests for each of the methods of your model. Here&amp;#8217;s an example of a basic Ruby* class and what the pending RSpec spec file would look like:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Notice how the method that has the if/else statement in it has two pending tests for it. We need to test each variation of the method.&lt;/p&gt;

&lt;p&gt;Now when you run your tests you&amp;#8217;ll see that you have a bunch of pending tests. Great! Now you just need to fill them in, but at least you know what should be filled in.&lt;/p&gt;

&lt;p&gt;I also recommend that you do this every time you create a new method. As soon as you give your method a name go to your corresponding test and create a pending test for that method. This way you know that you have to test that method later. (In a perfect world I would love to see you write your test before returning to your class to fill in the method itself, but baby steps for now.)&lt;/p&gt;

&lt;p&gt;Once you have all your pending tests setup each day try to fill in the details of each pending test for a whole class. If that&amp;#8217;s too much, then try to set aside an hour a day and fill in as many pending tests as you can. Alternatively you can also fill in the tests during the course of the day as you use one of the methods without tests.&lt;/p&gt;

&lt;p&gt;Another great way to start filling in your test suite is each time you get a new bug, write a test to reproduce it. This is a great habit to get into as you&amp;#8217;ll eventually have a great suite of regression tests in place to help prevent those nasty bugs from returning. Write the test, see that it fails, then fix your bug. When your teat passes then you know you&amp;#8217;ve fixed the bug!&lt;/p&gt;

&lt;p&gt;Finally, start small. Start by writing unit tests. These are the types of tests I just described. They test a very particular part of your code base to ensure that it does what it should do. These tests are typically easy to write and act as a great corner stone to your test suite as a whole. Don&amp;#8217;t try to jump right in with full integration tests. The frameworks typically have a steep learning curve, and are more complicated to get up and running. This will lead to frustration and the old feeling of being overwhelmed. You can add these tests in later as you gain experience.&lt;/p&gt;

&lt;p&gt;Well, there you have it, a few simple tricks to help you get started testing today. I know this post was a bit on the lengthy side, but I&amp;#8217;m glad you stuck with me. Your life will be better for it. When you have a large and expansive test suite life is just better. Food tastes better. The sky is bluer. There will be a skip in your step. And you can use your incredibly high code coverage stats as a pick up line in a bar. On second thought, scratch that last thought. I wrote a test to see if that would work and it failed. It failed miserably. &lt;h6&gt;* Please not that while I use Ruby as the example language here, the concept applies to whatever language you use.&lt;/h6&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CoverMe – Code Coverage for Ruby 1.9 Reaches RC1</title>
   <link href="http://www.metabates.com/2010/09/30/coverme-%25e2%2580%2593-code-coverage-for-ruby-1-9-reaches-rc1"/>
   <updated>2010-09-30T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/09/30/coverme-%e2%80%93-code-coverage-for-ruby-1-9-reaches-rc1</id>
   <content type="html">&lt;p&gt;In &lt;a href=&#39;http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9/&#39;&gt;August&lt;/a&gt; I announced &lt;a href=&#39;http://github.com/markbates/cover_me&#39;&gt;CoverMe&lt;/a&gt; a code coverage tool for Ruby 1.9. Well, today I announce that it has hit it&amp;#8217;s first release candidate! I&amp;#8217;ve very excited by the fact it&amp;#8217;s getting close to an &amp;#8216;official&amp;#8217; release.&lt;/p&gt;

&lt;p&gt;The response to CoverMe has been great and through feedback from the community I&amp;#8217;ve made a lot of improvements and fixed a lot of issues.&lt;/p&gt;

&lt;p&gt;While quite a few things have changed under the hood, not much has changed in how you use CoverMe. &lt;h2&gt;Installation&lt;/h2&gt; The following are instructions for how you would configure CoverMe for a Rails 3 project, adjust to your local environment accordingly.&lt;/p&gt;

&lt;p&gt;In  your Gemfile add the following: &lt;pre&gt;gem &#39;cover_me&#39;, &#39;&amp;gt;= 1.0.0.rc1&#39;, :group =&amp;gt; :test&lt;/pre&gt; Then run: &lt;pre&gt;$ bundle install&lt;/pre&gt; After CoverMe is installed place the following line at the &lt;strong&gt;_VERY TOP_&lt;/strong&gt; of your &amp;#8216;test_helper.rb&amp;#8217; or &amp;#8216;spec_helper.rb&amp;#8217; file (for Cucumber put it at the top of the &amp;#8216;env.rb&amp;#8217; file): &lt;pre&gt;require &#39;cover_me&#39;&lt;/pre&gt; I can&amp;#8217;t emphasize enough how important it is that the require statement is at the &lt;strong&gt;_VERY_&lt;/strong&gt; top of that file!&lt;/p&gt;

&lt;p&gt;Finally (and optionally) run: &lt;pre&gt;$ rails g cover_me:install&lt;/pre&gt; This will simply install a Rake task that will wrap both Test::Unit and RSpec tasks with CoverMe and will launch the results at the end of the test suites. I would recommend it. It&amp;#8217;s kinda the whole point. :) &lt;h2&gt;That&#39;s it!&lt;/h2&gt; Enjoy the release candidate, and of course, please let me know if you find any issues with it. Issues can be reported on &lt;a href=&#39;http://github.com/markbates/cover_me/issues&#39;&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Fixtures v. Factories - Can&#39;t We All Just Get Along?</title>
   <link href="http://www.metabates.com/2010/08/15/fixtures-v-factories-cant-we-all-just-get-along"/>
   <updated>2010-08-15T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/08/15/fixtures-v-factories-cant-we-all-just-get-along</id>
   <content type="html">&lt;p&gt;Testing in Ruby on Rails is incredibly easy. I mean stupidly easily. So easy that if you&amp;#8217;re not doing it, you are a very, very bad developer and should re-evaluate your career choices. (Yes, I believe in testing that much!) One thing that is not all that easy, however, is object creation and populating your test database. Five years ago when I first started working with Rails the only options we had to get data into the database were fixtures, or hastily written &amp;#8216;factory&amp;#8217;-esque methods custom to each application.&lt;/p&gt;

&lt;p&gt;Fixtures, for those who don&amp;#8217;t know, are YAML files that contain YAML-ized versions of objects that then get loaded into the test database when you run your test suite. These objects can then be pulled back from the database during your tests. Sounds great, doesn&amp;#8217;t it? Well, not everybody thinks so. One of the biggest problems with fixtures is they can very quickly get out of control. Keeping track of all the different scenarios your tests needs can get very confusing and frustrating to deal with.&lt;/p&gt;
&lt;img alt=&#39;&#39; height=&#39;283&#39; src=&#39;http://www.uni.edu/schneidj/webquests/adayinthelife/lotsofworkers.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;Factory Workers&#39; width=&#39;360&#39; /&gt;
&lt;p&gt;So how do we fix this problem? Well, most developers have turned to using factories. Factories allow us to quickly build the data we need for each test, now the building of the data you need for your test is right there in a setup or before method. Easy to manage and keep track of. Now there are a plethora of different factory libraries meant to make this task nicer, a few of the popular ones are &lt;a href=&#39;http://github.com/thoughtbot/factory_girl&#39;&gt;Factory Girl&lt;/a&gt;, &lt;a href=&#39;http://github.com/notahat/machinist&#39;&gt;Machinist&lt;/a&gt;, and &lt;a href=&#39;http://github.com/flogic/object_daddy&#39;&gt;Object Daddy&lt;/a&gt;. The problem with this approach, however, is that it can slow down your tests as you are building database objects for nearly every test, and as we all know, object creation and database inserting can be expensive.&lt;/p&gt;

&lt;p&gt;So, what can we do to help solve both of these problems? Well, we can use both of these technologies. Together. Yeah, that&amp;#8217;s right I&amp;#8217;m saying you should use fixtures as well as factories. Sound crazy? Not really. Let me explain.&lt;/p&gt;

&lt;p&gt;Most Rails applications have most, if not all, of their functionality behind a login. So whenever we&amp;#8217;re testing some controller action that sites behind a login we need a user to login with. If we were using factories we would have a setup or before method that would create a new User object and save it to the database, and it would do that for every variant of the test, as well as every other test in our suite that needs a user object.&lt;/p&gt;

&lt;p&gt;Why not, create one user object and use that repeatedly through our tests? What I like to do is stick one or two users in my fixtures, so that they&amp;#8217;re there whenever I need one. I like to do this with most of my major models. Then, when I need to have some custom scenarios, I can break out the factories and build those custom scenarios.&lt;/p&gt;

&lt;p&gt;So what does this achieve? Well, I&amp;#8217;ve sped up my tests by already having a few objects in the database, and not having to create them (and roll them back) with each single test. I&amp;#8217;ve also cleaned up my tests significantly by eliminating a lot of setup and/or before methods where these objects were being created. I&amp;#8217;ve also eliminated the biggest problems with fixtures, that they can get overwhelming, because we are only keeping one or two objects in them and using factories for the rest.&lt;/p&gt;

&lt;p&gt;I hoped this helped you to understand that we don&amp;#8217;t have to throw the baby out with the bath water when it comes to fixtures and factories, we can use both. Not go forth and test! Test like your life depends on it (because it does!!).&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>CoverMe - Code Coverage for Ruby 1.9</title>
   <link href="http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9"/>
   <updated>2010-08-13T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/08/13/coverme-code-coverage-for-ruby-1-9</id>
   <content type="html">&lt;p&gt;Ruby 1.9(.2) is an amazing language to develop applications in. It&amp;#8217;s faster, more powerful, cleaner, and a huge improvement over Ruby 1.8.x. Because of those reasons every Ruby developer should move to this exciting new version of our language.&lt;/p&gt;

&lt;p&gt;When making a move of this size it&amp;#8217;s important to have the right tools to help us along. Unfortunately, one of the most useful tools as a Ruby developer, &lt;a href=&#39;http://github.com/relevance/rcov&#39;&gt;RCov&lt;/a&gt;, does not work with Ruby 1.9.&lt;/p&gt;

&lt;p&gt;RCov, for those unfamiliar analyzes your code and tells you which part of your code was not executed. This is INCREDIBLY useful when hooked up to your test suite. While, it&amp;#8217;s not the only metric you should use when determining how good your test coverage it, it certainly is a great first step to point out exactly which parts of your code haven&amp;#8217;t been touched at all!&lt;/p&gt;

&lt;p&gt;Enter &lt;a href=&#39;http://github.com/markbates/cover_me&#39;&gt;CoverMe&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#39;history&#39;&gt;History&lt;/h2&gt;

&lt;p&gt;While working on a Ruby 1.9/Rails 3 project, and loving everything about it (except for the lack of RCov), I came across a &lt;a href=&#39;http://engineering.attinteractive.com/2010/08/code-coverage-in-ruby-1-9/&#39;&gt;post&lt;/a&gt; by Aaron Patterson (of &lt;a href=&#39;http://github.com/tenderlove/nokogiri&#39;&gt;Nokogiri&lt;/a&gt; fame). In this post he quickly outlined a very basic coverage tool using the new built-in Coverage module in Ruby 1.9.&lt;/p&gt;

&lt;p&gt;After spending a morning playing with it, I was quickly able to grow the idea into something useful for the project. Later that day the company I was consulting for &lt;a href=&#39;http://www.biddingforgood.com&#39;&gt;BiddingForGood.com&lt;/a&gt;, and in particular their chief architect, &lt;a href=&#39;http://twitter.com/stuartmg&#39;&gt;Stuart Garner&lt;/a&gt;, told me to take a day or two and clean it up and release it for the world to use, and so &lt;a href=&#39;http://github.com/markbates/cover_me&#39;&gt;here&lt;/a&gt; it is.&lt;/p&gt;

&lt;h2 id=&#39;features&#39;&gt;Features&lt;/h2&gt;

&lt;p&gt;Here is a brief overview of the features of CoverMe:&lt;/p&gt;

&lt;h3 id=&#39;index_page&#39;&gt;Index Page&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Sortable column headers (File, Lines, Lines of Code, Tested %).&lt;/li&gt;

&lt;li&gt;Searching/filtering by file name.&lt;/li&gt;

&lt;li&gt;Filtering by coverage percent.&lt;/li&gt;

&lt;li&gt;Color coded list of files to quickly see which ones are 100% covered, &amp;#62; 90% covered, or less than 90% covered.&lt;/li&gt;

&lt;li&gt;Large color coded average coverage percent, for quick reference.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#39;detail_page&#39;&gt;Detail Page&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Line by line coverage report&lt;/li&gt;

&lt;li&gt;Color coded lines to quickly see which lines where executed and which ones were not.&lt;/li&gt;

&lt;li&gt;Side by side viewing with the corresponding test/spec file (if one exists).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See the &lt;a href=&#39;http://github.com/markbates/cover_me&#39;&gt;README&lt;/a&gt; file for more information on installation and usage.&lt;/p&gt;

&lt;h2 id=&#39;thanks&#39;&gt;Thanks&lt;/h2&gt;

&lt;p&gt;I would just quickly like to give another quick thanks to Aaron Patterson for pointing out the Coverage module in Ruby 1.9 and inspiring this, hopefully, helpful little gem. Also another big thanks to Stuart Garner for pushing me to package this up and release it to the world.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Testing is NOT an Option</title>
   <link href="http://www.metabates.com/2010/07/01/testing-is-not-an-option"/>
   <updated>2010-07-01T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/07/01/testing-is-not-an-option</id>
   <content type="html">&lt;p&gt;Five years ago I left the world of contracting and reentered the world of the full time employee, and I enjoyed every minute of it (well, almost). Now fast forward five years and I find myself once again at a crossroads. Do I continue on as an FTE or do I become a contractor, and play the field, so to speak? Looks like I&amp;#8217;m going to go with the hired gun route for a little while, but that&amp;#8217;s not really the point of this post.&lt;/p&gt;

&lt;p&gt;During the past week or so I&amp;#8217;ve spoken with many great companies and people. I&amp;#8217;ve been fortunate enough to have a high degree of interest in what I can bring to the table. During those discussions I talked with a really nice guy at a what seems to be a really cool company, I won&amp;#8217;t name names, because this isn&amp;#8217;t about either the person or the company, but rather something the engineer said during our phone conversation that got me to thinking.&lt;/p&gt;
&lt;img alt=&#39;&#39; height=&#39;240&#39; src=&#39;http://www.commercialventvac.com/finao/failure_testing.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;Failure Testing&#39; width=&#39;400&#39; /&gt;
&lt;p&gt;&amp;#8220;We don&amp;#8217;t have any tests because I couldn&amp;#8217;t convince the company to allocate the time for them.&amp;#8221; That statement really hung with me. After I got off the phone I started thinking really hard about that statement, and all I could think of was how testing is not an option and people shouldn&amp;#8217;t need to be convinced to have time allocated to them.&lt;/p&gt;

&lt;p&gt;As developers it is our responsibility to insist on testing. Always include testing in your time estimates. Never give the client (or your company) an option that includes a time estimate without testing. If a feature takes 2 days to code and a day to write tests, then your estimate is 3 days, never 2. You should never say, &amp;#8220;Well, I can get it done in two days if I don&amp;#8217;t write any tests.&amp;#8221; That&amp;#8217;s just an unacceptable thing to say. What you should be saying is, &amp;#8220;That feature will take three days to code&amp;#8221;.&lt;/p&gt;

&lt;p&gt;I don&amp;#8217;t feel I should sit here and tell you all the reasons why you should test, you should know them already, and frankly, they&amp;#8217;re all very obvious! But, if you need a few bullet points to &amp;#8216;convince&amp;#8217; your client, here are a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Less bugs - The more tests you have the less bugs you will have. It&amp;#8217;s just a fact. You won&amp;#8217;t have 100% bug free code, that&amp;#8217;s a nearly impossible goal, but you highly reduce the likely hood that as soon as you get your code into production your users will find all the breaking points of your code.&lt;/li&gt;

&lt;li&gt;Better maintainability, means faster feature turn around - When you have a large test suite it means adding, updating, or even removing features because a whole lot easier, which means it SAVES time! Why? Simple, you don&amp;#8217;t have to go through and manually test every aspect of your code to make sure you didn&amp;#8217;t break something elsewhere by adding that validation, or by refactoring that bit of code, etc&amp;#8230; That translates into real $ savings.&lt;/li&gt;

&lt;li&gt;Test driven development saves time - this isn&amp;#8217;t quite the same as my last bullet point. Imagine, if you will, you are writing a four step wizard in your application. If you write a few test scripts using something like Cucumber first before you write your code you can simply keep re-running those to make sure your code is working. If you don&amp;#8217;t have those test scripts written then you continually have to keep going to a browser and entering all the information in each of the steps so you can test something in step four. Which one do you think takes longer, having a few test scripts you can run, or manually going through the four page wizard each time you make a change?&lt;/li&gt;

&lt;li&gt;It&amp;#8217;s an investment - thinking of having test scripts like owning a house. When you don&amp;#8217;t have tests and you just keep testing in the browser or the command line what you are doing is a kin to &amp;#8220;renting&amp;#8221;. There is money being spent, but at the end of the day you have nothing to show for it. You&amp;#8217;ve spent hours &amp;#8220;testing&amp;#8221;, but tomorrow when you come in you have to do it all over again. When you spend those hours writing tests you are actually &amp;#8220;buying&amp;#8221; something. You have something to show for that time and money you&amp;#8217;ve spent. Tomorrow, next week, next month, next year, those scripts will still be there, they&amp;#8217;ll still be working for you, giving  you a return on your investment.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, I hope I have hopefully made a case to you the engineer as to why you should insist on testing. It&amp;#8217;s the right thing to do, for you, for your application and for you client. If if anyone tries to give you grief about it, send them my way, I&amp;#8217;ll sort em out!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Six Tracks of Drums</title>
   <link href="http://www.metabates.com/2010/06/14/six-tracks-of-drums"/>
   <updated>2010-06-14T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2010/06/14/six-tracks-of-drums</id>
   <content type="html">&lt;p&gt;When I was 11 I made my very first recording. It was 1987 and the technology choices for recording were, how to put this, almost non-existant. So I did what any smart 11 year old would do, I improvised! Let me walk you through the history of my recording career. Don&amp;#8217;t worry, I&amp;#8217;ll make it brief.&lt;/p&gt;

&lt;h3 id=&#39;the_boom_box&#39;&gt;The Boom Box.&lt;/h3&gt;

&lt;p&gt;I had a two cassette boom box, it was a beast of a machine. It was a &amp;#8216;portable&amp;#8217; machine, meaning that it took 8 D batteries and a burly man named Attila to carry it. My recordings started simply on this machine. I would use the built in microphone to record my awful wailings and terribly out of tune acoustic guitar.&lt;/p&gt;

&lt;p&gt;As my love of bands like the Beatles grew, so did my desire to capture my musical legacy the way I desired. It was around age 12 or so that the true experimentation began. I started playing around with using different input devices. I acquired a rather terrible Radio Shack microphone for the princely sum of $19.95. It sported, and I kind you not, a &amp;#8220;built-in on/off switch&amp;#8221;. That was actually a feature of this microphone. Actually it was the only feature of this microphone! My other trick for recording was to use a pair of headphones as a microphone. Did it sound good? Absolutely not! But it worked.&lt;/p&gt;

&lt;p&gt;While the &amp;#8216;quality&amp;#8217; of the recordings got marginally better with my new microphone and headphone combinations, I was lacking the studio trickery I so desired. I needed multitrack. If the Beatles had it, why didn&amp;#8217;t I? Of course I couldn&amp;#8217;t afford an actual multitrack recorder at this age, so again, improvisation proved key. I realized that if I recorded me singing and playing (at the same time), I could then pop that tape into the top player and record me playing and singing again while the first tape plays back into the second tape. How did it sound? How do you think it sounded??&lt;/p&gt;

&lt;h3 id=&#39;the_4_track&#39;&gt;The 4 Track!&lt;/h3&gt;

&lt;p&gt;At the tender age of 14 I managed to squeeze together enough allowance and saved up enough birthday/Christmas presents to get a Fostex 4-track cassette recorder. It was incredible! Here was what I had wanted all along. I could now discretely record all the wonderful parts (up to four) I could dream up!&lt;/p&gt;

&lt;p&gt;I felt like the Beatles making Sgt. Pepper. Never before had anyone wielded such recording power (except for everyone else who had)! I was George Martin. I learned what every last knob on that machine did. I knew all of it&amp;#8217;s tricks. I played with the varispeed knob. I recorded backwards parts. I was crazy.&lt;/p&gt;

&lt;p&gt;Then I made a huge discovery! I could mix the 4 tracks down to stereo, pop that mix down back in the 4 track and then have another 2 tracks to play with! Brilliant!! The world was my musical oyster, and damn I was rocking it!&lt;/p&gt;

&lt;h3 id=&#39;the_8_track&#39;&gt;The 8 Track!!&lt;/h3&gt;

&lt;p&gt;When I was 18 years old I took a trip on the green line T to the Guitar Center on Comm Ave in Boston and purchased my musical destiny, a Tascam 488 8-track cassette recorder. Wow! I can still remember that day. Sitting on the T ride back to my house with that box on my lap. Giddy, excited, nervous, anxious, I can&amp;#8217;t describe how I felt on that ride. I can say that it felt like it was going to take forever to get home!&lt;/p&gt;

&lt;p&gt;I finally got home, rushed out to the little studio room my father and I had built in his garage and proceeded to hook it up. I had a 4 EQs per channel, inserts, sends, cues, all sorts of wonderful things! The sound was better, the quality higher, it even had DBX noise reduction! DBX! I still don&amp;#8217;t know what it is, but I get very excited knowing it&amp;#8217;s there!&lt;/p&gt;

&lt;p&gt;That day I re-recorded a song I had recorded on my 4-track, that song was called, &amp;#8220;I and You&amp;#8221;. It was a dreadful song that I thought had to be the next big thing. And why wouldn&amp;#8217;t it be? I recorded it on an 8-track!&lt;/p&gt;

&lt;h3 id=&#39;the_computer_age&#39;&gt;The Computer Age.&lt;/h3&gt;

&lt;p&gt;In 1996 I moved to Liverpool, England to do my degree in Music. I moved all of my recording equipment across the pond with me. There was no way I was going to go to music college and not have a means to record all the amazing #1 hits I was going to write! The cosmos, on the hand, had slightly different plans for me. In the Spring of 1998 my house was broken into, and everything I owned was stolen, including my beloved 8-track recorder.&lt;/p&gt;

&lt;p&gt;My world was shattered. I was a broken and lost man. How could this happen to me? Why Lord? Why?? Thankfully I managed to get a handsome of money from my parent&amp;#8217;s insurance company to cover the claims, well, 75% of the total value anyway. Not great, but it was certainly better than nothing.&lt;/p&gt;

&lt;p&gt;It was with this insurance money that I bought my own computer. My family had had computers since I was 8 or 9, but this one was mine, and I had plans for it. Since September of 1998 I have been recording music on my computer. Back then it was very difficult, now, it&amp;#8217;s incredibly easy. I can record 8 tracks on my iPad should I wish.&lt;/p&gt;

&lt;h3 id=&#39;so_what&#39;&gt;So What?&lt;/h3&gt;
&lt;img alt=&#39;&#39; class=&#39;size-medium wp-image-332&#39; height=&#39;225&#39; src=&#39;/assets/images/2010/06/IMG_1094-300x225.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;IMG_1094&#39; width=&#39;300&#39; /&gt;
&lt;p&gt;Why am I talking about this now? I was recently doing some work around the house and stumbled across a rather large box full of cassette tapes. When I saw the box it all came flooding back to me. The countless hours spent recording. The incredible amount of songs I wrote, covered, or in most cases just butchered. They were all on these cassettes, and they were fading.&lt;/p&gt;

&lt;p&gt;How long could these cassettes last? What would happen to those songs? What if I never heard them again?&lt;/p&gt;

&lt;p&gt;Now, I&amp;#8217;m under no illusions that these songs are well written, well recorded, or well performed. As a matter of fact, I know it&amp;#8217;s the opposite of that. They were poorly written, recorded, and performed. But you know what? They&amp;#8217;re mine, and I want to preserve them. That&amp;#8217;s why I have undertaken an enormous project to catalog and digitally capture the music on those tapes.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s going to be an enormous project, that I know. I&amp;#8217;ll do a cassette here, and a cassette there, and eventually I&amp;#8217;ll have them all my computer and safely backed up. Will I remix them? Edit them? Release them? Chances are no to all those questions. That&amp;#8217;s not really the point. I just want to know that those songs are safe. Maybe I&amp;#8217;ll take a couple of them, polish them, and give them a new life with my band, but let&amp;#8217;s see what happens, shall we?&lt;/p&gt;
&lt;img alt=&#39;&#39; class=&#39;size-medium wp-image-333&#39; height=&#39;225&#39; src=&#39;/assets/images/2010/06/IMG_1095-300x225.jpg&#39; style=&#39;float: right; padding-left: 10px&#39; title=&#39;IMG_1095&#39; width=&#39;300&#39; /&gt;
&lt;p&gt;I purchased a used Tascam 488 MKII on eBay, and tonight I transferred my first cassette. I&amp;#8217;m excited about this project. Hearing these songs again brings up some great memories, and some awful ones. For example, tonight&amp;#8217;s cassette contained six recordings. The first five I remember quite vividly. The sixth, however, is clear why I forgot. It was a &amp;#8216;cover&amp;#8217; of &amp;#8220;A Day In The Life&amp;#8221; by the Beatles. But it consisted of a click track, a vocal, and 6, yes 6, tracks of drums!!! Oh, during the middle eight of the songs, two of the drum tracks switch to piano!! Why?? That&amp;#8217;s a question I would like answered as well.&lt;/p&gt;

&lt;p&gt;Anyway, expect a post every now and again about my on going battle with these cassettes. I&amp;#8217;m sure there will be some funny, and occasionally horrific, stories to share about the experience.&lt;/p&gt;

&lt;p&gt;PS. If anybody out there has some great earplugs they want to lend me, I&amp;#8217;ll take them!!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>APN on Rails has a new Home.</title>
   <link href="http://www.metabates.com/2010/03/10/apn-on-rails-has-a-new-home"/>
   <updated>2010-03-10T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2010/03/10/apn-on-rails-has-a-new-home</id>
   <content type="html">&lt;p&gt;Quite often I get asked why don&amp;#8217;t I blog more? Why don&amp;#8217;t I tweet more? Why don&amp;#8217;t I &lt;em&gt;fill in the blank&lt;/em&gt; more. The answer is I&amp;#8217;m a busy man. I&amp;#8217;m the CTO for a pre-funding startup, &lt;a href=&#39;http://www.shortbord.com/invites/ZAZLBQH5FA&#39;&gt;www.shortbord.com&lt;/a&gt;, the father of two adorable little boys, the lead singer of a Boston-based band, &lt;a href=&#39;http://www.myspace.com/colawarvets&#39;&gt;www.myspace.com/colawarvets&lt;/a&gt;, and that&amp;#8217;s just the big stuff! I have to prioritize what I can spend my time on, and unfortunately some of my open source projects are the first to get the ax.&lt;/p&gt;

&lt;p&gt;Why do the open source projects always seem to get the ax? Well, let me start by saying that they don&amp;#8217;t &lt;em&gt;always&lt;/em&gt; get the ax, but they certainly jump to the top of the list. There are certain libraries I&amp;#8217;ve written, &lt;a href=&#39;http://github.com/markbates/cachetastic&#39;&gt;cachetastic&lt;/a&gt; and &lt;a href=&#39;http://github.com/markbates/configatron&#39;&gt;configatron&lt;/a&gt;, are the two most prominent that I use day in and day out. They will always get the love the deserve. Then there are projects like APN on Rails. I wrote it because I had an iPhone app (no longer available) that I wanted notifications for, and there was nothing else available for Ruby to do the job. The plugin took off like crazy and I was overwhelmed with patches, questions, bugs, etc&amp;#8230; That was great, and I was happy to help, for a time, but alas, I haven&amp;#8217;t written an iPhone app for ages, and I just don&amp;#8217;t have time to maintain a plugin that I wasn&amp;#8217;t even using.&lt;/p&gt;

&lt;p&gt;A while ago I realized that the best thing for APN on Rails, myself, and for the community was to find someone to take over the project so that it got the love it deserved. I put out the call and the good folks over at &lt;a href=&#39;http://www.prx.org/&#39;&gt;PRX&lt;/a&gt; (Public Radio Exchange) answered the call. The folks at PRX have written some great iPhone apps, including the very popular &amp;#8220;This American Life&amp;#8221; app.&lt;/p&gt;

&lt;p&gt;So I&amp;#8217;m happy to announce that the new official home for APN on Rails is now at: &lt;a href=&#39;http://github.com/PRX/apn_on_rails&#39;&gt;http://github.com/PRX/apn_on_rails&lt;/a&gt;. I ask that you continue to show the same support to PRX that you have shown to me over the life of this plugin.&lt;/p&gt;

&lt;p&gt;Again, thank you to everyone, and thank you to Rebecca Nesson and the folks over at PRX for picking up the project and giving it renewed life.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby 1.9 and Rails 3.0</title>
   <link href="http://www.metabates.com/2010/02/08/ruby-1-9-rails-3-0"/>
   <updated>2010-02-08T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2010/02/08/ruby-1-9-rails-3-0</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve always been a big proponent of Ruby 1.9, I make no bones about it. My question is why wouldn&amp;#8217;t you be? It&amp;#8217;s faster, more powerful, easier to use, and makes things a lot clearer and cleaner than 1.8. So why then are pretty much all of us still running our applications on 1.8.x? Great question, and as far as I can tell there is really only 1 answer.&lt;/p&gt;

&lt;p&gt;That answer? Because no one else is. It&amp;#8217;s stupid really, but it&amp;#8217;s the truth. We&amp;#8217;re all afraid to run our applications in 1.9 because we don&amp;#8217;t know many other people that are. Because of that it makes it hard for you to make your application work with 1.9 because all those gems and libraries  you use aren&amp;#8217;t 1.9 compatible, so you&amp;#8217;re forced to keep running your app on 1.8. And so the cycle continues.&lt;/p&gt;

&lt;p&gt;Enter Rails 3.0. Here is a major upgrade to the most prominent web framework in the Ruby community, and I would argue the reason that most of us got into Ruby in the first place. This upgrade will force us all to make some pretty severe changes to our applications to make them fully compatible.  The changes in ActiveRecord alone are so sweeping and massive that we, as a community, are going to have to put some serious time into upgrade our applications. Yet, despite this, we are all going to do it.&lt;/p&gt;

&lt;p&gt;Why are we all going to upgrade to Rails 3.0? Because it  looks cool and sexy, and we want those great new features and all those performance enhancements to make our applications run faster. Which leads me back to Ruby 1.9.&lt;/p&gt;

&lt;p&gt;In Rails 3.0 they are dropping support for Ruby 1.8.6 and below in favor of Ruby &amp;#62;1.8.7 and &amp;#62;1.9.1. I propose that Rails 3.0 becomes Ruby 1.9 compatible only. Think about it. What a perfect opportunity for us all. We are all going to have to upgrade the libraries and gems we maintain to support Rails 3.0 and we are going to be upgrading our applications to Rails 3.0, so why not go full steam into Ruby 1.9?&lt;/p&gt;

&lt;p&gt;There is no better time than now to push forward into the future as a whole community. Let&amp;#8217;s put Ruby 1.8 behind and reap the benefits of what Ruby 1.9 has to offer. What do you say? Can we do it? I think we can.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>APN on Rails Needs a Home</title>
   <link href="http://www.metabates.com/2009/12/21/apn-on-rails-needs-a-home"/>
   <updated>2009-12-21T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/12/21/apn-on-rails-needs-a-home</id>
   <content type="html">&lt;p&gt;Hey there everyone, recently I have been getting a lot of requests for bug fixes and new features for the APN on Rails gem that I wrote. While I appreciate that the gem is getting a lot of use and helping a lot of people out, I, unfortunately, no longer have the time to maintain the gem.&lt;/p&gt;

&lt;p&gt;Recent changes in my career have meant that I have moved away from doing a lot o iPhone development, and because of that I no longer have the time, nor the desire, to keep maintaining a gem I&amp;#8217;m no longer using.&lt;/p&gt;

&lt;p&gt;So, because of that, I would to find a new home for the APN on Rails gem so that it gets the love and attention it so desires. Are there any takers out there? Is someone willing to take on the ownership of this, apparently, very useful gem? If you are willing to take it on, please let me know and we can workout the details.&lt;/p&gt;

&lt;p&gt;Thanks to everyone who has said good things about the gem, and I&amp;#8217;m glad that it has helped people get to using push notifications quicker, hopefully, one of you can take this project and run with it. Thanks again.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>First Book Review is a 5-Star One!</title>
   <link href="http://www.metabates.com/2009/11/19/first-book-review-is-a-5-star-one"/>
   <updated>2009-11-19T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/11/19/first-book-review-is-a-5-star-one</id>
   <content type="html">&lt;p&gt;About.com became the first, that I know about, to review my book, &amp;#8220;Distributed Programming with Ruby&amp;#8221;. What a great first review to have as well. They rated the book 5 out of 5 stars! The review can be found &lt;a href=&#39;http://ruby.about.com/od/bookreviews/gr/distributedprogramming.htm&#39;&gt;here&lt;/a&gt;. &lt;blockquote&gt;&quot;Anyone working with distributed programming in Ruby will want this book.&quot;&lt;/blockquote&gt; The only downside they saw in the book, was that they wanted it to be longer! I have to save something for the 2nd edition, don&amp;#8217;t I? :)&lt;/p&gt;

&lt;p&gt;If you haven&amp;#8217;t purchased yours yet, I encourage you to do so. It&amp;#8217;s on sale at &lt;a href=&#39;http://book.markbates.com&#39;&gt;Amazon.com&lt;/a&gt; right now.&lt;/p&gt;

&lt;p&gt;If you have reviewed the book, or know of a review of the book, please pass it along.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Distributed Programming with Ruby - Now Available</title>
   <link href="http://www.metabates.com/2009/11/12/distributed-programming-with-ruby-now-available"/>
   <updated>2009-11-12T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/11/12/distributed-programming-with-ruby-now-available</id>
   <content type="html">&lt;img alt=&#39;Distributed Programming with Ruby&#39; class=&#39;size-medium wp-image-231&#39; height=&#39;300&#39; src=&#39;/assets/images/2009/06/0321638360_bates_mech_page_3-261x300.jpg&#39; style=&#39;float: left; padding-right: 10px&#39; title=&#39;Distributed Programming with Ruby&#39; width=&#39;261&#39; /&gt;
&lt;p&gt;Well folks, it&amp;#8217;s been a long road, nearly a year since I presented the idea for &amp;#8220;Distributed Programming with Ruby&amp;#8221; to Obie Fernandez in a hot tub in Florida, but finally my book is done, dusted, back from the printers and available for purchase from a variety of places, include &lt;a href=&#39;http://books.markbates.com&#39;&gt;Amazon.com&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;It was an absolutely amazing experience and I can&amp;#8217;t thank everyone involved with the project enough for all of their help, guidance, and having to put up with me over the past year.&lt;/p&gt;

&lt;p&gt;I would go into detail about all the people I wish to thank, but I did that already in the book, and let&amp;#8217;s be honest, you&amp;#8217;re going to buy it and read it anyway, so I don&amp;#8217;t want to ruin the surprise. :)&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure you&amp;#8217;ve already purchased your copy, but if you haven&amp;#8217;t might I recommend you pop over to &lt;a href=&#39;http://books.markbates.com&#39;&gt;Amazon&lt;/a&gt; right now and pick yourself up a copy. They&amp;#8217;re selling pretty well and you don&amp;#8217;t want to miss out, do you? I didn&amp;#8217;t think so.&lt;/p&gt;

&lt;p&gt;If you are someone with a popular blog and you would like to do a review of the book, please drop me a line and I&amp;#8217;ll see what we can do about hooking you up with a copy. Please understand, though, the publishers aren&amp;#8217;t going to send out copies to everyone who requests them, so there will be a bit of vetting going on.&lt;/p&gt;

&lt;p&gt;Also, if you have already purchased the book if you wouldn&amp;#8217;t mind leaving a review of it on &lt;a href=&#39;http://books.markbates.com&#39;&gt;Amazon&lt;/a&gt;, that would be much appreciated. It doesn&amp;#8217;t matter where you bought the book, if you could leave a review there, it will really make a difference. Thanks.&lt;/p&gt;

&lt;h3 id=&#39;buy_distributed_programming_with_ruby_today&#39;&gt;&lt;a href=&#39;http://books.markbates.com&#39;&gt;Buy &amp;#8220;Distributed Programming with Ruby&amp;#8221; Today!&lt;/a&gt;&lt;/h3&gt;</content>
 </entry>
 
 <entry>
   <title>Introducing Warp Drive for Rails</title>
   <link href="http://www.metabates.com/2009/10/07/introducing-warp-drive-for-rails"/>
   <updated>2009-10-07T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/10/07/introducing-warp-drive-for-rails</id>
   <content type="html">&lt;p&gt;At work recently we had a need to build a large Rails application that we then wanted to, for lack of a better word, subclass. Unfortunately there is no real good way of doing that. Rails Engines and templates have way too may limitations. We wanted to bundle up the entire Rails app (models, controllers, views, routes, migrations, configurations, libs, assets, etc&amp;#8230; everything!), but there was no good way of doing that. Well, now there is, it&amp;#8217;s called the Warp Drive.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve decided to just include my README file below to explain what it is, since it&amp;#8217;s a bit lengthy, and I don&amp;#8217;t feel like retyping.&lt;/p&gt;

&lt;p&gt;This is still in it&amp;#8217;s early stages, so use with care, but it does seem to be working for us on a daily basis. Let me know what you think!&lt;/p&gt;

&lt;h2 id=&#39;what_is_warp_drive&#39;&gt;What is Warp Drive?&lt;/h2&gt;

&lt;p&gt;Warp Drive is what Rails Engines wish they could be, and more! They kick Rails templates in the ass, and they beat keeping an ever evolving base Rails app up to date.&lt;/p&gt;

&lt;h3 id=&#39;what_are_rails_engines&#39;&gt;What are Rails Engines?&lt;/h3&gt;

&lt;p&gt;Rails Engines allow you to package up some of a Rails app (controllers, models, views, routes, libs) and put them in a plugin that can be included into a new Rails app, thereby giving it the functionality you had in the engine. That sounds good, but what about the downsides of using an engine? Well, you can&amp;#8217;t override or extend any of the functionality from the engine in your main application. You can hack at the plugin, but now you&amp;#8217;ve made it difficult to update. So what do you do if you want to add or alter a method to a controller or model? What do you do if you want to change the look and feel of a view? You have to copy everything into your main application. Boo!&lt;/p&gt;

&lt;p&gt;Rails Engines also don&amp;#8217;t allow you to package up migrations, assets, plugins, initializers, etc&amp;#8230; All the fun stuff that you&amp;#8217;ve come to know and love about a Rails application.&lt;/p&gt;

&lt;h3 id=&#39;enter_the_warp_drive&#39;&gt;Enter the Warp Drive!&lt;/h3&gt;

&lt;p&gt;So what is a Warp Drive? Great question. To put it simply a Warp Drive is a standard, full featured, Rails application that you can easily bundle up into a Ruby Gem, and include into another Rails app. That second Rails app now has all the power of the first Rails. That is all there is to it.&lt;/p&gt;

&lt;h2 id=&#39;creating_a_warp_drive&#39;&gt;Creating a Warp Drive.&lt;/h2&gt;

&lt;p&gt;Let&amp;#8217;s assume we have an application that implements AuthLogic for handling user registration/authentication. We have controllers, views, models, plugins, initializers, configurations, migrations, tasks, etc&amp;#8230; it&amp;#8217;s a full featured fully functional Rails application, we call it authenticator.&lt;/p&gt;

&lt;p&gt;We want to turn our authenticator application into a Warp Drive. We can do it in three simple steps, the first two steps you only need to do the first time, to set everything up.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ gem install warp_drive&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$ warpify&lt;/code&gt; That will add a little bit of code to your &lt;code&gt;Rakefile&lt;/code&gt;. That code simply requires the Warp Drive gem, and gives you hooks to configure the gem of your Warp Drive application.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;$ rake warp_drive:compile&lt;/code&gt; (&lt;code&gt;$ rake warp_drive:install&lt;/code&gt;) This will either compile your gem for your (&lt;code&gt;warp_drive:compile&lt;/code&gt;) or compile and install your gem (&lt;code&gt;warp_drive:install&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&amp;#8217;s it! You should now have your Rails application bundled up and/or installed as a RubyGem!&lt;/p&gt;

&lt;h2 id=&#39;using_a_warp_drive&#39;&gt;Using a Warp Drive.&lt;/h2&gt;

&lt;p&gt;With your fancy new Warp Drive, authenticator, built and installed how do you use it in that new application your building? Again, it&amp;#8217;s stupid easy, and it only takes one step, that only needs to be run once:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ install_warp_drive authenticator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That will put a few lines of code in your &lt;code&gt;Rakefile&lt;/code&gt;, so you have access to all the &lt;code&gt;Rakefile&lt;/code&gt; tasks in your Warp Drive, and a line in your &lt;code&gt;config/environment.rb&lt;/code&gt; so that it will load your Warp Drive when you launch your application.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it! You&amp;#8217;re done. Now you can run &lt;code&gt;rake db:migrate&lt;/code&gt; to run the migrations from both your Warp Drive and your new application. Enjoy!&lt;/p&gt;

&lt;h2 id=&#39;overriding_extending_and_other_such_fun_things&#39;&gt;Overriding, Extending, and Other Such Fun Things&lt;/h2&gt;

&lt;h3 id=&#39;overriding_and_extending&#39;&gt;Overriding and Extending&lt;/h3&gt;

&lt;p&gt;You&amp;#8217;ve been enjoying your new Warp Drive back application for a little while now, but you decide you really need to change an action in your controller, how do you go about that? Simple, just like you would any normal alteration to a Ruby class.&lt;/p&gt;

&lt;p&gt;Example: Here is what the action looks like in our Warp Drive UsersController:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;In our new application we can just open up the UsersController like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Viola! The same works for any thing else in the system, models, libs, etc&amp;#8230; In our example we used &lt;code&gt;alias_method_chain&lt;/code&gt; to retain the original method, but we could have completely rewritten the method as well.&lt;/p&gt;

&lt;p&gt;You can also plop in a new view and it will override the view that was in your Warp Drive. The sky is really the limit.&lt;/p&gt;

&lt;h3 id=&#39;assets&#39;&gt;Assets&lt;/h3&gt;

&lt;p&gt;You can easily bundle assets from your public directory in your Warp Drive. Just make sure they are in folders called &lt;code&gt;warp_drive&lt;/code&gt;. Those folders will then be symlinked to your new project&amp;#8217;s public directory when the application starts up.&lt;/p&gt;

&lt;h3 id=&#39;keep_those_rake_tasks_private&#39;&gt;Keep Those Rake Tasks Private!&lt;/h3&gt;

&lt;p&gt;We all them, Rake tasks we have created to help us do all sorts of things, and we usually don&amp;#8217;t want them to ship. Well, Warp Drive has you covered there. Just place your tasks in folders called &lt;code&gt;private&lt;/code&gt; and Bob&amp;#8217;s your uncle they won&amp;#8217;t be available in the compiled gem.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;In this example &lt;code&gt;foo.rake&lt;/code&gt; will be available to clients of your Warp Drive, but &lt;code&gt;bar.rake&lt;/code&gt; will not be.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>A Few Rails Nuggets</title>
   <link href="http://www.metabates.com/2009/09/07/a-few-rails-nuggets"/>
   <updated>2009-09-07T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/09/07/a-few-rails-nuggets</id>
   <content type="html">&lt;p&gt;So with my book, &lt;a href=&#39;http://my.safaribooksonline.com:80/9780321669919&#39;&gt;Distributed Programming with Ruby&lt;/a&gt;, finally finished, and a nice long weekend I was able to sit down and work on a little pet project of mine. I decided to work on a little site that I could use to track my rather large Pez collection. (Yes, I know, I collect Pez - so what!)&lt;/p&gt;

&lt;p&gt;While working on it I got to use some new technologies that I really haven&amp;#8217;t had a chance to play, so I thought I would talk a bit about some of the ones I liked the most. &lt;h3&gt;Authlogic&lt;/h3&gt; Love it! Finally a decent authentication system! The thing I love most about it? It doesn&amp;#8217;t generate a lot of crap in your project. If I were to say one bad thing about it, it would be that it doesn&amp;#8217;t generate enough in your project. :) I know that sounds silly, but it&amp;#8217;s the truth. It gives you so much power, without having to generate a ton of lib code and crazy controller code, which is awesome. However, it would be nice if it had a generator that generated a &amp;#8216;basic&amp;#8217; application for you. Just a little thing, apart from that, love it!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://github.com/binarylogic/authlogic/tree/master&#39;&gt;http://github.com/binarylogic/authlogic/tree/master&lt;/a&gt; &lt;h3&gt;Cucumber/Webrat&lt;/h3&gt; I&amp;#8217;m sure by now everyone has heard of Cucumber. I&amp;#8217;m not going to pretend that I&amp;#8217;m the first to that party! Over the last month or so I&amp;#8217;ve really started to use it and it has completely changed my life. That&amp;#8217;s not an overstatement.&lt;/p&gt;

&lt;p&gt;Cucumber lets you write features and scenario in human readable format. Combine that with Webrat, which lets you do things like click buttons and follow links, you can write some amazing tests that look like something a project manager would write! Brilliant!&lt;/p&gt;

&lt;p&gt;These tests beat the hell out of Rails integration tests. Trust me! I love watching Cucumber and Webrat click around my site while I just watch.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://cukes.info/&#39;&gt;http://cukes.info/&lt;/a&gt; &lt;a href=&#39;http://github.com/brynary/webrat/tree/master&#39;&gt;http://github.com/brynary/webrat/tree/master&lt;/a&gt; &lt;h3&gt;Web App Theme Generator&lt;/h3&gt; This cool little plugin helps you to quickly generate a very useful, and laid out, theme for your application. The themes would be familiar to anyone who has used sites like Lighthouse. They&amp;#8217;re basic, but they are very well coded and get you on your quickly so you can have something that looks fairly decent.&lt;/p&gt;

&lt;p&gt;My only gripe with this plugin is that it is a bit clumsy to use, but thankfully you don&amp;#8217;t have to run it very often, only when you create a new controller/resource.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://gravityblast.com/2009/07/30/2-minutes-admin-layout-with-rails-and-the-web-app-theme-generator/&#39;&gt;http://gravityblast.com/2009/07/30/2-minutes-admin-layout-with-rails-and-the-web-app-theme-generator/&lt;/a&gt; &lt;h3&gt;Delayed Job&lt;/h3&gt; The last piece of tech is Delayed Job. I first discovered Delayed Job when I wrote about it in my &lt;a href=&#39;http://my.safaribooksonline.com:80/9780321669919&#39;&gt;book&lt;/a&gt;. It is a great way to handle and process background tasks. It&amp;#8217;s easy, reliable, and scales really well. I&amp;#8217;ve been using the Collective Idea fork of the project. It has a generator to create the migration you need. It also has a nice binary to run in the background on your server.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve also been using a little gem I wrote that gives me hooks into Hoptoad, the is_paranoid gem, and a nice subclass for writing workers.&lt;/p&gt;

&lt;p&gt;I have been completely enamored with Delayed Job from the first moment I used it, and I&amp;#8217;m sure if you haven&amp;#8217;t checked it out yet, and you do, you&amp;#8217;ll feel the same!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://github.com/collectiveidea/delayed_job/tree/master&#39;&gt;http://github.com/collectiveidea/delayed_job/tree/master&lt;/a&gt; &lt;a href=&#39;http://github.com/markbates/delayed_job_extras/tree/master&#39;&gt;http://github.com/markbates/delayed_job_extras/tree/master&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There you go, that&amp;#8217;s just a few things I&amp;#8217;ve been playing with lately, that I think are going to become mainstays in any Rails project I work on. Hopefully this has given you a little for for thought on things you can use in your next project.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>APN on Rails 0.3.0 Released</title>
   <link href="http://www.metabates.com/2009/07/31/apn-on-rails-0-3-0-released"/>
   <updated>2009-07-31T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/07/31/apn-on-rails-0-3-0-released</id>
   <content type="html">&lt;p&gt;The latest version of Apple Push Notifications on Rails (APN on Rails) has been released. This release brings a few bug fixes, a new migration, and Feedback processing.&lt;/p&gt;

&lt;p&gt;Installing/upgrading is easy:&lt;/p&gt;
&lt;code&gt;$ sudo gem install apn_on_rails
$ ruby script/generate apn_migrations
$ rake db:migrate
&lt;/code&gt;
&lt;p&gt;It&amp;#8217;s important to always run the migrations generator after each update to get the latest database schema needed for the the gem.&lt;/p&gt;

&lt;p&gt;To use the new Feedback integration you have to first make sure that you update the new &lt;code&gt;last_registered_at&lt;/code&gt; column when your iPhone application calls home. This column is checked against the timestamp Apple returns with the device token. If the &lt;code&gt;last_registered_at&lt;/code&gt; is older than Apple&amp;#8217;s date then the device is deleted, otherwise the Feedback is ignored.&lt;/p&gt;

&lt;p&gt;To get and process the list of devices from Apple&amp;#8217;s Feedback service just run the following Rake task:&lt;/p&gt;
&lt;code&gt;$ rake apn:feedback:process&lt;/code&gt;
&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Almost There... Book Wise.</title>
   <link href="http://www.metabates.com/2009/07/27/almost-there-book-wise"/>
   <updated>2009-07-27T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/07/27/almost-there-book-wise</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m now entering the home stretch of writing the Distributed Programming with Ruby book. I&amp;#8217;m just a few weeks away, well, technically I&amp;#8217;m hours away from finishing the last chapter (Delayed Job) in the official table of contents, however, I&amp;#8217;m going to add another chapter and a half. Why? Mostly because I&amp;#8217;m a glutton for punishment. That and I want to deliver the best book possible. The extra chapter and a half, not featured in the table of contents below, will be on MapReduce technologies. It&amp;#8217;s a really hot topic, and I think it will fit well in the book. What do you think?&lt;/p&gt;
&lt;del datetime=&#39;2009-07-29T03:01:37+00:00&#39;&gt;Unfortunately, the &quot;Rough Cuts&quot; book on O&#39;Reilly&#39;s Safari site hasn&#39;t been updated in nearly 3 months! I&#39;m not sure why. I keep asking my editor to update it, but it hasn&#39;t happened yet. I&#39;m sure it will soon, especially since the first draft of the entire manuscript will be done in just a few weeks!&lt;/del&gt;
&lt;p&gt;UPDATE: Today they updated the &amp;#8220;Rough Cuts&amp;#8221; with nearly the latest revisions. It&amp;#8217;s still missing the chapters on Delayed Job and BackgrounDRb, but it&amp;#8217;s closer than it was yesterday.&lt;/p&gt;

&lt;p&gt;Anyway, as a public service announcement to you, the readers, I thought I would the table of contents as it stands right now, so you have a better idea of what the book is going to be about. So here it goes:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/156861.js&#39; /&gt;
&lt;p&gt;What do you think? Does it look good? Is this something you&amp;#8217;d buy? Let me know. This is your chance to have an influence on a book. If you think something is missing or should be laid out differently, please let me know, it might just make it into the final product.&lt;/p&gt;

&lt;p&gt;Ok, enough delaying here, let me get back to writing so I can finish up the Delayed Job chapter.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Apple Push Notifications on Rails</title>
   <link href="http://www.metabates.com/2009/07/24/apple-push-notifications-on-rails"/>
   <updated>2009-07-24T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/07/24/apple-push-notifications-on-rails</id>
   <content type="html">&lt;p&gt;The other night I submitted a new iPhone application to the Apple Store. The app, which I&amp;#8217;ll speak about when, and if it gets approved, uses the new Apple Push Notification service available in iPhone OS 3.0. On the server side I have a Rails application that I am using to send the notifications to Apple. The problem I ran into was how.&lt;/p&gt;

&lt;p&gt;Enter the APN on Rails gem. While searching I found one plugin for Rails that mostly worked for me, Sam Soffes&amp;#8217; apple_push_notification plugin. It was a great place to start, but I found that there were things that didn&amp;#8217;t suite me. For starters, not having any tests is always a big turn off for me when it comes to any code. I also didn&amp;#8217;t like that you didn&amp;#8217;t need to save a notification in order to send it. That means you don&amp;#8217;t have a record of what was sent and when. I also wanted to have devices stored separately from the notification. Finally, I wanted to be able to easily configure the plugin. Sam&amp;#8217;s was using constants that would need to be changed when it hit production.&lt;/p&gt;

&lt;p&gt;So, with all that said and done I took Sam&amp;#8217;s great work, ripped it apart, and put it back together again, this time in gem form instead of a plugin, and here it is.&lt;/p&gt;

&lt;p&gt;There are a few migrations, a few models, and a few Rake tasks, but here is the basic idea of how it works:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/154516.js&#39; /&gt;
&lt;p&gt;To get a better understanding of exactly how it works, and what it does, I highly recommend reading the &lt;a href=&#39;http://apnonrails.metabates.com/&#39;&gt;RDOC&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are a few things I still would like to add, for example, a controller to do CRUD for devices so iPhones can register with the Rails app. I&amp;#8217;d also like to add a task that talks to Apple and finds out which devices are no longer accepting messages so they can be removed.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;d like to contribute, please feel free and for the project on GitHub: &lt;a href=&#39;http://github.com/markbates/apn_on_rails/tree&#39;&gt;http://github.com/markbates/apn_on_rails/tree&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, a special thanks to Fabien Penso and Sam Soffes for their initial work on this project.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Becoming a Recording, sorry I meant Software, Engineer</title>
   <link href="http://www.metabates.com/2009/07/12/becoming-a-recording-sorry-i-meant-software-engineer"/>
   <updated>2009-07-12T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/07/12/becoming-a-recording-sorry-i-meant-software-engineer</id>
   <content type="html">&lt;p&gt;Recently I was sent a survey from the college I attended, the &lt;a href=&#39;http://www.lipa.ac.uk&#39;&gt;Liverpool Institute for the Performing Arts&lt;/a&gt;. In the survey I was asked a question about what I&amp;#8217;ve done in the field of music, that&amp;#8217;s what my degree is in, since I&amp;#8217;ve graduated. I typed up a rather long winded answer to the question and afterwards I thought it was actually thought it was an interesting commentary on the recording industry. It also shows the path a guy like me takes from being a musician to being a software engineer.&lt;/p&gt;

&lt;p&gt;Anyway, I thought I would share this little story with you all. I hope you enjoy it.&lt;/p&gt;

&lt;p&gt;About 3 – 4 after graduating I found myself unemployed and decided that I would take that opportunity and try to pursue a career as a recording engineer. I spent two years struggling and working very hard at one of the best studios around and I found that things were just not working out.&lt;/p&gt;

&lt;p&gt;I don’t necessarily think it was a problem of my not having the skills needed for the job, but rather it had to do with several other factors. One, because of the state of the recording industry ‘proper’ studios are/were struggling to find work because more and more musicians are doing recording at home on their computers. While their results might not be as ‘high quality’ as those of the studios, the musicians are/were finding that it was good enough to help land them gigs in town.&lt;/p&gt;

&lt;p&gt;Because the studio was struggling, and I was the lowest guy on the totem pole, because I was the ‘newest’, I found that I was only getting a few sessions each month, that compared with the ‘top’ engineers who were only getting a week or two worth of work each month.&lt;/p&gt;

&lt;p&gt;It was at this point that I sat down and re-evaluated what I wanted most in life. I decided that was really important to me was to have a family and be happy with what I was doing, and to just generally enjoy my life. Realizing that, I had to decide if my current situation was really going to work for me. While I thoroughly enjoyed being a recording engineer, when I got to do it that is, I found the pay ($90 a day - awful!), the hours (usually 12-14 hours), and the lack of sessions to not be a viable way to raise a family.&lt;/p&gt;

&lt;p&gt;Once I decided that being a recording engineer wasn’t going to work for me, I needed to find something that would. I thought long and hard about this, as well, and realized that I really enjoyed being a software engineer. It is strangely creative, the pay is very good, and I was damn good at it.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The Evolving Table of Contents</title>
   <link href="http://www.metabates.com/2009/06/20/the-evolving-table-of-contents"/>
   <updated>2009-06-20T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/06/20/the-evolving-table-of-contents</id>
   <content type="html">&lt;p&gt;For those of you who have checked out the Rough Cuts version of my book, &amp;#8220;Distributed Programming with Ruby&amp;#8221;, I thought you would like to get a peek into how the Table of Contents is going to change shortly. For those of you who haven&amp;#8217;t seen the old Table of Contents, or are just plain old interested to see what&amp;#8217;s going to be in the book, or to see how far along with the book I am, here is the current Table of Contents as of tonight:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/133394.js&#39; /&gt;
&lt;p&gt;As you can see it has evolved quite a bit from what was posted on Rough Cuts just about a month ago. Chances are that it will probably change again, and as it does, I&amp;#8217;ll try and keep you all posted. There is talk of adding a large chapter at the end that takes a handful of the technologies I discuss in the book and use them to build a &amp;#8220;real world&amp;#8221; example application, like a Twitter clone, or something like that. If anyone has any good ideas on what they would like to see for this example, please them my way, I&amp;#8217;d love to hear them.&lt;/p&gt;

&lt;p&gt;If there are no sections listed below a particular chapter that means that I have either not written it yet, or I&amp;#8217;m still too early in that chapter&amp;#8217;s development to have properly assigned it actual sections.&lt;/p&gt;

&lt;p&gt;The first draft of the book is slated for the end of July. So there is still a lot of work to be done, but it&amp;#8217;s still rather exciting. Well, it&amp;#8217;s exciting for me at least. Talk to you all soon.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Cachetastic 3.0.0 Released</title>
   <link href="http://www.metabates.com/2009/06/18/cachetastic-3-0-0-released"/>
   <updated>2009-06-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/06/18/cachetastic-3-0-0-released</id>
   <content type="html">&lt;p&gt;After more than two years powering production level applications I found that Cachetastic was starting to get a bit long in the tooth. I felt that there was a lot I could to make Cachetastic an even better library than it already was. I thought that I had added a bunch of cruft to the framework that people were just not using and maintaining it all seemed like a bit of a pointless chore.&lt;/p&gt;

&lt;p&gt;So what was I unhappy about? &lt;h3&gt;Configuration:&lt;/h3&gt; I was pretty unhappy with the way configuration was being done. I liked using Configatron to power the configuration, but I didn&amp;#8217;t like the way I implemented the way I was using Configatron. For example, to set up one of the default settings, like the expiry time, you would configure it like such: &lt;pre&gt;configatron.cachetastic_default_options.expiry_time = 30.minutes&lt;/pre&gt; Now you would configure that same option like this: &lt;pre&gt;configatron.cachetastic.defaults.expiry_time = 30.minutes&lt;/pre&gt; That&amp;#8217;s a little savings, but it really hits when you want to configure a particular cache. Let&amp;#8217;s say we a cache called My::Super::AwesomeCache, to configure it in past versions of Cachetastic we would do this: &lt;pre&gt;configatron.my_super_awesome_cache_options.expiry_time = 15.minutes&lt;/pre&gt; Now in Cachetastic 3.0.0 we configure like this: &lt;pre&gt;configatron.cachetastic.my.super.awesome_cache.expire_time = 15.minutes.&lt;/pre&gt; As you can see all configuration now happens under the cachetastic namespace in Configatron. Then it&amp;#8217;s a matter of using a Configatron namespace for each of your modules. I find it a lot easier to manage.&lt;/p&gt;

&lt;p&gt;Another change in configuration is that in previous versions if you wanted to override one default configuration value for a particular cache,  you had to override them all. Now, you can just override the one value  you want, and the rest will be nicely inherited from the defaults. &lt;h3&gt;Speed&lt;/h3&gt; Cachetastic has always been a very fast library, but I knew that more could be squeezed from that stone. With Cachetastic 3.0.0 you now get a hefty 25% improvement in the Memcached adapter and a whopping 99% in the LocalMemory adapter! Those are pretty awesome numbers. These numbers were easy to achieve when I stepped back and examined what it was I really wanted to do, and picked the most straightforward path to that goal. &lt;h3&gt;Bloat&lt;/h3&gt; After more than two years Cachetastic was starting to suffer from a severe case of bloat. For example, I&amp;#8217;ve never used the DRb adapter, have you? So why is it there? The same goes for the HtmlFile adapter. I wrote that because at my last job the operations team weren&amp;#8217;t savvy  enough to be able to get Apache to talk to Memcached, so they wanted to serve HTML files, hence the rather awful adapter. Both of those adapters are now history.&lt;/p&gt;

&lt;p&gt;There also used to be support for Rails Session Caching. Considering that most people are now using the Cookie store for sessions, there really is no need for this cache. It could also be argued that it should not have been bundled with Cachetastic at all. I would agree with those arguments. Cachetastic is, and should always be, a standalone caching framework, that can be plugged into Rails or any plain old Ruby project that needs caching support.&lt;/p&gt;

&lt;p&gt;Also purged is automatic support for mixing in the Cachetastic::Cacheable module into ActiveRecord. If you want this functionality, it is very easy to include in your application. I don&amp;#8217;t want to force it on anyone, so that is gone now.&lt;/p&gt;

&lt;p&gt;Finally there are a handful of smaller features that I&amp;#8217;m sure no one will miss that I&amp;#8217;ve yanked out in the name of performance, reliability, and ease of maintenance. &lt;h3&gt;Nice and Clean&lt;/h3&gt; When I realized what I really wanted, and what I didn&amp;#8217;t want, it became clear that what was needed was a fresh code base. With that said, I hit delete (well, not really) and started over again. The code is now smooth, so much easier to read, and fast. In previous versions even my eyes went a bit crossed when I tried to figure out exactly what was going on. There where quite a few levels of indirection, and things just weren&amp;#8217;t place where they probably should&amp;#8217;ve been. That has all been fixed.&lt;/p&gt;

&lt;p&gt;With a nice, clean code base comes a brand new set of tests. The tests are now extremely comprehensive, and while 2.x was very well tested, I know that 3.0.0, is tested to the hilt.&lt;/p&gt;

&lt;p&gt;Because 3.0.0 is a brand new code base, I should probably stress the fact that is &lt;strong&gt;NOT&lt;/strong&gt; backward compatible. So please be advised. &lt;h3&gt;Installation:&lt;/h3&gt; &lt;pre&gt;$ sudo gem install cachetastic&lt;/pre&gt; &lt;h3&gt;Conclusion&lt;/h3&gt; I really hope everyone likes this brand new version of Cachetastic. I&amp;#8217;m very happy with it, and I think if you give it a chance, you will be too.&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;d like to have a peek at the RDoc, it can be found at: &lt;a href=&#39;http://cachetastic-api.mackframework.com/&#39;&gt;http://cachetastic-api.mackframework.com/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Distributed Programming with Ruby Book Update</title>
   <link href="http://www.metabates.com/2009/05/22/distributed-programming-with-ruby-book-update"/>
   <updated>2009-05-22T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/05/22/distributed-programming-with-ruby-book-update</id>
   <content type="html">&lt;p&gt;Hey there folks, I know it&amp;#8217;s been awhile, so I thought I would give you all a very quick update as to how the book is going. It&amp;#8217;s going really well. I&amp;#8217;m about 100 pages into it, and it&amp;#8217;s shaping up very nicely. Addison-Wesley is preparing to put it into their &amp;#8220;Rough Cuts&amp;#8221; program so you can all get your dirty little hands on what I&amp;#8217;ve written so far as early as a few weeks from now, or so I&amp;#8217;m told.&lt;/p&gt;

&lt;p&gt;While I don&amp;#8217;t want to give too much away about the contents, everybody loves a good surprise, let me say that part one of the book will be the most comprehensive guide to DRb and Rinda that you&amp;#8217;ll find anywhere. Including the source code!!&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m working hard on part two of the book which focuses on third party tools, frameworks, and libraries. It&amp;#8217;s quite a fun part of the book to write as there are a great deal of choices out there, including my own Distribunaut. (PS. I released a new version of it on GitHub a week or so ago.) Writing about different libraries is quite fun as I get to really delve into the source code and see the good and bad ways people like to write code. Plus some of the libraries have really great features, or really turn things on their head.&lt;/p&gt;

&lt;p&gt;When the book is available as a &amp;#8220;Rough Cut&amp;#8221;, I&amp;#8217;ll certainly keep you all informed. In the mean time keep watching this space and have a great weekend!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Distribunaut</title>
   <link href="http://www.metabates.com/2009/04/05/distribunaut"/>
   <updated>2009-04-05T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2009/04/05/distribunaut</id>
   <content type="html">&lt;p&gt;Hey there everyone, it certainly has been awhile, a month by my count. I have been diligently working on a book for Addison-Wesley called, &amp;#8220;Distributed Programming with Ruby&amp;#8221;, so having the time to blog went from a luxury to almost non-existent. But here&amp;#8217;s another little post to keep your RSS feeds happy.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve started working on porting the mack-distributed package to the non-Mack world. This new project, and I use the term new loosely for the time being, is tentatively called Distribunaut. The project on GitHub can be found here: &lt;a href=&#39;http://github.com/markbates/distribunaut/tree/master&#39;&gt;http://github.com/markbates/distribunaut/tree/master&lt;/a&gt;. It&amp;#8217;s pretty rough right now. I&amp;#8217;ve ported over the distributed objects section of mack-distributed, but not the views and routes.&lt;/p&gt;

&lt;p&gt;You can install the gem like such:&lt;/p&gt;
&lt;code&gt;$ gem sources -a http://gems.github.com
$ sudo gem install markbates-distribunaut&lt;/code&gt;
&lt;p&gt;To use Distribunaut we first need to start a Rinda::RingServer. Distribunaut comes with a binary to help make this easier:&lt;/p&gt;
&lt;code&gt;$ distribunaut_ring_server start&lt;/code&gt;
&lt;p&gt;Once we&amp;#8217;ve done that we can create an object we would like to share:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/90620.js&#39; /&gt;
&lt;p&gt;When we run that we can access it like such:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/90621.js&#39; /&gt;
&lt;p&gt;That would result in the following being printed out by our &amp;#8216;client&amp;#8217; code:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/90622.js&#39; /&gt;
&lt;p&gt;On our &amp;#8216;server&amp;#8217; side we would see something like this:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/90623.js&#39; /&gt;
&lt;p&gt;This is, clearly, a very simple example, but it shows you how easy it is to use Distribunaut. We haven&amp;#8217;t done any real configuration, and things just magically work!&lt;/p&gt;

&lt;p&gt;Over the next couple of months I&amp;#8217;ll be extending and rebuilding this library to make it even more powerful and easy to use. I&amp;#8217;m going to add fault tolerance, selection algorithms, and whole lot more. The API you see in these examples will most likely remain unchanged, but I&amp;#8217;m planning on pretty big under the cover changes.There will be a very in-depth look into all of this in the book, obviously. (Shameless plug, I know.)&lt;/p&gt;

&lt;p&gt;If anybody out there wants to contribute to this project, I&amp;#8217;d love the help. Any sort of feedback is welcome.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Thank you.</title>
   <link href="http://www.metabates.com/2009/03/04/thank-you"/>
   <updated>2009-03-04T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/03/04/thank-you</id>
   <content type="html">&lt;p&gt;It is with a sad and heavy heart that this evening I announce that I will no longer be developing the Mack Framework. The project, started a year ago, and has been source of great pride, joy, and at times frustation. Of all the projects I have ever worked on, this one was definitely closest to my heart.&lt;/p&gt;

&lt;p&gt;The decision to stop working on Mack was something I did not take lightly. If I had my druthers, and plenty of free time and a source of funding, I most certainly would continue on working on it. However, reality has a different way of plenty out.&lt;/p&gt;

&lt;p&gt;When I first started developing Mack the company I was working for at the time was frustrated with the pains and shortcomings of Rails. It was the right platform for the company when we started, however, two years in a start up is a life time and the company took many twists and turns, that lead us to the path of seeking an alternative platform to Rails. At the time Merb was not a serious contender, and there was little else out there that was looking to satisfy the needs we had. Enter Mack. I spent nearly 10 months developing Mack for that company. We rolled out several Mack applications. It worked really well for what we wanted it to do.&lt;/p&gt;

&lt;p&gt;Again, however, reality came into play. The company was forced to lay off nearly 50% of its staff, and I was one of them. I quickly took a position as the Director of Engineering for another startup in Boston. This shop, too, is a Rails shop. The difference between the two companies is that for the company I work for now Rails is the right solution. This means that I am spending my days working with Rails, and not developing Mack.&lt;/p&gt;

&lt;p&gt;At night and on the weekends I like to spend time with my wife and my son. I play in a band, &lt;a href=&#39;http://www.thebluewires.com&#39;&gt;www.thebluewires.com&lt;/a&gt;, and I am working on a book for Addison-Wesley entitled, &amp;#8220;Distributed Programming with Ruby&amp;#8221;. I&amp;#8217;m a busy man, and Mack is a big project. You can&amp;#8217;t successfully write a web framework part time. Especially when that part time is really more like part-part time. You need to be able to put dedicated full time resources onto a project of that scale, and I just don&amp;#8217;t have the time to do it.&lt;/p&gt;

&lt;p&gt;Would I love to see the project continue? Certainly. If there is someone out there who wants to take it on, please let me know. I would love to see it grow. There is so much I wanted to do with it. So many great ideas.&lt;/p&gt;

&lt;p&gt;Now, for the good news, I am planning to port a bunch of the Mack functionality over to the Rails 3 platform. The obvious one being the mack-distributed package which is a key differentiator between Mack and the other Ruby frameworks. Another package I think worthy of migration is mack-notifier, which provides, in my opinion, a really nice clean API for doing notifications, whether they be email, Jabber, SMS, etc&amp;#8230; I also really like the mack-data_factory package. It provides an ORM agnostic way to do great data factories for testing. Finally there are some routing improvements that I think Rails could really benefit from, as well as a few other bits and bobs here and there.&lt;/p&gt;

&lt;p&gt;I wish to thank everyone who has supported this project over the year. A few key people I think that deserve a special call out are: Darsono Sutedja (the second biggest contributed to Mack), Gerardo Pis-Lopez (the third biggest contributor), and Greg Arsenault (my previous boss who fought for me to develop Mack). If there was such a thing as the Mack Core Team, those guys would be it. I would also like to thank people like Peter Cooper, Gregg Pollack, Adam French, Dan Kubb, and everyone else who either opened a Lighthouse ticket, submitted a patch, wrote a blog entry about Mack, or who was just there for support and guidance over the past year.&lt;/p&gt;

&lt;p&gt;I am going to keep www.mackframework.com around as a forum for my other projects, such as Cachetastic and Configatron, and the other projects I have brewing. Expect some cool new projects out of me in 2009, include some iPhone projects that I&amp;#8217;m excited about undertaking. I will be releasing the last version of Mack by the end of the month. It will essentially be a few bug fixes, an upgrade of DataMapper, and Sass support.&lt;/p&gt;

&lt;p&gt;To summarize, thank you everyone. I appreciate your support and I look forward to contributing to the community in new and exciting ways.&lt;/p&gt;

&lt;p&gt;Thank you.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.8.3</title>
   <link href="http://www.metabates.com/2009/01/18/release-083"/>
   <updated>2009-01-18T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/01/18/release-083</id>
   <content type="html">&lt;p&gt;Thanks to the cold and snowy New England winter this year, I&amp;#8217;ve been able to devote quite a bit of time to getting Mack to run on Ruby 1.9, so with that said, here&amp;#8217;s the 0.8.3 release of Mack, featuring&amp;#8230; TADA&amp;#8230; Ruby 1.9!! Of course there are a few other features and improvements in this release. Here&amp;#8217;s a quick run down: &lt;h3&gt;Ruby 1.9&lt;/h3&gt; The big one. Mack runs very well on Ruby 1.9, unfortunately I can&amp;#8217;t say the same thing about some other frameworks. I&amp;#8217;ve had some run ins with DataMapper on 1.9, but I&amp;#8217;m sure those will be ironed out shortly.&lt;/p&gt;

&lt;p&gt;A few weeks ago I announced I was working on getting Ruby 1.9 support for all my gems and libraries. I started out with Configatron, then upgraded Cachetastic and Genosaurus. Now Mack is 1.9 compatible. When I made the announcement the guys at RailsEnvy picked up on it and said that I made a call to arms to the community to pick up 1.9 support. Now granted, I didn&amp;#8217;t actually say those words, but I think the intent was there, so I&amp;#8217;m going to now officially say those words. This is a &amp;#8216;call to arms&amp;#8217; to the Ruby community to upgrade their gems, plugins, libraries, frameworks, etc&amp;#8230; to work on Ruby 1.9. I&amp;#8217;ve done it, and I can tell you, it&amp;#8217;s not that tough. Just use multiruby, and you&amp;#8217;re off and running. &lt;h3&gt;ActiveSupport In, Facets Out&lt;/h3&gt; What with the world getting smaller these days, well, at least the world of Ruby web frameworks. A lot of great work is going into refactoring ActiveSupport and making it faster, better, and smaller. Because of that and the fact that every time a new release of Facets comes out it breaks a whole lot of stuff, I&amp;#8217;ve decided to use ActiveSupport as the basis of the mack-facets gem. So basically mack-facets is just ActiveSupport with a few more enhancements. &lt;h3&gt;JavaScript Effects&lt;/h3&gt; Thanks to the tireless efforts of Gerardo Pis-Lopez, mack-javascript, has been upgraded to add helpers methods for effects for both Prototype/Scriptaculous and jQuery. Thank you to Gerardo for the much needed upgraded to mack-javascript. &lt;h3&gt;Upgrades&lt;/h3&gt; Mack has been upgraded to use Rack 0.9.1, DataMapper 0.9.9, and a few other smaller gems.&lt;/p&gt;

&lt;p&gt;Changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;243 - Upgraded to Rack 0.9.1&lt;/li&gt;

&lt;li&gt;242 - Upgraded to DataMapper 0.9.9&lt;/li&gt;

&lt;li&gt;241 - Removed dependency on Facets&lt;/li&gt;

&lt;li&gt;239 - Add do_sqlite3 to gems.rb&lt;/li&gt;

&lt;li&gt;166 - Effects for mack-javascript&lt;/li&gt;

&lt;li&gt;133 - Added Form Builders&lt;/li&gt;

&lt;li&gt;22 - Ruby 1.9 Support&lt;/li&gt;

&lt;li&gt;gem: rack 0.9.1&lt;/li&gt;

&lt;li&gt;gem: rspec 1.1.12&lt;/li&gt;

&lt;li&gt;gem: configatron 2.2.2&lt;/li&gt;

&lt;li&gt;gem: cachetastic 2.1.2&lt;/li&gt;

&lt;li&gt;gem: data_mapper 0.9.9&lt;/li&gt;

&lt;li&gt;gem: addressable 2.0.1&lt;/li&gt;

&lt;li&gt;gem: extlib 0.9.9&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 2.2.0 Released, now with Ruby 1.9 and JRuby support!</title>
   <link href="http://www.metabates.com/2009/01/01/configatron-220-released-now-with-ruby-19-and-jruby-support"/>
   <updated>2009-01-01T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2009/01/01/configatron-220-released-now-with-ruby-19-and-jruby-support</id>
   <content type="html">&lt;p&gt;Happy New Year everyone!&lt;/p&gt;

&lt;p&gt;With the help of the absolutely amazing &lt;a href=&#39;http://blog.robseaman.com/2008/12/20/switching-between-ruby-1-8-1-9-with-multiruby&#39;&gt;multiruby&lt;/a&gt; library and an edge version of rspec from GitHub, the latest version of Configatron now supports JRuby 1.1.6 and Ruby 1.9.1rc1. There are no other functional changes to the library, so it&amp;#8217;s a full drop in replacement for vesion 2.1.6.&lt;/p&gt;

&lt;p&gt;I highly encourage everyone to checkout multiruby and start upgrading their libraries so we can all move to 1.9 quicker, which means more speed and more power. Once we&amp;#8217;re all in 1.9 land we can really make use of some of the amazing features it provides.&lt;/p&gt;

&lt;p&gt;Anyway, I&amp;#8217;ll be working on upgrading all my libraries and applications to work on 1.8 and 1.9, and hopefully JRuby, over the next couple of months. So be on the look out for a new versions of Cachetastic, Genosaurus [update: Genosaurus already works with 1.9 and JRuby. Hoorah!], and, of course, Mack.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Merb + Rails3 = Rarb?</title>
   <link href="http://www.metabates.com/2008/12/23/merb-rails3-rarb"/>
   <updated>2008-12-23T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/12/23/merb-rails3-rarb</id>
   <content type="html">&lt;p&gt;For all those of you who have missed it, today it was announced that Merb will be discontinued and merged into Rails 3 sometime by the end of next year:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3&#39;&gt;http://weblog.rubyonrails.org/2008/12/23/merb-gets-merged-into-rails-3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What does this mean for Mack and other alternate frameworks? Well a lot, and nothing, all at the same time. I personally, am not pro the merge. Merb was the biggest the alternative to Rails out there. This has been a problem for us smaller frameworks in that it was hard to get a fold hold into the alternative to Rails marketshare that Merb had a hold on. So with Merb going away, why aren&amp;#8217;t happy that Mack has the opportunity to become the big alternative to Rails?&lt;/p&gt;

&lt;p&gt;Well, the answer to that question is simple. Innovation and competition. With Merb becoming as big as it was becoming it was forcing Rails to become a better framework. It also made the other alternative frameworks, such as Mack, to be better frameworks as well. Mack has always strived to be a great hybrid of all the frameworks out there. It has strived to provide the best of all those worlds. If all those worlds merge together, what space is left for something like Mack? Mack, and others, could end up being no different than Rarb (Rails + Merb), and then where is the innovation?&lt;/p&gt;

&lt;p&gt;If this was the two biggest cable companies or banks merging the government would be screaming monoply. While I&amp;#8217;m not saying that, I do feel that this certainly will have an impact on innovation, an impact that only a good healthy competition can bring. Now, please don&amp;#8217;t get me wrong, I think Rarb will definitely be innovative. It should be as both Rails and Merb independently have done some amazing things, and I hope that they continue to do so.&lt;/p&gt;

&lt;p&gt;So what does the future hold for Mack with this news? Business as usual. Mack will continue to try and be innovative. It will try to make your life a little easier as a developer, and make developing portals and distributed applications easy and fun. Hopefully, Mack will fill the void that will be left by Merb and more people will pick it up as a mature web framework. Hopefully, that will do what Merb once did, force Rails (or rather Rarb), to be more innovative. Hopefully, it will become the alternative that will create another web framework to be innovate to knock it down, and so on&amp;#8230;&lt;/p&gt;

&lt;p&gt;How do you feel? Are you happy? Are you sad? Are you indifferent? I&amp;#8217;d love to hear what you think.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.8.2</title>
   <link href="http://www.metabates.com/2008/11/30/release-082"/>
   <updated>2008-11-30T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/11/30/release-082</id>
   <content type="html">&lt;p&gt;Hey there folks, sorry for the long wait for this release, but it&amp;#8217;s here. It&amp;#8217;s been a long November for yours truly. I&amp;#8217;ve had to find a new job. I&amp;#8217;ve had pneumonia. We, at least in America, have celebrated Thanksgiving. And, of course, who can forget RubyConf 2008?&lt;/p&gt;

&lt;p&gt;So with that said, what&amp;#8217;s in 0.8.2? Honestly, not a whole lot. There are a couple of bug fixes, a button_to_remote (think submit_to_remote in Rails) helper, and deferred routes. More on deferred routes in a moment, as it&amp;#8217;s actually a pretty cool feature that only Mack and Merb share. And finally there is bundled gems. &lt;h3&gt;Bundled Gems&lt;/h3&gt; What do I mean I say &amp;#8216;bundled gems&amp;#8217;? Well, because of the rather large number of gems that get installed with Mack, and because of some gem version dependency issues, Mack is now bundling it&amp;#8217;s third party dependency gems inside itself. For example, mack-facets used to rely on the gems &amp;#8216;facets&amp;#8217; and &amp;#8216;english&amp;#8217;. Those gems are now bundled inside the mack-facets gem and now longer need to be downloaded and installed by end users. This should make installing Mack super easy. It should also make dealing with having multiple versions of Mack installed on your system easier to deal with and maintain. &lt;h3&gt;Deferred? Routes&lt;/h3&gt; So what are deferred routes? Ezra wrote a really great write up back in &lt;a href=&#39;http://brainspl.at/articles/2008/04/18/deferred-requests-with-merb-ebb-and-thin&#39;&gt;April&lt;/a&gt;. The idea is simple, with newer web servers such as Thin and Ebb, you can tell them to spawn a new thread to handle particular requests, such as long running processes like file uploads. This can really help speed things up as server can process regular requests using an event machine model, which is very fast, but can be really slow and block the server for longer processes. Now those processes can spawn into their own threads and not block the server.&lt;/p&gt;

&lt;p&gt;In Mack 0.8.2 you can mark your routes with a deferred? =&amp;#62; true option which will trigger this behavior. It&amp;#8217;s much more advanced than the similar feature that can be found in Merb, which requires a separate configuration for your deferred actions, and the urls have to be &amp;#8216;hard coded&amp;#8217;. Mack let&amp;#8217;s you use all the dynamic power of your routes, like you would want to. It&amp;#8217;s just another option on the route itself. For a great tutorial on using deferred routes, check out the following page on www.mackery.com:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackery.com/routing/deferred_routes&#39;&gt;http://www.mackery.com/routing/deferred_routes&lt;/a&gt; &lt;h3&gt;Upgraded Dependencies&lt;/h3&gt; A few gems have been upgraded as part of this release, the big ones include DataMapper to 0.9.7, ActiveRecord to 2.2.2, and Haml to 2.0.4.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;\[#237\] Fixed render :rjs throws errors&lt;/li&gt;
	&lt;li&gt;\[#236\] Upgraded to ActiveRecord 2.2.2&lt;/li&gt;
	&lt;li&gt;\[#235\] Upgraded to DataMapper 0.9.7&lt;/li&gt;
	&lt;li&gt;\[#230\] Upgraded to facets 2.4.5&lt;/li&gt;
	&lt;li&gt;\[#229\] Upgraded to english 0.3.1&lt;/li&gt;
	&lt;li&gt;\[#227\] Removed WEBrick logging&lt;/li&gt;
	&lt;li&gt;\[#226\] Bundled gems.&lt;/li&gt;
	&lt;li&gt;\[#225\] Removed dependency on Thin&lt;/li&gt;
	&lt;li&gt;\[#223\] Fixed mackery console fails&lt;/li&gt;
	&lt;li&gt;\[#148\] Added button_to_remote helper method.&lt;/li&gt;
	&lt;li&gt;\[#16\] Added deferred? routes.&lt;/li&gt;
	&lt;li&gt;gem: active_record 2.2.2&lt;/li&gt;
	&lt;li&gt;gem: data_mapper 0.9.7&lt;/li&gt;
	&lt;li&gt;gem: addressable 2.0.0&lt;/li&gt;
	&lt;li&gt;gem: facets 2.4.5&lt;/li&gt;
	&lt;li&gt;gem: english 0.3.1&lt;/li&gt;
	&lt;li&gt;gem: rspec 1.1.11&lt;/li&gt;
	&lt;li&gt;gem: haml 2.0.4&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Building Distributed Applications from RubyConf 2008</title>
   <link href="http://www.metabates.com/2008/11/29/building-distributed-applications-from-rubyconf-2008"/>
   <updated>2008-11-29T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/11/29/building-distributed-applications-from-rubyconf-2008</id>
   <content type="html">&lt;p&gt;Confreaks has recently published the videos of all the presentations from this year&amp;#8221;s RubyConf, including the presentation yours truly did on &amp;#8216;Building Distributed Applications&amp;#8217;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://rubyconf2008.confreaks.com/building-distributed-applications.html&#39;&gt;http://rubyconf2008.confreaks.com/building-distributed-applications.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There are plenty of other great talks on the site, so sit back, make some popcorn, and enjoy some of the wonderful talks that were on offer down in Florida this year.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 2.1.6 Released!</title>
   <link href="http://www.metabates.com/2008/11/21/configatron-216-released"/>
   <updated>2008-11-21T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/11/21/configatron-216-released</id>
   <content type="html">&lt;p&gt;Thanks to Matthew A. Brown for his contribution to the Configatron library. He added the ability to &amp;#8216;lock&amp;#8217; down a namespace. Configatron has had a &lt;code&gt;protect&lt;/code&gt; method for a while, but that only locks down a specific configuration. With &lt;code&gt;lock&lt;/code&gt; you can lock down the whole namespace and prevent everything in that namespace from being altered. Maybe some code will help you understand:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/27705.js&#39; /&gt;
&lt;p&gt;When you get a chance checkout Mat&amp;#8217;s Github page, &lt;a href=&#39;http://github.com/outoftime&#39;&gt;http://github.com/outoftime&lt;/a&gt;. Thank you very much Mat for your contribution.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>How to use a non-singleton version of Configatron</title>
   <link href="http://www.metabates.com/2008/11/20/how-to-use-a-non-singleton-version-of-configatron"/>
   <updated>2008-11-20T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/11/20/how-to-use-a-non-singleton-version-of-configatron</id>
   <content type="html">&lt;p&gt;Since Configatron has come out it&amp;#8217;s become a pretty popular library, and because of that I&amp;#8217;ve received several feature requests. Nothing wrong with that. I actually welcome that, because, let&amp;#8217;s be honest, that&amp;#8217;s how configatron will become even better.&lt;/p&gt;

&lt;p&gt;The biggest request I&amp;#8217;ve received is from people who want to use Configatron, but they want their own instance of it, and not the global singleton instance of it. Although, I personally don&amp;#8217;t see why you would need that, I&amp;#8217;m a big enough man to understand that just because I don&amp;#8217;t need it, doesn&amp;#8217;t mean others don&amp;#8217;t.&lt;/p&gt;

&lt;p&gt;Last night I was reviewing the code, because I was asked this question again, and in doing so I realized that power has been there all along. It&amp;#8217;s actually very simple. When you make a call on &lt;code&gt;Kernel#configatron&lt;/code&gt; it returns a singleton of the &lt;code&gt;Configatron&lt;/code&gt; class, but after that all it does is return an instance of the &lt;code&gt;Configatron::Store&lt;/code&gt; class. So if you want your own instance of Configatron, what you really want is an instance of the &lt;code&gt;Configatron::Store&lt;/code&gt; class, which you can do like so:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/27027.js&#39; /&gt;
&lt;p&gt;Well, there you go, I hope that helps. Enjoy.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.8.1</title>
   <link href="http://www.metabates.com/2008/10/26/release-081"/>
   <updated>2008-10-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/10/26/release-081</id>
   <content type="html">&lt;p&gt;I know with each release I say how excited I am by this release, but that&amp;#8217;s usually because with each release there&amp;#8217;s some great new feature that makes me either proud to have developed it, or to proud to be associated with it. Mack 0.8.1 is definitely no exception.&lt;/p&gt;

&lt;p&gt;Before I get into what has to be my favorite feature since the distributed features of 0.7.0, and quite possibly my favorite feature in Mack today, let&amp;#8217;s talk about a few of the other features in this release. &lt;h3&gt;More Routing Enhancements&lt;/h3&gt; There are a few great new features in the routing system in this release. The first off is a real crowd favorite, Nested Resources. Just like Rails you can now nest resources in Mack.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackery.com/routing/nested_resources&#39;&gt;http://www.mackery.com/routing/nested_resources&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Mack 0.8.0 we introduced the ability to put host information in the routes file. This would be used to match the host when matching a route as well as building the url for that route when using the url helpers. This made dealing with subdomains very easier. Well, to really give everyone that subdomain fu everybody loves, we&amp;#8217;ve added the ability to put embedded parameters in the host parameter in routes. It&amp;#8217;s pretty dang cool, let me tell you. Checkout these examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackery.com/routing/misc&#39;&gt;http://www.mackery.com/routing/misc&lt;/a&gt; &lt;h3&gt;Pagination API&lt;/h3&gt; There is now a pagination API that&amp;#8217;s part of the mack-orm API. The first implementation of this in the mack-data_mapper package. At its heart it&amp;#8217;s extremely easily to implement for new ORMs, one method, and using it is just as easy. There will be a write up on using the API in the forth coming days. &lt;h3&gt;Jabber Support&lt;/h3&gt; The mack-notifier package can now send notifications using the Jabber protocol. &lt;h2&gt;!!Portlets!!&lt;/h2&gt; Portlets are what components in Rails should&amp;#8217;ve been and they&amp;#8217;re what slices in Merb should be. Portlets are a way off packaging a full Mack application into a Ruby Gem so they can easily be shared and used in other Mack applications. As you&amp;#8217;re about to see, this simple page is all the information you need to know about developing, testing, packaging, and using Portlets.&lt;/p&gt;

&lt;p&gt;Portlets encapsulate a whole Mack application, from controllers to views to models to configuration settings to your images, stylesheets and javascripts. This makes it possible to develop extremely rich applications and share them with other Mack applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackery.com/portlets/developing&#39;&gt;http://www.mackery.com/portlets/developing&lt;/a&gt; &lt;a href=&#39;http://www.mackery.com/portlets/testing&#39;&gt;http://www.mackery.com/portlets/testing&lt;/a&gt; &lt;a href=&#39;http://www.mackery.com/portlets/packaging&#39;&gt;http://www.mackery.com/portlets/packaging&lt;/a&gt; &lt;a href=&#39;http://www.mackery.com/portlets/using&#39;&gt;http://www.mackery.com/portlets/using&lt;/a&gt; &lt;h3&gt;Bug Fixes and Minor Feature Updates&lt;/h3&gt; As always there are great bug fixes and feature updates. Below is the changelog that outlines those improvements.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;\[#217\] Fixed rake mack:dump:routes throws errors&lt;/li&gt;
	&lt;li&gt;\[#216\] Added ability to turn off view caching in distributed app&lt;/li&gt;
	&lt;li&gt;\[#215\] Asset path lookup flow update&lt;/li&gt;
	&lt;li&gt;\[#213\] Fixed the params method should be case insensitive&lt;/li&gt;
	&lt;li&gt;\[#211\] Added a pagination API to mack-data_mapper&lt;/li&gt;
	&lt;li&gt;\[#210\] Added a pagination API to mack-orm&lt;/li&gt;
	&lt;li&gt;\[#209\] inline form built by link_to should include authenticity token&lt;/li&gt;
	&lt;li&gt;\[#208\] Added support for DataMapper repository context per request&lt;/li&gt;
	&lt;li&gt;\[#207\] Fixed session cookie not being deleted properly&lt;/li&gt;
	&lt;li&gt;\[#206\] Portlet now have access to its base_path&lt;/li&gt;
	&lt;li&gt;\[#205\] Fixed testing of nested parameters and file uploads breaks&lt;/li&gt;
	&lt;li&gt;\[#204\] Resource routes can now take options when being defined.&lt;/li&gt;
	&lt;li&gt;\[#203\] Updated distributed: view_cache to include Mack::ViewHelpers instead of Mack::ViewHelpers::LinkHelpers&lt;/li&gt;
	&lt;li&gt;\[#200\] INCOMPATIBILITY NOTICE: mack-notifier configatron namespaces have changed from *_settings to * (e.g. smtp_settings to smtp)&lt;/li&gt;
	&lt;li&gt;\[#198\] Added Embedded parameters in &#39;host&#39; for Routes&lt;/li&gt;
	&lt;li&gt;\[#196\] Extlib 0.9.8 support&lt;/li&gt;
	&lt;li&gt;\[#195\] DataMapper 0.9.6 support&lt;/li&gt;
	&lt;li&gt;\[#193\] Portlet Support&lt;/li&gt;
	&lt;li&gt;\[#192\] mack-localization now supports portlet&lt;/li&gt;
	&lt;li&gt;\[#191\] Asset-Packager support for Portlet&lt;/li&gt;
	&lt;li&gt;\[#143\] Nested resources in Routes&lt;/li&gt;
	&lt;li&gt;\[#134\] Form elements are now &#39;errorfied&#39;.&lt;/li&gt;
	&lt;li&gt;\[#131\] Date/Time select boxes can now be easily re-arranged.&lt;/li&gt;
	&lt;li&gt;\[#78\] Jabber support&lt;/li&gt;
	&lt;li&gt;gem: configatron 2.1.5&lt;/li&gt;
	&lt;li&gt;gem: extlib 0.9.8&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack featured on this week&#39;s Rails Envy Podcast</title>
   <link href="http://www.metabates.com/2008/10/17/mack-featured-on-this-weeks-rails-envy-podcast"/>
   <updated>2008-10-17T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/10/17/mack-featured-on-this-weeks-rails-envy-podcast</id>
   <content type="html">&lt;p&gt;The great guys over at RailsEvny.com have been nice enough again to include Mack in one of their podcasts. If you aren&amp;#8217;t a regular subscriber to the podcast (and why not?), you really should be. Take a listen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://railsenvy.com/2008/10/15/rails-envy-podcast-episode-051-10-15-2008&#39;&gt;http://railsenvy.com/2008/10/15/rails-envy-podcast-episode-051-10-15-2008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks again guys for the inclusion, and keep up the good work!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.8.0</title>
   <link href="http://www.metabates.com/2008/10/06/release-080"/>
   <updated>2008-10-06T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/10/06/release-080</id>
   <content type="html">&lt;p&gt;Here it is the 0.8.0 release of Mack! What a fun and exciting release it is as well. There are a few big changes under the hood, all for the better of course, but there&amp;#8217;s only really one that will cause existing Mack projects some conversion pain. However, we&amp;#8217;ve tried to take the sting out of that with a helpful rake task.&lt;/p&gt;

&lt;h3 id=&#39;configatron_support&#39;&gt;Configatron Support&lt;/h3&gt;

&lt;p&gt;Mack 0.8.0 replaces the old application_configuration system with the new ultra sexy and cool, &lt;a href=&#39;/2008/10/03/configatron-214-released/&#39;&gt;Configatron&lt;/a&gt; system. This is a much better way of doing system configurations, and I&amp;#8217;m sure you&amp;#8217;ll agree once you give it a spin. We&amp;#8217;ve tried to take the edge off the conversion of these configuration systems with a helpful little rake task: &lt;pre&gt;$&amp;nbsp;rake mack:update:configuration&lt;/pre&gt; For most cases, that task should do just fine. There might be a few places you have to tweak, such as in your own code, but once you do that, you&amp;#8217;ll love Configatron!&lt;/p&gt;

&lt;p&gt;For more information about using Configatron checkout this page:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://github.com/markbates/configatron&#39;&gt;http://github.com/markbates/configatron&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#39;a_new_router&#39;&gt;A New Router&lt;/h3&gt;

&lt;p&gt;That&amp;#8217;s right, the router in Mack has been completely rewritten from the ground up, yet unlike other frameworks, we&amp;#8217;ve managed to keep our external API the same, so you don&amp;#8217;t have to change your routes.rb at all. :) That&amp;#8217;s a bit of good news, isn&amp;#8217;t it?&lt;/p&gt;

&lt;p&gt;What do you get with the new router? Well, for one, it should be faster, that&amp;#8217;s always a plus. You can also now do &amp;#8216;wildcard&amp;#8217; parameters in routes, use procs, extended &amp;#8216;resourced&amp;#8217; routes, define &amp;#8216;host&amp;#8217; and &amp;#8216;scheme&amp;#8217; parameters, use regular expressions, and a few other little nifty things. Plus, because of the rewrite, it&amp;#8217;s going to make it easier to extending the routing system to be even more powerful! In a future release, sometime in the 0.8.x series, you&amp;#8217;ll even be able to plugin in your own router just by implementing a few API methods.&lt;/p&gt;

&lt;h3 id=&#39;asset_management&#39;&gt;Asset Management&lt;/h3&gt;

&lt;p&gt;There is now a really great asset management system that easily allows you to build bundles of CSS and JavaScript files to help keep your code neat and easy to use. Bundle that with the new mack-asset_packager gem, and support for asset hosts, you get a simple, easy, and fast way to compress and deliver your assets.&amp;#160;&lt;/p&gt;

&lt;h3 id=&#39;misc&#39;&gt;Misc.&lt;/h3&gt;

&lt;p&gt;As always, there&amp;#8217;s a bunch of other great stuff just lurking around in this release. A better logger, for a start, more helpers, bug fixes, better error reporting, default 404 and 500 pages, and more. Please download and enjoy the release, I&amp;#8217;m sure you&amp;#8217;ll find worth it. Enjoy!&lt;/p&gt;

&lt;p&gt;Changelog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[#187] Fixed: When an exception is raised, the request doesn&amp;#8217;t get &amp;#8216;logged&amp;#8217;&lt;/li&gt;

&lt;li&gt;[#185] Fixed: .html is being appended to logged requests when there&amp;#8217;s a 404&lt;/li&gt;

&lt;li&gt;[#184] Request logging should also print the message of the status code&lt;/li&gt;

&lt;li&gt;[#183] Updates to asset mgr/host&lt;/li&gt;

&lt;li&gt;[#181] Content-type can now be set with calling render.&lt;/li&gt;

&lt;li&gt;[#179] When configatron.mack.show_exceptions is false you now either the public/404.html or public/500.html file.&lt;/li&gt;

&lt;li&gt;[#178] Added a configure parameter to turn off log coloring&lt;/li&gt;

&lt;li&gt;[#176] Added a Google Analytics helper.&lt;/li&gt;

&lt;li&gt;[#175] Generating urls should use host or scheme if defined&lt;/li&gt;

&lt;li&gt;[#171] Ability to extend resources in routes&lt;/li&gt;

&lt;li&gt;[#170] Regex support in routes&lt;/li&gt;

&lt;li&gt;[#169] Proc support for Routes&lt;/li&gt;

&lt;li&gt;[#168] Fixed ERB errors not being reported correctly.&lt;/li&gt;

&lt;li&gt;[#167] Rake task to convert app config yamls to configatron&lt;/li&gt;

&lt;li&gt;[#165] Asset Packager&lt;/li&gt;

&lt;li&gt;[#164] Response helper for &amp;#8216;attachments&amp;#8217;&lt;/li&gt;

&lt;li&gt;[#159] Added link_unless_current and link_if helpers&lt;/li&gt;

&lt;li&gt;[#156] Added &amp;#8216;Wildcard&amp;#8217; Routes support&lt;/li&gt;

&lt;li&gt;[#152] INCOMPATIBILITY NOTICE: Removed deprecated support for delivered_emails use delivered_notifiers instead.&lt;/li&gt;

&lt;li&gt;[#138] Added support for &amp;#8216;host&amp;#8217; &amp;#38; &amp;#8216;scheme&amp;#8217; parameters in routes&lt;/li&gt;

&lt;li&gt;[#135] Replaced log4r with logging gem.&lt;/li&gt;

&lt;li&gt;[#119] Freeze gems&lt;/li&gt;

&lt;li&gt;[#106] INCOMPATIBILITY NOTICE: Removed deprecated support for droute_url&lt;/li&gt;

&lt;li&gt;[#93] INCOMPATIBILITY NOTICE: Removed deprecated support for &amp;#8216;top&amp;#8217; level ApplicationHelper&lt;/li&gt;

&lt;li&gt;[#23] INCOMPATIBILITY NOTICE: Removed support for application_configuration and added support for configatron&lt;/li&gt;

&lt;li&gt;gem: logging 0.9.4&lt;/li&gt;

&lt;li&gt;gem: thin 1.0.0&lt;/li&gt;

&lt;li&gt;gem: rspec 1.1.8&lt;/li&gt;

&lt;li&gt;gem: configatron 2.1.4&lt;/li&gt;

&lt;li&gt;gem: cachetastic 2.0.0&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 2.1.4 Released!</title>
   <link href="http://www.metabates.com/2008/10/03/configatron-214-released"/>
   <updated>2008-10-03T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/10/03/configatron-214-released</id>
   <content type="html">&lt;p&gt;This release contains protection of already defined methods, such as &lt;code&gt;object_id&lt;/code&gt;. This comes from Configatron advocate, Don March. Thanks Don!&lt;/p&gt;

&lt;p&gt;Also in this release is a much improved &lt;code&gt;inspect&lt;/code&gt; method.&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/14603.js&#39; /&gt;
&lt;p&gt;As you can see the results of the inspect are a nice, alphabetized, &amp;#8216;cut and paste-able&amp;#8217;, print out of your configuration settings.&lt;/p&gt;

&lt;p&gt;As always, it may take sometime for the gem mirrors to get the release. If you want it now you can install it using www.mackgems.com as the source:&lt;/p&gt;
&lt;code&gt;$ sudo gem install configatron --source=http://www.mackgems.com&lt;/code&gt;
&lt;p&gt;Look for Configatron support in the next release of Mack, 0.8.0, due out on Monday!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 2.1.1 Released!</title>
   <link href="http://www.metabates.com/2008/09/18/configatron-210-released"/>
   <updated>2008-09-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/18/configatron-210-released</id>
   <content type="html">&lt;p&gt;On the heels of yesterday&amp;#8217;s release of Configatron 2.0.0, Cody Maggard has generously donated a patch to add the following methods: &lt;code&gt;unprotect&lt;/code&gt;, &lt;code&gt;protect_all!&lt;/code&gt;, and &lt;code&gt;unprotect_all!&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Cody is also the developer of the configatron-rails plugin which makes integrating configatron into your Rails app pretty darn easy. You can checkout his project on &lt;a href=&#39;http://github.com/cmaggard/configatron-rails/tree/master&#39;&gt;GitHub&lt;/a&gt;. Thanks Cody!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 2.0.0 Released!</title>
   <link href="http://www.metabates.com/2008/09/17/configatron-200-released"/>
   <updated>2008-09-17T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/17/configatron-200-released</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve spent the last few days incorporating Configatron 1.x into the Mack framework, for our forth coming 0.8.0 release. During that time, I&amp;#8217;ve released that Configatron could be better, and that it should be better. I got quickly annoyed with the multiple lines of code I needed to write to just to set a single &amp;#8216;nested&amp;#8217; parameter. I got frustrated trying to set default values for libraries, &lt;em&gt;after&lt;/em&gt;, I had already loaded the user&amp;#8217;s configurations. Why couldn&amp;#8217;t I easily check to see if a parameter was nil or not? So taking all that into account, as well as some great feedback from users, Configatron 2.0.0 was born. It&amp;#8217;s a complete rewrite of the library. It&amp;#8217;s quicker, and easier to use.&lt;/p&gt;

&lt;p&gt;Just take a look at this example:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/11259.js&#39; /&gt;
&lt;p&gt;It definitely doesn&amp;#8217;t get much easier than that!&lt;/p&gt;

&lt;p&gt;With this new release you can protect parameters to prevent end users from modifying them:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/11288.js&#39; /&gt;
&lt;p&gt;Since most configurations systems get loaded before outside libraries, you can run into a problem where the library is expecting certain parameters to be set, but your end user hasn&amp;#8217;t set them all, they&amp;#8217;ve just set the few that are important to them. So what do you do? You don&amp;#8217;t want to override the end user&amp;#8217;s settings, Configatron can now help you with that:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/11289.js&#39; /&gt;
&lt;p&gt;Of course, these are just some of the enhancements in 2.x Please read the &lt;a href=&#39;http://configatron.mackframework.com/&#39;&gt;README&lt;/a&gt; file and checkout the API for more information.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack @ RubyConf &#39;08</title>
   <link href="http://www.metabates.com/2008/09/11/mack-rubyconf-08"/>
   <updated>2008-09-11T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/11/mack-rubyconf-08</id>
   <content type="html">&lt;p&gt;Mark your calendars, on Day One, from 1.15PM - 2.00PM, in Room 2, I&amp;#8217;ll be delivering a presentation on building distributed applications.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.rubyconf.org/talks/15&#39;&gt;http://www.rubyconf.org/talks/15&lt;/a&gt; &lt;blockquote&gt;Building multiple applications that all need to share data and other information between can be a&amp;nbsp;daunting and challenging task. Mark will help to demystify the use of Ruby systems such as Rinda and&amp;nbsp;DRb and show you how they can be used to link applications together. Through the development of the&amp;nbsp;Mack framework and its use in building Helium.com, Mark will share the highlights and the pitfalls&amp;nbsp;of distributed application development.&lt;/blockquote&gt;&lt;/p&gt;

&lt;p&gt;Make sure and sign up for the conference today, as attendance is limited to only 500.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 1.2.1 Released</title>
   <link href="http://www.metabates.com/2008/09/10/configatron-121-released"/>
   <updated>2008-09-10T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/10/configatron-121-released</id>
   <content type="html">&lt;p&gt;Thanks to Brandon Dimcheff for contributing a patch that let&amp;#8217;s you call .to_hash on configatron to get your configuration settings out as a Hash.&lt;/p&gt;

&lt;p&gt;Please take a moment and checkout Brandon&amp;#8217;s blog at: &lt;a href=&#39;http://its.arubything.com/&#39;&gt;http://its.arubything.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks again Brandon&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.7.1</title>
   <link href="http://www.metabates.com/2008/09/08/release-071"/>
   <updated>2008-09-08T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/08/release-071</id>
   <content type="html">&lt;p&gt;Although not as sexy a release as 0.7.0, there are some very important bug fixes and some cool new little features in this release. Rack has been upgraded to v0.4.0. DataMapper to 0.9.5. Facets to 2.4.4, and a few other gems as well.&lt;/p&gt;

&lt;p&gt;There is now a much nicer session store API that will allow developers to build their own session stores. There&amp;#8217;s also a couple of new session stores that ship with 0.7.1. There&amp;#8217;s a DataMapper session store, and a cookie session store, which is now the default session store. The previous Cachetastic based session store can be used by requiring the mack-caching gem in gems.rb and putting the following setting in your app_config/*.yml file:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;There is now built-in support to help prevent cross-site scripting attacks on forms. Some view helper methods have nice updates such as &lt;code&gt;:disable_with&lt;/code&gt; and &lt;code&gt;:confirm&lt;/code&gt;, and asset hosts.&lt;/p&gt;

&lt;p&gt;And a whole host of other little improvements across the board. Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 1.2.0 Released</title>
   <link href="http://www.metabates.com/2008/09/08/configatron-120-released"/>
   <updated>2008-09-08T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/08/configatron-120-released</id>
   <content type="html">&lt;p&gt;Thanks to Simon Menke for contributing a great patch to Configatron that will automatically &amp;#8216;namespace&amp;#8217; your configuration settings if you use the configure_from_hash or the configure_from_yaml methods.&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/9518.js&#39; /&gt;&lt;script src=&#39;http://gist.github.com/9521.js&#39; /&gt;
&lt;p&gt;Both give you the same results:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/9522.js&#39; /&gt;
&lt;p&gt;If you get a chance visit Simon&amp;#8217;s blog at: &lt;a href=&#39;http://5xm.org/&#39;&gt;http://5xm.org/&lt;/a&gt; and say hi. Thanks again Simon.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack 0.7.0 featured on this week&#39;s RailsEnvy podcast</title>
   <link href="http://www.metabates.com/2008/09/04/mack-070-featured-on-this-weeks-railsenvy-podcast"/>
   <updated>2008-09-04T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/04/mack-070-featured-on-this-weeks-railsenvy-podcast</id>
   <content type="html">&lt;p&gt;The release of Mack 0.7.0 was featured as the lead story this week in the railsenvy.com podcast. They guys had great things to say about Mack, have a listen:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.railsenvy.com/2008/9/3/rails-envy-podcast-episode-045-09-03-2008&#39;&gt;http://www.railsenvy.com/2008/9/3/rails-envy-podcast-episode-045-09-03-2008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As always, if you don&amp;#8217;t subscribe to the podcast, you definitely should. It&amp;#8217;s one of the best ones around.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 1.1.0 Released</title>
   <link href="http://www.metabates.com/2008/09/04/configatron-110-released"/>
   <updated>2008-09-04T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/09/04/configatron-110-released</id>
   <content type="html">&lt;p&gt;On the heels of last week&amp;#8217;s successful &lt;a href=&#39;http://www.mackframework.com/2008/08/29/configatron-100-released/&#39;&gt;release&lt;/a&gt; of Configatron 1.0.0 comes version 1.1.0. The big addition, feature wise, to 1.1.0 is the ability to now load configurations from a YAML file. &lt;pre&gt;configatron.configure_from_yaml(&#39;/path/to/file.yml&#39;)&lt;/pre&gt; When reload is called on configatron any YAML files will be read back in from disk, allowing you to change your configurations and reload them.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack Sake Tasks</title>
   <link href="http://www.metabates.com/2008/08/31/mack-sake-tasks"/>
   <updated>2008-08-31T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/31/mack-sake-tasks</id>
   <content type="html">&lt;p&gt;Thanks to Mack user, DeLynn Berry, for writing up some great Sake tasks! Now getting up and running with Mack development is even easier. Thanks DeLynn!&lt;/p&gt;

&lt;p&gt;All you need to do is install &lt;a href=&#39;http://errtheblog.com/posts/60-sake-bomb&#39;&gt;Sake&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once Sake is installed you can install the Mack sake tasks like so: &lt;pre&gt;sake -i http://www.mackframework.com/mack-dev.sake&lt;/pre&gt; You can see a full list of tasks with the following command: &lt;pre&gt;sake -T&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Patch Releases 0.7.0.1 and 0.6.1.2</title>
   <link href="http://www.metabates.com/2008/08/29/patch-releases-0701-and-0612"/>
   <updated>2008-08-29T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/29/patch-releases-0701-and-0612</id>
   <content type="html">&lt;p&gt;Today two patches to Mack have been released, 0.7.0.1 and 0.6.1.2. They upgrade the version of application_configuration and are highly recommended. There was a bug with application_configuration that could cause it to stop loading configuration settings, which obviously, would be bad. :) Please update your version of Mack accordingly.&amp;#160;&lt;/p&gt;

&lt;p&gt;As a side note, Mack will be moving away from application_configuration to configatron around version 0.8.0, but more on that later.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Configatron 1.0.0 Released!</title>
   <link href="http://www.metabates.com/2008/08/29/configatron-100-released"/>
   <updated>2008-08-29T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/29/configatron-100-released</id>
   <content type="html">&lt;p&gt;Configatron makes configuring your applications and scripts incredibly easy. No longer is a there a need to use constants or global variables. Now you can use a simple and painless system to configure your life. And, because it&amp;#8217;s all Ruby, you can do any crazy thing you would like to! &lt;a href=&#39;http://configatron.mackframework.com/&#39;&gt;API&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note: Configatron is a general purpose library, that can be used in ANY Ruby application or script, it&amp;#8217;s not Mack specific. So go on and configure to your hearts content. :)&lt;/em&gt; &lt;pre&gt;$ sudo gem install configatron&lt;/pre&gt; &lt;h2&gt;Examples&lt;/h2&gt; &lt;h3&gt;Simple&lt;/h3&gt; &lt;script src=&#39;http://gist.github.com/7986.js&#39; /&gt;&lt;/p&gt;

&lt;p&gt;Now, anywhere in your code you can do the following:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/7987.js&#39; /&gt;
&lt;p&gt;Viola! Simple as can be.&lt;/p&gt;

&lt;p&gt;Now you&amp;#8217;re saying, what if I want to have a &amp;#8216;default&amp;#8217; set of options, but then override them later, based on other information? Simple again. Let&amp;#8217;s use our above example. We&amp;#8217;ve configured our &amp;#8216;database_url&amp;#8217; option to be &amp;#8220;postgres://localhost/mack_framework_rocks&amp;#8221;. The problem with that is that is our production database url, not our development url. Fair enough, all you have to do is redeclare it:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/7988.js&#39; /&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/7989.js&#39; /&gt;
&lt;p&gt;Notice how our other configuration parameters haven&amp;#8217;t changed? Cool, eh? &lt;h3&gt;Namespaces&lt;/h3&gt; The question that should be on your lips is what I need to have namespaced configuration parameters. It&amp;#8217;s easy! Configatron allows you to create namespaces.&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/7990.js&#39; /&gt;
&lt;p&gt;becomes:&lt;/p&gt;
&lt;script src=&#39;http://gist.github.com/7992.js&#39; /&gt;
&lt;p&gt;Configatron allows you to nest namespaces to your hearts content! Just keep going, it&amp;#8217;s that easy.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack w/ Apache and mod_rails</title>
   <link href="http://www.metabates.com/2008/08/26/mack-w-apache-and-mod_rails"/>
   <updated>2008-08-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/26/mack-w-apache-and-mod_rails</id>
   <content type="html">&lt;p&gt;Thanks to Mack user, Diogo Almeida, there&amp;#8217;s a great write up on the wiki on how to configure Apache using mod_rails to host a Mack app.  Thanks Diogo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackwiki.com/using_passenger_phusion_to_host_a_mack_application&#39;&gt;http://www.mackwiki.com/using_passenger_phusion_to_host_a_mack_application&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack Article/Interview on RubyInside</title>
   <link href="http://www.metabates.com/2008/08/26/mack-articleinterview-on-rubyinside"/>
   <updated>2008-08-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/26/mack-articleinterview-on-rubyinside</id>
   <content type="html">&lt;p&gt;Peter Cooper just posted a very nice article about Mack, which features an interview with me, Mark Bates, over on Ruby Inside. Please check it out:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.rubyinside.com/mack-distributed-ruby-web-application-framework-releases-070-1107.html&#39;&gt;http://www.rubyinside.com/mack-distributed-ruby-web-application-framework-releases-070-1107.html &lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.7.0</title>
   <link href="http://www.metabates.com/2008/08/25/release-070"/>
   <updated>2008-08-25T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/25/release-070</id>
   <content type="html">&lt;p&gt;I know that with every release I say something like, &amp;#8220;This is a big release&amp;#8221;, but the fact of the matter is this is a big release. Amongst the 49 tickets that make up release 0.7.0, there are two in particular that are at the core of Mack&amp;#8217;s very existence, they are Distributed Objects and Distributed Views/Layouts.&lt;/p&gt;

&lt;p&gt;Back on March 26th Mack 0.4.0 was released. This release brought the first of three large distributed features, Distributed Routes. With 0.7.0 Mack fully realizes it&amp;#8217;s goal of making it easy to write fully distributed web applications.&amp;#160;There is a very nice wiki page, on our new wiki, that shows in detail how to use the new distributed features. That page can found&amp;#160;&lt;a href=&#39;http://www.mackwiki.com/using_the_mack-distributed_gem&#39;&gt;here&lt;/a&gt;. Also, don&amp;#8217;t forget to watch the screencast of the new distributed features that can be found &lt;a href=&#39;http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov&#39;&gt;here&lt;/a&gt;. &lt;h3&gt;Distributed Objects&lt;/h3&gt; Distributed objects allow you to easily distribute access to your library and model code amongst any of your other Mack applications. Allowing this access is as simple as requiring the mack-distributed gem, adding a few lines to your configuration, and starting the mack_ring_server binary. &amp;#8216;Client&amp;#8217; applications just need to require the mack-distributed gem. &lt;h3&gt;Distributed Views/Layouts&lt;/h3&gt; With distributed views and layouts you can now share the look and feel from one application with all of your applications. Configuration and use is just as easy using distributed objects. &lt;h3&gt;Form and HTML Helpers&lt;/h3&gt; People have been requesting more HTML and form helper methods, and we&amp;#8217;re more than happy to comply. There are whole bunch of these new methods now to help you more easily build your applications. The generators have been updated to use these new methods, to make your job even easier. There is also now support for doing Date/Time drop downs, similar to Rails and Merb. &lt;h3&gt;&#39;Tell&#39; Messaging&lt;/h3&gt; Rails folks know &amp;#8216;tell&amp;#8217; messaging as &amp;#8216;flash&amp;#8217; messaging and Merb folks know it as &amp;#8216;message&amp;#8217; messaging. We went with &amp;#8216;tell&amp;#8217;. Tell messages are cleared after any non-redirect request. They&amp;#8217;re a great way to send a simple message down to the client. &lt;h3&gt;New Wiki&lt;/h3&gt; With this release there is also a new wiki at, &lt;a href=&#39;http://www.mackwiki.com&#39;&gt;http://www.mackwiki.com&lt;/a&gt;. This new wiki, incidentally built using Mack 0.7.0, will house all the tutorials and how-to&amp;#8217;s for Mack. There are a few entries from the old wiki that still need to brought over during the next day or two.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;[\[#114\](http://mack.lighthouseapp.com/projects/11385/tickets/114-add-javascript-link_helper)] Javascript link_helper&lt;/li&gt;
	&lt;li&gt;[\[#112\](http://mack.lighthouseapp.com/projects/11385/tickets/112-error-generating-mack-application)] Error generating mack application&lt;/li&gt;
	&lt;li&gt;[\[#109\](http://mack.lighthouseapp.com/projects/11385/tickets/109-update-to-datamapper-0-9-4)] DataMapper 0.9.4&lt;/li&gt;
	&lt;li&gt;[\[#103\](http://mack.lighthouseapp.com/projects/11385/tickets/103-log-colors-for-console-output-should-be-configurable-by-level)] Log colors for the console are now configurable per log level.&lt;/li&gt;
	&lt;li&gt;[\[#102\](http://mack.lighthouseapp.com/projects/11385/tickets/102-define-association-method-in-data-factory)] New association method in data_factory&lt;/li&gt;
	&lt;li&gt;[\[#101\](http://mack.lighthouseapp.com/projects/11385/tickets/101-update-file-upload-testing)] Update to file upload testing (build_file -&amp;gt; file_for_upload, and multipart support in put)&lt;/li&gt;
	&lt;li&gt;[\[#100\](http://mack.lighthouseapp.com/projects/11385/tickets/100-inline-routing-parameters-are-being-mutated)] Inline routing parameters are being mutated&lt;/li&gt;
	&lt;li&gt;[\[#99\](http://mack.lighthouseapp.com/projects/11385/tickets/99-facets-2-4-3-support)] Upgraded to facets 2.4.3&lt;/li&gt;
	&lt;li&gt;[\[#98\](http://mack.lighthouseapp.com/projects/11385/tickets/98-facets-don-t-seem-to-be-loaded-when-reading-app_config-files)] Fixed mack-facets not being loaded before app_config files.&lt;/li&gt;
	&lt;li&gt;[\[#97\](http://mack.lighthouseapp.com/projects/11385/tickets/97-sessions-only-work-with-local_memory-mode)] Fixed sessions only working with &#39;local_memory&#39; mode&lt;/li&gt;
	&lt;li&gt;[\[#96\](http://mack.lighthouseapp.com/projects/11385/tickets/96-need-to-cache-distributed-view-files)] Distributed Views module now uses file cache&lt;/li&gt;
	&lt;li&gt;[\[#92\](http://mack.lighthouseapp.com/projects/11385/tickets/92-remove-deprecated-orm-code-from-mack)] Removed deprecated app_config.orm code.&lt;/li&gt;
	&lt;li&gt;[\[#91\](http://mack.lighthouseapp.com/projects/11385/tickets/91-if-gems-rb-doesn-t-exist-mack-blows-up)] Fixed Mack blowing up if there is no config/initializers/gems.rb file.&lt;/li&gt;
	&lt;li&gt;[\[#90\](http://mack.lighthouseapp.com/projects/11385/tickets/90-add-deprecation-system)] Added deprecation system.&lt;/li&gt;
	&lt;li&gt;[\[#89\](http://mack.lighthouseapp.com/projects/11385/tickets/89-gems-tasks-don-t-work)] rake gems:* will now only display warning if any gem required is not installed (and not break)&lt;/li&gt;
	&lt;li&gt;[\[#88\](http://mack.lighthouseapp.com/projects/11385/tickets/88-sqlite3-tests-in-mack-active_record)] Implemented pending SQLite3 tests in mack-activerecord&lt;/li&gt;
	&lt;li&gt;[\[#87\](http://mack.lighthouseapp.com/projects/11385/tickets/87-refactor-common-orm-code-into-mack-orm-gem)] Refactored out common ORM code from mack-active_record and mack-data_mapper into mack-orm&lt;/li&gt;
	&lt;li&gt;[\[#86\](http://mack.lighthouseapp.com/projects/11385/tickets/86-add-stylesheet-link-helper)] stylesheet link helper&lt;/li&gt;
	&lt;li&gt;[\[#85\](http://mack.lighthouseapp.com/projects/11385/tickets/85-mack-viewhelpers-htmlhelpers-needs-to-be-refactored)] Refactored out Mack::ViewHelpers::HtmlHelpers into Mack::ViewHelpers::HtmlHelpers, Mack::ViewHelpers::FormHelpers and&amp;nbsp;Mack::ViewHelpers::linkHelpers&lt;/li&gt;
	&lt;li&gt;[\[#84\](http://mack.lighthouseapp.com/projects/11385/tickets/84-there-needs-to-be-a-way-to-lookup-a-specific-distributed-service)] Added Mack::Distributed.lookup(url) to retrieve specific distributed services.&lt;/li&gt;
	&lt;li&gt;[\[#83\](http://mack.lighthouseapp.com/projects/11385/tickets/83-mail_to-helper-needed)] Added mail_to HTML helper.&lt;/li&gt;
	&lt;li&gt;[\[#82\](http://mack.lighthouseapp.com/projects/11385/tickets/82-mack-distributed-needs-an-acl)] Added ACL support to mack-distributed&lt;/li&gt;
	&lt;li&gt;[\[#81\](http://mack.lighthouseapp.com/projects/11385/tickets/81-session-s-don-t-carry-across-a-redirect-in-testing)] Fixed sessions working with redirects in testing&lt;/li&gt;
	&lt;li&gt;[\[#80\](http://mack.lighthouseapp.com/projects/11385/tickets/80-original-object-s-inspect-should-be-added-to-the-distributed-proxy-object-s-inspect)] Distributed objects present both the DRb::DRbObject inspect and the original object&#39;s inspect when asked.&lt;/li&gt;
	&lt;li&gt;[\[#79\](http://mack.lighthouseapp.com/projects/11385/tickets/79-rename-use_distributed_routes-config)] Renamed app_config.mack.use_distributed_routes to app_config.mack.share_routes&lt;/li&gt;
	&lt;li&gt;[\[#76\](http://mack.lighthouseapp.com/projects/11385/tickets/76-move-mack_ring_server-to-mack-distributed)] Move mack_ring_server to mack-distributed&lt;/li&gt;
	&lt;li&gt;[\[#75\](http://mack.lighthouseapp.com/projects/11385/tickets/75-there-are-still-distributed-rake-tasks-in-mack-core)] Left over mack-distributed rake tasks&lt;/li&gt;
	&lt;li&gt;[\[#74\](http://mack.lighthouseapp.com/projects/11385/tickets/74-optional-disable-initialization-logging)] Added optional feature to disable initialization logging.&lt;/li&gt;
	&lt;li&gt;[\[#73\](http://mack.lighthouseapp.com/projects/11385/tickets/73-tests-should-no-longer-use-functional-unit-folders)] Tests no longer use the functional/unit directories&lt;/li&gt;
	&lt;li&gt;[\[#69\](http://mack.lighthouseapp.com/projects/11385/tickets/69-generators-for-view-helpers-and-controller-helpers)] Added ViewHelperGenerator and ControllerHelperGenerator&lt;/li&gt;
	&lt;li&gt;[\[#68\](http://mack.lighthouseapp.com/projects/11385/tickets/68-transactional-support-in-mack-activerecord)] Transactional support in mack-AR&lt;/li&gt;
	&lt;li&gt;[\[#67\](http://mack.lighthouseapp.com/projects/11385/tickets/67-proper-test-setup-tasks-for-datamapper-and-activerecord)] Added test:setup tasks for active_record and data_mapper&lt;/li&gt;
	&lt;li&gt;[\[#62\](http://mack.lighthouseapp.com/projects/11385/tickets/62-remove-l10n-warnings)] Removed const redefined warnings if mack-l10n is used along with mack-activerecord&lt;/li&gt;
	&lt;li&gt;[\[#39\](http://mack.lighthouseapp.com/projects/11385/tickets/39-haml-2-x-support)] HAML 2.0.2 support&lt;/li&gt;
	&lt;li&gt;[\[#28\](http://mack.lighthouseapp.com/projects/11385/tickets/28-refactor-out-encryption-code)] Refactored out encryption into the mack-encryption gem.&lt;/li&gt;
	&lt;li&gt;[\[#25\](http://mack.lighthouseapp.com/projects/11385/tickets/25-simple-controller-generator)] Added ControllerGenerator&lt;/li&gt;
	&lt;li&gt;[\[#19\](http://mack.lighthouseapp.com/projects/11385/tickets/19-more-html-helpers)] Added HTML form helpers&lt;/li&gt;
	&lt;li&gt;[\[#15\](http://mack.lighthouseapp.com/projects/11385/tickets/15-file-upload-testing)] File upload testing support (ability to do multipart form post in testing)&lt;/li&gt;
	&lt;li&gt;[\[#11\](http://mack.lighthouseapp.com/projects/11385/tickets/11-distributed-views-layouts)] Distributed Layout/Views&lt;/li&gt;
	&lt;li&gt;[\[#10\](http://mack.lighthouseapp.com/projects/11385/tickets/10-distributed-models)] Added distributed objects to mack-distributed.&lt;/li&gt;
	&lt;li&gt;[\[#8\](http://mack.lighthouseapp.com/projects/11385/tickets/8-refactor-out-distributed-code)]  Move distributed code from mack-core to mack-more&lt;/li&gt;
	&lt;li&gt;[\[#5\](http://mack.lighthouseapp.com/projects/11385/tickets/5-flash-messaging)] Added tell messaging&lt;/li&gt;
	&lt;li&gt;gem: genosaurus 1.2.2&lt;/li&gt;
	&lt;li&gt;gem: haml 2.0.2&lt;/li&gt;
	&lt;li&gt;gem: addressable 1.0.4&lt;/li&gt;
	&lt;li&gt;gem: facets 2.4.3&lt;/li&gt;
	&lt;li&gt;gem: data_mapper 0.9.4&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Preview (0.7.0): Building Distributed Application w/ Mack (Screencast!)</title>
   <link href="http://www.metabates.com/2008/08/18/preview-070-building-distributed-application-w-mack-screencast"/>
   <updated>2008-08-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/08/18/preview-070-building-distributed-application-w-mack-screencast</id>
   <content type="html">&lt;p&gt;On Monday, August 25th, Mack 0.7.0 will be released. This is an extremely important release for Mack. Why is that you ask? Good question. Well, this is release that finally brings the much talked about distributed feature set to Mack. Distributed routes have been around for quite some time, but distributed views/layouts and distributed objects (models) have been missing. Well, in less than a week, you&amp;#8217;ll have them!&lt;/p&gt;

&lt;p&gt;Now I know that you&amp;#8217;re just as excited about what&amp;#8217;s coming as I am, that&amp;#8217;s why I&amp;#8217;ve prepared the first ever Mack screencast to demostrate these features. The screencast is a little rough around the edges, but it gets the ideas across. &lt;/p&gt;

&lt;p&gt;As always I&amp;#8217;ll post more about the 0.7.0 as the release date nears. In the meantime enjoy the screencast:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://screencasts.mackframework.com/Mack%20Distributed%20Demo.mov&#39;&gt;The Mack Distributed Demo Screencast&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the &lt;a href=&#39;http://screencasts.mackframework.com/distributed_demo_source.zip&#39;&gt;source&lt;/a&gt; code.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack 0.6.0 featured on this week&#39;s RailsEnvy Podcast</title>
   <link href="http://www.metabates.com/2008/07/23/mack-060-featured-on-this-weeks-railsenvy-podcast"/>
   <updated>2008-07-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/07/23/mack-060-featured-on-this-weeks-railsenvy-podcast</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;http://www.railsenvy.com/2008/7/23/rails-envy-podcast-episode-039-07-23-2008&#39;&gt;http://www.railsenvy.com/2008/7/23/rails-envy-podcast-episode-039-07-23-2008&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;#8217;re not familiar with the podcast, I highly recommend checking it out. It&amp;#8217;s a very informative, and highly entertaining podcast about all things Ruby.&lt;/p&gt;

&lt;p&gt;Good work guys, keep it up!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>(0.6.0) 4 Little Known Mack Features</title>
   <link href="http://www.metabates.com/2008/07/23/4-little-known-mack-features"/>
   <updated>2008-07-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/07/23/4-little-known-mack-features</id>
   <content type="html">&lt;p&gt;I thought it might be fun to start posting about some of the little known features in Mack. There are a treasure trove of them in there, so let&amp;#8217;s pick a couple and start there. &lt;h3&gt;render(:url)&lt;/h3&gt; This is a great little feature, one of my personal favorites. In your views you can do things like this: &lt;pre&gt;&amp;lt;%= render(:url, &quot;http://www.mackframework.com) %&amp;gt;&lt;/pre&gt; that will render the contents of http://www.mackframework.com into your view. You can also do &amp;#8216;local&amp;#8217; urls. &lt;pre&gt;&amp;lt;%= render(:url, &quot;/users/1&quot;) %&amp;gt;&lt;/pre&gt; will make an internal request to your application and render the results of &amp;#8220;/users/1&amp;#8221; into your view. The optional 3rd parameter to render allows you to do things like set the HTTP method: &lt;pre&gt;&amp;lt;%= render(:url, &quot;/users/1&quot;, :method =&amp;gt; :post) %&amp;gt;&lt;/pre&gt; or add parameters you want to pass to the URL you want to render:  &lt;pre&gt;&amp;lt;%= render(:url, &quot;/users/1&quot;, :method =&amp;gt; :post, :parameters =&amp;gt; {:id =&amp;gt; 1}) %&amp;gt;&lt;/pre&gt; &lt;h3&gt;Error handling in routes&lt;/h3&gt; Routing allows you to define controllers/actions you want to catch and handle exceptions that happen in other controllers. Let&amp;#8217;s look at the following routes.rb file: &lt;pre&gt;Mack::Routes.build do |r|
  r.resource :users
  r.home_page &quot;/&quot;, :controller =&amp;gt; :default, :action =&amp;gt; :index
  r.handle_errors ArgumentError, :controller =&amp;gt; :problems, :action =&amp;gt; :arguments
  r.handle_errors DataMapper::ObjectNotFoundError, :controller =&amp;gt; :problems, :action =&amp;gt; :not_found
  r.defaults
end&lt;/pre&gt; What&amp;#8217;s going on with r.handle_errors you ask? Well, first we tell the routing system which error we want to capture in our controllers, DataMapper::ObjectNotFoundError, then we tell it which controller and which action we want to handle that error.&lt;/p&gt;

&lt;p&gt;When an exception is thrown during a request Mack checks to see if that exception has been registered, if it has been then the request gets forwarded to the defined controller and action for handling. So in the above example if a DataMapper::ObjectNotFoundError is raised, the request will be forwarded to the ProblemsController, not_found action.&lt;/p&gt;

&lt;p&gt;One of the really nice things about this is that you have access to the original request, so you can&amp;#8217;t get the page the person was trying to access, any parameters that were passed, etc&amp;#8230; You also have access the exception itself with the caught_exception method. &lt;h3&gt;Server-side redirects&lt;/h3&gt; Let&amp;#8217;s be honest, redirects are the most exciting topic, and this is the first of two sections on it! I&amp;#8217;ll try to be brief. When dealing with redirects it can sometimes be helpful to do a server-side redirect. The difference, for those who don&amp;#8217;t know, between a server-side redirect and a regular redirect is the following. With a regular redirect the response is sent back down to the client&amp;#8217;s browser, which then issues another response back to the server for the new url that was specified in the previous response. You&amp;#8217;ll often hear this referred to as a client-side redirect. A server-side redirect sends you to a different url on the server, without first sending down a response to the client. Because of this the client only gets one response.&lt;/p&gt;

&lt;p&gt;To do a server-side redirect in Mack is very easy. Here&amp;#8217;s what a client side redirect in an action would look like: &lt;pre&gt;redirect_to(users_index_url)&lt;/pre&gt; To make that a server-side redirect you would simply pass an extra option to the redirect_to method: &lt;pre&gt;redirect_to(users_index_url, :server_side =&amp;gt; true)&lt;/pre&gt; &lt;h3&gt;Redirects in routes&lt;/h3&gt; This is a cool little feature. Let&amp;#8217;s say that you have changed a few urls around. You want a quick way to redirect people who have bookmarked the old urls to the new urls. You could have a controller that did nothing but that, but that seems like a lot of extra work, and it&amp;#8217;s really something that your routing system should be doing for you anyway. Enter redirects in routes. &lt;pre&gt;Mack::Routes.build do |r|
  r.old_foo &quot;/my_old_foo&quot;, :redirect_to =&amp;gt; &quot;/my_new_foo&quot;, :status =&amp;gt; 301
end&lt;/pre&gt; From now on anything comes in to &amp;#8220;/my_old_foo&amp;#8221; will be redirected to &amp;#8220;/my_new_foo&amp;#8221; with a status of 301.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.6.0</title>
   <link href="http://www.metabates.com/2008/07/16/release-060"/>
   <updated>2008-07-16T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/07/16/release-060</id>
   <content type="html">&lt;p&gt;Well, it&amp;#8217;s finally here, Mack 0.6.0! This release has taken a long time, but I feel that it&amp;#8217;s definitely worth it. This has to be the best release of Mack to date. During this release the Mack dev team grew by 100%, Darsono Sutedja, previously a contributor to Mack, is now a full time Mack core team developer! Darsono has done an absolutely great job on this release, thanks Darsono. With that out of the way, let&amp;#8217;s jump straight to the good stuff, shall we? &lt;h3&gt;DataMapper 0.9.2 Support&lt;/h3&gt; At long last Mack supports DataMapper 0.9.2. Because previous versions of Mack used DataMapper 0.3.2, there is some upgrade work that you&amp;#8217;ll need to do, but trust me, it&amp;#8217;s worth it. DataMapper 0.9.2 is a gigantic leap forward from 0.3.2. If you have problems installing the data_mapper gem, make sure that you don&amp;#8217;t have gems.datamapper.org in your source path for rubygems. You can remove it with the following command: &lt;pre&gt;gem source -r http://gems.datamapper.org &lt;/pre&gt; &lt;h3&gt;RSpec Testing Support&lt;/h3&gt; RSpec is now the default testing framework for new Mack applications. This innovative testing framework makes it fun, and simple, to do behavior driven development. If you haven&amp;#8217;t yet played with RSpec, I would highly recommend it. I wasn&amp;#8217;t a big fan of &amp;#8216;spec&amp;#8217; testing prior to meeting Adam French, of DataMapper fame, and he turned me on to the joys of rspec. I think you&amp;#8217;ll like it too, if you give it a chance. :) &lt;h3&gt;mack-more&lt;/h3&gt; There is now a mack-more package. This will house all the optional gems available to the Mack framework. This include things like HAML and Markaby support, localization, etc&amp;#8230; Use what you want, ignore the rest. This will help keep the core code clean, light, and of course, fast. &lt;h3&gt;Localization/l10n Support&lt;/h3&gt; Darsono did a great job with the mack-localization gem. There is now optional support for internationalization in Mack applications. Check out the gem, it&amp;#8217;s definitely worth it if you need to support multiple languages for your web application. &lt;h3&gt;Much, much more!&lt;/h3&gt; Of course, there&amp;#8217;s a lot more Mack than the stuff I just mentioned, there&amp;#8217;s tons of bug fixes, some code clean up, some API changes, transactional testing support, the ability to catch specific errors in routes and have them diverted to a controller/action for handling.&lt;/p&gt;

&lt;p&gt;There is a great wiki entry on upgrading your existing Mack project to 0.6.0 &lt;a href=&#39;http://wiki.mackframework.com/index.php/en/Upgrading%20from%200.5.x%20to%200.6.x&#39;&gt;here&lt;/a&gt;. I highly recommend reading it whether or not you have an existing Mack application.&lt;/p&gt;

&lt;p&gt;With this release the Mack team is also fully embracing Lighthouse. If you find bugs, or have suggestions please visit &lt;a href=&#39;http://lighthouse.mackframework.com&#39;&gt;http://lighthouse.mackframework.com&lt;/a&gt; and log them there. You&amp;#8217;ll also find the list of features that will eventually be added to Mack.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Moved Mack::Configuration.root to Mack.root&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Moved Mack::Configuration.env to Mack.env&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Mack::Configuration.* path methods no longer exist. Use mack-paths instead.&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Dropped mack_ruby_core_extensions in favor or mack-facets&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Mack::Controller::Base is now Mack::Controller (and it&#39;s now a module)&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Haml renderer is now part of mack-more.&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Markaby renderer is now part of mack-more.&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Changed request param&#39;s accessor routine, from params(key) to params[key]&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Test::Unit::TestCase is no longer the default testing framework, RSpec is. If you wish to use Test::Unit::TestCase add the following config parameter to your config/app_config/default.yml file:
  mack::testing_framework: test_case&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: ENV[&quot;_mack_env&quot;] and ENV[&quot;_mack_root&quot;] are no longer supported, please use ENV[&quot;MACK_ENV&quot;] and ENV[&quot;MACK_ROOT&quot;], or just Mack.env and Mack.root&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: MACK_DEFAULT_LOGGER constant is no longer available. Please use Mack.logger instead.&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: The ApplicationHelper module is now deprecated. Please move view level helpers into Mack::ViewHelpers::* and controller helpers into Mack::ControllerHelpers::&amp;lt;controller_name&amp;gt;&lt;/li&gt;
	&lt;li&gt;thin.ru and thin.yml are no longer needed, you may delete them.&lt;/li&gt;
	&lt;li&gt;RSpec assertions are now automatically added.&lt;/li&gt;
	&lt;li&gt;Added a Mack::Testing::Response class to make testing of responses easier.&lt;/li&gt;
	&lt;li&gt;moved test_extensions to testing and added the module Testing to the files in it.&lt;/li&gt;
	&lt;li&gt;Added a dependency on mack-more&lt;/li&gt;
	&lt;li&gt;Added a set of Rake tasks to update existing Mack applications.&lt;/li&gt;
	&lt;li&gt;\[#30\] Added Mack::Logging::Filter to filter out unwanted parameters from the logs.&lt;/li&gt;
	&lt;li&gt;In routing you can now define a route that will catch an Exception from another controller.&lt;/li&gt;
	&lt;li&gt;ORM will not be initialized if the app never specify which ORM to use.&lt;/li&gt;
	&lt;li&gt;All Mack unit tests are now written using rspec-1.1.4.&lt;/li&gt;
	&lt;li&gt;mack command now takes an optional -t flag to determine which testing framework to use--value could be test_case or rspec [default]&lt;/li&gt;
	&lt;li&gt;new setting added to app_config: testing_framework&lt;/li&gt;
	&lt;li&gt;gem: cachetastic 1.7.2&lt;/li&gt;
	&lt;li&gt;gem: application_configuration 1.5.0&lt;/li&gt;
	&lt;li&gt;gem: erubis 2.6.2&lt;/li&gt;
	&lt;li&gt;gem: genosaurus 1.2.1&lt;/li&gt;
	&lt;li&gt;gem: thin 0.8.2&lt;/li&gt;
	&lt;li&gt;gem: rspec 1.1.4&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>0.6.0 Coming VERY soon!</title>
   <link href="http://www.metabates.com/2008/07/10/060-coming-very-soon"/>
   <updated>2008-07-10T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/07/10/060-coming-very-soon</id>
   <content type="html">&lt;p&gt;Well folks, as you know, things have been a bit quiet on the Mack front these days, but it&amp;#8217;s all been for a very good reason. We&amp;#8217;ve been prepping the next release, 0.6.0. This release is expected to hit the streets sometime the beginning of next week. There&amp;#8217;s a lot of really great stuff in the release, DataMapper 0.9.2 support (finally!), RSpec testing support, a mack-more project to house a bunch of cool Mack related gems, Exception handling in Routing, and more&amp;#8230; A full list will be available when the release happens.&lt;/p&gt;

&lt;p&gt;In addition to the great new features, a lot of bugs have been worked out, and more of the API has solidified further. Because of some of these changes I&amp;#8217;ve posted an upgrade guide from 0.5.x to 0.6.0. This guide can be found on the &lt;a href=&#39;http://wiki.mackframework.com/index.php/en/Upgrading%20from%200.5.x%20to%200.6.x&#39;&gt;wiki&lt;/a&gt;.&amp;#160;&lt;/p&gt;

&lt;p&gt;This guide is meant to make upgrading as quickly and as a painless possible. There are a couple of big changes, but they should be fairly simple to make.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m very happy with this release, it&amp;#8217;s been long toiled over, and it shows. It&amp;#8217;s very stable, fast, and fun. I think everyone is really going to like it.&amp;#160;&lt;/p&gt;

&lt;p&gt;As more info about the release becomes available, I&amp;#8217;ll keep everyone posted.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Why so quiet?</title>
   <link href="http://www.metabates.com/2008/06/23/why-so-quiet"/>
   <updated>2008-06-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/23/why-so-quiet</id>
   <content type="html">&lt;p&gt;I&amp;#8217;m sure everyone is wondering why things have been so quiet around the Mack front recently. Well, there are a couple of reasons. One, I&amp;#8217;m on vacation in Ireland right now, so my coding time has dropped dramatically. Second, I&amp;#8217;m still very much so patiently awaiting the 0.9.2 release of DataMapper, which the next version of Mack needs. Third, there is a lot of Mack work afoot at the moment.&lt;/p&gt;

&lt;p&gt;The company I work has seen fit to give me a few more resources to help me make Mack the most kick ass framework out there. I&amp;#8217;ve not got 1.5 more bodies diligently working away on Mack, with another body to hopefully be hired in the next full weeks. That will mean, within a few weeks there will be 3.5 full time bodies working on Mack! Awesome!&lt;/p&gt;

&lt;p&gt;There are some great things that are going to be in the next build, but mostly it&amp;#8217;ll be a nice refactoring. We&amp;#8217;re going to splitting a bunch of stuff out of the core of Mack and putting into a mack-more package, similar to the approach Merb and DataMapper have adopted. In mack-more there will be l10n internationalization, RJS support (Prototype AND jQuery), DataMapper 0.9.x support, HAML, Markaby, PDF::Writer support, amongst others. It&amp;#8217;ll be nice. Trust me. :)&lt;/p&gt;

&lt;p&gt;We hope to have the next release out within the first or second week of July, of course, this really depends on when the DataMapper release can get out there. Once we get this release out, we can really focus on some extremely kick ass new features. Stay tuned!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby Opals</title>
   <link href="http://www.metabates.com/2008/06/23/ruby-opals"/>
   <updated>2008-06-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/23/ruby-opals</id>
   <content type="html">&lt;p&gt;At RubyConf a bunch of us sat around a few glasses of beer and had a &amp;#8216;bitch&amp;#8217; session about the state of Ruby Gems, a system we all consider be rather sub-par. At that session Tracy Flynn, friend and colleague of yours truly, said we should do something about it. He suggested we write RubyOpals. Well, Tracy is putting his money where his mouth is, &lt;a href=&#39;http://github.com/tflynn/rubyopals/tree/master&#39;&gt;http://github.com/tflynn/rubyopals/tree/master&lt;/a&gt;. I can tell you that I for one, can&amp;#8217;t wait for Ruby Opals! I&amp;#8217;ve already forked the project and started contributing! As soon as the first version is ready for release, I can tell you that Mack, Cachetastic, Genosaurus, etc&amp;#8230; will all be the first available as opals.&lt;/p&gt;

&lt;p&gt;I highly encourage all of you out there to add this project to your &amp;#8216;watch&amp;#8217; list on GitHub. And if you have the time, and want to help write something special, I highly encourage you to fork it and start contributing! Time to get out there and start making the Ruby world a much, much, much better place.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Wiki + DM 0.9.2</title>
   <link href="http://www.metabates.com/2008/06/13/wiki-dm-092"/>
   <updated>2008-06-13T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/13/wiki-dm-092</id>
   <content type="html">&lt;p&gt;Hey everyone, people have asked for it, so here it is, a Wiki for Mack:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://wiki.mackframework.com/&#39;&gt;http://wiki.mackframework.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ve placed a few tutorials up there, and it&amp;#8217;ll be the defacto place for such information.&lt;/p&gt;

&lt;p&gt;I highly encourage everyone to create an account and add to the knowledge base there.&lt;/p&gt;

&lt;p&gt;On a different note, it looks like the next version of DataMapper will be out in the next few days. This is great news for Mack developers as the next release of Mack has been held back because it requires stuff in the DataMapper 0.9.2. Once that&amp;#8217;s out, the next version of Mack will be right on it&amp;#8217;s tail! Keep watching this space.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.5.5.4</title>
   <link href="http://www.metabates.com/2008/06/10/release-0554"/>
   <updated>2008-06-10T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/10/release-0554</id>
   <content type="html">&lt;p&gt;This is actually a combined post about 0.5.5.3 and 0.5.5.4. They are both small patch releases, but they both address some pretty big problems.&lt;/p&gt;
&lt;strong&gt;0.5.5.3:&lt;/strong&gt;
&lt;p&gt;The new version of Passenger (aka mod_rails) now has support for Rack based applications. In their documentation they show how to use a Mack app with Passenger. The documentation is based on the yet to be released Thin adapter. With that said, both of those systems use a piece of Mack that&amp;#8217;s no longer there. Because of that I&amp;#8217;ve restored the small section of code, to make sure those two systems work with Mack. Which is great news.&lt;/p&gt;

&lt;p&gt;On some flavors of Unix when you do a Dir.glob you don&amp;#8217;t necessarily get back an ordered list of files. Because of that some people we&amp;#8217;re getting uninitialized constant errors. This has also been addressed in 0.5.5.3.&lt;/p&gt;
&lt;strong&gt;0.5.5.4:&lt;/strong&gt;
&lt;p&gt;A couple of people have reported issues where they were getting the following error even with the most simple application:&lt;/p&gt;

&lt;p&gt;&amp;#8220;Rack::Lint::LintError: env missing required key QUERY_STRING&amp;#8221;&lt;/p&gt;

&lt;p&gt;A Mack supporter by the name of Andre Ludwig stepped up to help me try and figure out the problem. I couldn&amp;#8217;t reproduce it on the machines I have access to, I suppose that goes without saying, because I could&amp;#8217;ve reproduced it, I would&amp;#8217;ve fixed it sooner. Anyway, Andre stepped up with both his time, spending most of his Sunday online with me, but also with his hardware. Andre opened up his server to me so I could go in there directly and play with things until I found the problem.&lt;/p&gt;

&lt;p&gt;Sure enough, once I got in there, it didn&amp;#8217;t take me too long to figure out what the problem was. It turned out to be a conflict between the latest version of Mongrel (1.1.5) and the latest version of Thin (0.8.1). A simple rewrite of the rake server task and voila! problem solved.&lt;/p&gt;

&lt;p&gt;So I would like to say thanks so much to Andre Ludwig for all his time and his hardware. I would also like to thank Saji for originally reporting the problem and for doing some troubleshooting for me as well.&lt;/p&gt;

&lt;p&gt;As the community grows I can&amp;#8217;t help but be awed by not only how much people are loving what Mack is doing, but also by the communities willingness to get involved and help out. Thanks so much everyone!&lt;/p&gt;

&lt;p&gt;Changelog 0.5.5.4: &lt;ul&gt;
	&lt;li&gt;Fixed the damn Lint error some people were facing!&lt;/li&gt;
&lt;/ul&gt; &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;div&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;Changelog 0.5.5.3: &lt;ul&gt;
	&lt;li&gt;Restored compatibility with Passenger and the next version of Thin.&lt;/li&gt;
	&lt;li&gt;Fixed &#39;requires&#39; out of order in certain flavors or unix. Hopefully.&lt;/li&gt;
&lt;/ul&gt;  &lt;/p&gt;
&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;/div&amp;gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Cachetastic 1.7.0 Release</title>
   <link href="http://www.metabates.com/2008/06/04/cachetastic-170-release"/>
   <updated>2008-06-04T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/04/cachetastic-170-release</id>
   <content type="html">&lt;p&gt;The simple, yet extremely powerful, Ruby caching framework, Cachetastic has been upgraded to 1.7.0. The big new feature of this release is the Cachetastic::Cacheable module. Including this module allows any class to become a Cache. &lt;pre&gt;class Person
include Cachetastic::Cacheable
end
Person.set_into_cache(:hi, &quot;Hello There&quot;)
Person.get_from_cache(:hi) #=&amp;gt; &quot;Hello There&quot;&lt;/pre&gt; Under the covers this creates a Cachetastic::Caches::Base object and proxies requests to it. This is a very simple example and belies the richness of the Cachetastic library. &lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://cachetastic-api.mackframework.com/&#39;&gt;http://cachetastic-api.mackframework.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Features: &lt;ul&gt;
	&lt;li&gt;Flexible configuration. All caches have can either have their own configurations, or they can inherit from a default configuration.&lt;/li&gt;
	&lt;li&gt;Easy to use Adapter API. Included adapters include, LocalMemory, Memcache, DRb, File, and more. With the Adapter API being so simple, it&#39;s easy to build your own custom adapter.&lt;/li&gt;
	&lt;li&gt;Flexible logging. Each cache can have it&#39;s own loggers, or they can use the default logger.&lt;/li&gt;
	&lt;li&gt;JIT caching. Through Ruby&#39;s powerful block structure, you can pass a block to a &#39;get&#39; call and have it run if the results from the get are either &#39;nil&#39; or &#39;empty&#39;&lt;/li&gt;
	&lt;li&gt;Cachetastic::Cacheable module turns any Object into a cache. It allows for any instance of that Object to cache and uncache itself.&lt;/li&gt;
	&lt;li&gt;And much more!&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>DataMapper 0.9.x and Mack</title>
   <link href="http://www.metabates.com/2008/06/01/datamapper-09x-and-mack"/>
   <updated>2008-06-01T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/06/01/datamapper-09x-and-mack</id>
   <content type="html">&lt;p&gt;As I&amp;#8217;ve told a lot of you my goal was to have a Mack release out by the end of RailsConf, which ends tomorrow, that would be rocking the newly released version of DataMapper, 0.9.1. The good news is I&amp;#8217;ve pretty much got it all done, and it works great! The bad news is I&amp;#8217;m not going to release it.&lt;/p&gt;

&lt;p&gt;Why is this you might ask? Why aren&amp;#8217;t I going to get Mack support for DataMapper 0.9.1 out there, if it already works. Great questions. The answer is simply this, migrations. I&amp;#8217;ve spent most of the weekend hanging out with a great guy by the name of Adam French. Adam is one of the core developer&amp;#8217;s of DataMapper. As a matter of fact, I just left Adam after we spent a couple of hours in the hotel bar writing a gem called, dm-voyeur, to allow for &amp;#8216;observing&amp;#8217; of DataMapper::Resource objects.&lt;/p&gt;

&lt;p&gt;Anyway, as I&amp;#8217;ve been hanging out with Adam I&amp;#8217;ve been trying to upgrade the Mack migration generator script to build the new style format for DataMapper 0.9.1. What I found though, was that migrations have a minor flaw, you have to write the SQL for the column! That means they aren&amp;#8217;t portable! This bit me in the butt when I had a migration I wrote against Postgres that would run, but wouldn&amp;#8217;t give me the results I expected in SQLite3. After spending most of the weekend complaining to Adam about this, he kindly pointed out that I have full commit access to DataMapper, and I should probably just fix the bloody thing myself. So that&amp;#8217;s what I&amp;#8217;ve done.&lt;/p&gt;

&lt;p&gt;The great news is that migrations are now pretty sweet. The bad news is I&amp;#8217;m not going to release Mack support for DataMapper 0.9.x until they put out the next release so everyone in the Mack universe can have a nice experience using the new migrations. Although I don&amp;#8217;t know just when the next release of DataMapper will be, I estimate that it will be relatively soon. Keep an eye on this space.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>RailsConf &#39;08</title>
   <link href="http://www.metabates.com/2008/05/27/railsconf-08"/>
   <updated>2008-05-27T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/27/railsconf-08</id>
   <content type="html">&lt;p&gt;Well folks, RailsConf &amp;#8216;08, is just about upon us. I&amp;#8217;m heading out to Portland, are you? If so, let&amp;#8217;s make contact. It&amp;#8217;ll be great to meet everyone who&amp;#8217;s been following Mack and supporting what we&amp;#8217;re doing here.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m going to be leading a Birds of a Feather session Thursday night, &amp;#8220;Rails Alternatives and You&amp;#8221; from 7.30pm - 8.30pm in room D133. There are going to representatives of Merb and DataMapper there as well, so it should be a good time. Again, it&amp;#8217;d be great to meet some of you.&lt;/p&gt;

&lt;p&gt;On Friday during lunch at 12.35pm, I&amp;#8217;ll be signing copies of the &amp;#8216;Advanced Rails Recipes&amp;#8217; book at the Powell&amp;#8217;s Book booth, along with some of the other authors. I think I&amp;#8217;m more excited about this than anything else happening at the rest of the conference!&lt;/p&gt;

&lt;p&gt;For those of you who have been to a RailsConf in the past, know it&amp;#8217;s a great time. For those who haven&amp;#8217;t, it&amp;#8217;s a great time. :) Last year I got to meet a lot of great people, and this year I&amp;#8217;m looking forward to meeting more. I hope you&amp;#8217;ll be one of them.&lt;/p&gt;

&lt;p&gt;See ya in Portland.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>OT: Some Music</title>
   <link href="http://www.metabates.com/2008/05/26/ot-some-music"/>
   <updated>2008-05-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/26/ot-some-music</id>
   <content type="html">&lt;p&gt;So I know this is off topic, but hey, it&amp;#8217;s my blog, I&amp;#8217;ll do what I want. My new band, &lt;a href=&#39;http://www.thebluewires.com&#39;&gt;The Blue Wires&lt;/a&gt;, has finally released it&amp;#8217;s first demos. We&amp;#8217;re pretty excited about them. If you have a moment, why not hop on over there and check them out, I think you&amp;#8217;ll enjoy!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.thebluewires.com/music/&#39;&gt;http://www.thebluewires.com/music/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.5.5</title>
   <link href="http://www.metabates.com/2008/05/21/release-055"/>
   <updated>2008-05-21T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/21/release-055</id>
   <content type="html">&lt;p&gt;Finally, Mack 0.5.5 is released! In addition to some great bug fixes, there is now a new rendering engine, support for automatic mime-types, the ability to register new mime-types, Markaby and Haml support, and much much more! It&amp;#8217;s a great release.&lt;/p&gt;

&lt;p&gt;To find out more about the new rendering engine check out these two posts:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackframework.com/2008/05/20/the-new-rendering-engine/&#39;&gt;http://www.mackframework.com/2008/05/20/the-new-rendering-engine/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackframework.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial/&#39;&gt;http://www.mackframework.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Ripped apart the ENTIRE rendering engine and rewrote it from the ground up. This means that wherever you are using &#39;render&#39; calls in your views and controllers need to be changed. The new format is render(type, value, options). Examples: render(:action, :show), render(:url, &quot;http://www.mackframework.com&quot;), etc...&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: Files named *.xml.erb need to be changed to *.xml.builder to use the Builder::XmlMarkup library. If you leave the .erb extension on there the file will be run through Erubis.&lt;/li&gt;
	&lt;li&gt;INCOMPATIBILITY NOTICE: &amp;lt;%= @content_for_layout %&amp;gt; is now &amp;lt;%= yield_to :view %&amp;gt;&lt;/li&gt;
	&lt;li&gt;Added Markaby support.&lt;/li&gt;
	&lt;li&gt;Added Haml support.&lt;/li&gt;
	&lt;li&gt;Added content_for and yield_to methods in views.&lt;/li&gt;
	&lt;li&gt;Erubis compiled templates are now cached for increased performance.&lt;/li&gt;
	&lt;li&gt;Added render(:inline) and render(:template) support.&lt;/li&gt;
	&lt;li&gt;Refactored, and reorganized some files to clean up the gem.&lt;/li&gt;
	&lt;li&gt;Fixed bug with cookies not merging with configured app_config parameters.&lt;/li&gt;
	&lt;li&gt;Added mime-types. The &#39;Content-Type&#39; header is now being set based on the format that is requested. Default is text/html.&lt;/li&gt;
	&lt;li&gt;Fixed r.defaults in routes so they are always the last routes to be checked, no matter where they are placed in the routes definitions.&lt;/li&gt;
	&lt;li&gt;render(:url) now recognizes &#39;local&#39; urls and tries to run them through the app, mimicking most headers from the original request.&lt;/li&gt;
	&lt;li&gt;Added &#39;options&#39; banners to the mack and mack_ring_server binaries.&lt;/li&gt;
	&lt;li&gt;gem: genosaurus 1.1.8&lt;/li&gt;
	&lt;li&gt;gem: mack_ruby_core_extensions 0.1.28&lt;/li&gt;
	&lt;li&gt;gem: markaby 0.5.0&lt;/li&gt;
	&lt;li&gt;gem: mack-data_mapper 0.5.5&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Preview (0.5.5): The New Rendering Engine</title>
   <link href="http://www.metabates.com/2008/05/20/the-new-rendering-engine"/>
   <updated>2008-05-20T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/20/the-new-rendering-engine</id>
   <content type="html">&lt;p&gt;In the latest version of Mack the rendering engine has been completely re-written from the ground up. With this comes some new features, some incompatibility, and most importantly, extensibility. Let&amp;#8217;s jump on in and see what we can expect with this release.&lt;/p&gt;

&lt;h3 id=&#39;incompatibility&#39;&gt;Incompatibility&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Gone is &lt;code&gt;&amp;lt;%= @content_for_layout %&amp;gt;&lt;/code&gt; in layouts. In is &lt;code&gt;&amp;lt;%= yield_to :view %&amp;gt;&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Gone is &lt;code&gt;render(options_hash)&lt;/code&gt; in controllers/views. In is &lt;code&gt;render(type, value, options_hash)&lt;/code&gt; Examples: &lt;code&gt;render(:action =&amp;gt; :new)&lt;/code&gt; is now &lt;code&gt;render(:action, :new)&lt;/code&gt; &lt;code&gt;render(:url =&amp;gt; &amp;quot;http://www.mackframework.com&amp;quot;, :parameters =&amp;gt; {:message =&amp;gt; &amp;quot;hi&amp;quot;})&lt;/code&gt; is now &lt;code&gt;render(:url, &amp;quot;http://www.mackframework.com&amp;quot;, :parameters =&amp;gt; {:message =&amp;gt; &amp;quot;hi&amp;quot;})&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;Gone is &lt;code&gt;*.xml.erb&lt;/code&gt;. In is &lt;code&gt;*.xml.builder&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#8217;s quickly talk about how these incompatibilities have come about. First there were several bugs that needed to be addressed with the rendering engine. For example, if you set an instance variable in a view, it wasn&amp;#8217;t available in the layout. That&amp;#8217;s a pain if you want to do things like programatically set the page title. There were also &amp;#8216;hacks&amp;#8217; used to do things like render xml using the &lt;code&gt;Builder::XmlMarkup&lt;/code&gt; library. It wasn&amp;#8217;t clean, but it worked. Finally, the rendering engine itself wasn&amp;#8217;t that extensible. All of that has now changed.&lt;/p&gt;

&lt;h3 id=&#39;render_me_softly&#39;&gt;Render Me Softly&lt;/h3&gt;

&lt;p&gt;In the new rendering engine there are two parts to the system, &lt;code&gt;Mack::Rendering::Type::*&lt;/code&gt; objects and &lt;code&gt;Mack::Rendering::Engine::*&lt;/code&gt; objects. Let me explain the difference.&lt;/p&gt;

&lt;h4 id=&#39;mackrenderingtype&#39;&gt;Mack::Rendering::Type::*&lt;/h4&gt;

&lt;p&gt;A type is something like &lt;code&gt;:action&lt;/code&gt;, &lt;code&gt;:text&lt;/code&gt;, &lt;code&gt;:inline&lt;/code&gt;, &lt;code&gt;:url&lt;/code&gt;, etc&amp;#8230; That is the type of thing you want to do. I want to render an action. I want to render a url, etc&amp;#8230; There are classes for each of these types, and you can easily add your own. These types do all sorts of work before they pass it off to an engine, if need be. For example, in the case of &lt;code&gt;Mack::Rendering::Type::Partial&lt;/code&gt; the render method does the work of inserting an &amp;#8216;_&amp;#8217; in the appropriate place, so the file can found.&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Once that happens it tries to find an engine to process the partial.&lt;/p&gt;

&lt;h4 id=&#39;mackrenderingengine&#39;&gt;Mack::Rendering::Engine::*&lt;/h4&gt;

&lt;p&gt;An engine does the actual work of rendering the io, with the binding of the &lt;code&gt;Mack::Rendering::ViewTemplate&lt;/code&gt; object, its been given by the results of the &lt;code&gt;render&lt;/code&gt; method in the &lt;code&gt;Mack::Rendering::Type::*&lt;/code&gt; object. Engine examples would be, Erubis (ERB), Markaby, Haml, and Builder::XmlMarkup, all of which are included with Mack in this release. New engines can easily be plugged in and registered with the system.&lt;/p&gt;

&lt;p&gt;Coming soon a tutorial on adding PDF::Writer support using the new system.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Preview (0.5.5): Adding PDF::Writer Plugin Support Tutorial</title>
   <link href="http://www.metabates.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial"/>
   <updated>2008-05-20T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/20/055-adding-pdfwriter-plugin-support-tutorial</id>
   <content type="html">&lt;p&gt;Ok, let&amp;#8217;s take the new rendering system out for a spin, shall we? Let&amp;#8217;s add the PDF::Writer library to our Obligatory Blog Demo application. If you haven&amp;#8217;t followed this demo you should do that &lt;a href=&#39;http://www.mackframework.com/2008/04/18/046-the-obligatory-blog-demo-take-2/&#39;&gt;now&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s start by requiring the gem in our system. Open up your gems.rb file found in config/initializers and let&amp;#8217;s add the gem: &lt;pre&gt;require_gems do |gem|
  gem.add &quot;pdf-writer&quot;, :version =&amp;gt; &quot;1.1.8&quot;, :libs =&amp;gt; &quot;pdf/writer&quot;
end&lt;/pre&gt; Great! We&amp;#8217;ve told Mack we want to use the &amp;#8216;pdf-writer&amp;#8217; gem, version &amp;#8216;1.1.8&amp;#8217;, and we want to automatically require the file &amp;#8216;pdf/writer&amp;#8217;. Now, let&amp;#8217;s install the gem: &lt;pre&gt;$ sudo rake gems:install&lt;/pre&gt; See how easy this is? We&amp;#8217;ve installed the gem, required the libraries, now we&amp;#8217;re ready to write our plugin. &lt;pre&gt;$ rake generate:plugin name=render_pdf&lt;/pre&gt; That should generate a few files/folders in our vendor/plugins directory. Let&amp;#8217;s open up vendor/plugins/render_pdf/lib/render_pdf.rb and let&amp;#8217;s start coding.&lt;/p&gt;

&lt;p&gt;What we want to do is create a new Mack::Rendering::Engine::Base class so that when we call render(:action) it will have a new engine to render the view file as a PDF.&lt;/p&gt;

&lt;p&gt;We&amp;#8217;ll examine each section in a minute, but for now, let&amp;#8217;s type this into our render_pdf.rb file: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;module Mack
  module Rendering
    module Engine
      class Pdf &amp;amp;lt; Mack::Rendering::Engine::Base&lt;/pre&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    def render(io, binding)
      @_pdf = ::PDF::Writer.new
      self.view_template.instance_variable_set(&amp;quot;@_pdf&amp;quot;, @_pdf)
      eval(io, binding)
      @_pdf.render
    end

    def extension
      :pdfw
    end

    module ViewHelpers
      def pdf
        @_pdf
      end
    end

  end
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;end end Mack::Rendering::ViewTemplate.send(:include, Mack::Rendering::Engine::Pdf::ViewHelpers) Mack::Rendering::Engine::Registry.register(:action, :pdf)&amp;lt;/pre&amp;gt; Ok, so on line #4 we extended Mack::Rendering::Engine::Base. This will give us access to a view methods, and will allow us to write to a very simple API. The only method you are &lt;em&gt;absolutely&lt;/em&gt; required to implement is the render method. As we can see on line #6, we did just that.&lt;/p&gt;

&lt;p&gt;First thing we do in the render method is instantiate a new PDF::Writer class and assign it to an instance variable. We then set that instance variable into the Mack::Rendering::ViewTemplate object we have. We do that because the way the PDF::Writer object works you need to constantly reference the instance of the writer to do your work. Example: &lt;pre&gt;@_pdf.text &quot;Hello World&quot;, :font_size =&amp;gt; 24, :justification =&amp;gt; :center&lt;/pre&gt; On line #9 we eval the io and the binding we&amp;#8217;ve been given. The io will be contents of the view file we have disk, as a String, and the binding will be that of the Mack::Rendering::ViewTemplate object we&amp;#8217;ve been given.&lt;/p&gt;

&lt;p&gt;In the extension method we tell the system that are files are going to be found with the extension, pdfw. Another example of this would be the Erubis engine which declares its extension as erb.&lt;/p&gt;

&lt;p&gt;The Mack::Rendering::Engine::Pdf::ViewHelpers module we&amp;#8217;ve declared on line #17 is there to hide the @_pdf instance variable with a nicer pdf method. On line #27 we include this module into Mack::Rendering::ViewTemplate so it has access to it.&lt;/p&gt;

&lt;p&gt;Finally, and most importantly, we need to register the new engine we&amp;#8217;ve built with the system. We do that on line #28 with this bit of code: &lt;pre&gt;Mack::Rendering::Engine::Registry.register(:action, :pdf)&lt;/pre&gt; That&amp;#8217;s saying whenever someone calls render(:action), consider me as an engine to render that. The way the selection of which engine to use is done, is very simple. First come first serve. The engines are in an array, and the first one to have a file with its extension on disk wins. Plain and simple.&lt;/p&gt;

&lt;p&gt;Now, let&amp;#8217;s see all this in action. Let&amp;#8217;s add PDF support for our &amp;#8216;show&amp;#8217; page.&lt;/p&gt;

&lt;p&gt;Open up views/posts/show.html.erb and add the following line: &lt;pre&gt;&amp;lt;%= link_to(&quot;pdf&quot;, posts_show_url(:id =&amp;gt; @post, :format =&amp;gt; :pdf)) %&amp;gt;&lt;/pre&gt; That will give us a link that looks like &amp;#8216;/posts/:id.pdf&amp;#8217;. This will, of course, go to our PostsController and the show action. This method does not need to be altered. That&amp;#8217;s right, you heard me. It does not need to change. Mack will handle the appropriate content-type headers for you. Just another great feature in 0.5.5.&lt;/p&gt;

&lt;p&gt;Create a file called views/posts/show.pdf.pdfw. I know this might look a little weird, what with &amp;#8216;pdf.pdfw&amp;#8217;, but here&amp;#8217;s the reason why. That&amp;#8217;s break the file name down into its three parts. &amp;#8216;show&amp;#8217; is the name of the action. &amp;#8216;pdf&amp;#8217; is the format of the request, think also html, xml, etc&amp;#8230; &amp;#8216;pdfw&amp;#8217; is the engine we want to use. If we hated ourselves we could do this all in erb with a file called show.pdf.erb, but why would we want to do that?&lt;/p&gt;

&lt;p&gt;Anyway, let&amp;#8217;s dump this nice block of code into our show.pdf.pdfw file: &lt;pre&gt;pdf.select_font &quot;Times-Roman&quot;
pdf.fill_color(Color::RGB::Red)
pdf.text @post.title, :font_size =&amp;gt; 24, :justification =&amp;gt; :center
pdf.fill_color(Color::RGB::Black)
pdf.text &quot;by #{@post.email}&quot;, :font_size =&amp;gt; 12, :justification =&amp;gt; :center
pdf.with_options(:font_size =&amp;gt; 10, :justification =&amp;gt; :left) do |p|
  p.text &quot;\n\n&quot;
  p.text @post.body
  p.text &quot;\n\n&quot;
  p.text &quot;Created at: #{@post.created_at}&quot;
  p.text &quot;Updated at: #{@post.updated_at}&quot;
end&lt;/pre&gt; Since this is not a tutorial on this particular gem, I&amp;#8217;m not going to go into what all that does. Instead, let&amp;#8217;s just have a look at it in action.&lt;/p&gt;

&lt;p&gt;Fire up your server: &lt;pre&gt;$ rake server&lt;/pre&gt; And go to: http://localhost:3000. If you don&amp;#8217;t already have a post created, create one. Now click on the show link. You should have a link on your page that says &amp;#8216;pdf&amp;#8217; click on that link. Voila! You should be seeing a wonderfully formatted PDF right now!&lt;/p&gt;

&lt;p&gt;Congrats! You&amp;#8217;ve built a plugin and a new rendering engine for Mack. Now, go crazy!&lt;/p&gt;

&lt;p&gt;The source for all this can be found at: &lt;a href=&#39;http://github.com/markbates/mack_blog_demo/tree/master&#39;&gt;http://github.com/markbates/mack_blog_demo/tree/master&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack on Lighthouse</title>
   <link href="http://www.metabates.com/2008/05/14/mack-on-lighthouse"/>
   <updated>2008-05-14T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/14/mack-on-lighthouse</id>
   <content type="html">&lt;p&gt;You&amp;#8217;ve asked for it, and now you&amp;#8217;ve got it. You can now find Mack on Lighthouse, &lt;a href=&#39;http://lighthouse.mackframework.com&#39;&gt;http://lighthouse.mackframework.com&lt;/a&gt;. So from now on if you find any bugs, etc&amp;#8230; please head on over there, and fill out a simple ticket, and let the bug tracking fun begin!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Boston Ruby Users Group Presentation</title>
   <link href="http://www.metabates.com/2008/05/13/boston-ruby-users-group-presentation"/>
   <updated>2008-05-13T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/13/boston-ruby-users-group-presentation</id>
   <content type="html">&lt;p&gt;Tonight I gave a presentation on Mack at the Boston Ruby Users Group. I like to think the presentation went very well. Lot&amp;#8217;s of great questions and feedback. Thanks to everyone who came.&lt;/p&gt;

&lt;p&gt;For those who couldn&amp;#8217;t make it, and for those who did, here is the slide deck I presented:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackframework.com/wp-content/uploads/2008/05/mack-brug.pdf&#39;&gt;Mack (Boston Ruby Users Group) Presentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.5.0</title>
   <link href="http://www.metabates.com/2008/05/06/release-050"/>
   <updated>2008-05-06T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/06/release-050</id>
   <content type="html">&lt;p&gt;I know I&amp;#8217;ve been talking about this release for a while now, and here it finally is. There&amp;#8217;s some good bug fixes in here, a few new rake tasks, and some other little things like that.&lt;/p&gt;

&lt;p&gt;The biggest thing, however, is what&amp;#8217;s been causing a stir online now for the past few days, I&amp;#8217;ve split out the ORM support into separate gems. I&amp;#8217;m not going to go over it again, you can find all the details here: &lt;a href=&#39;http://www.mackframework.com/2008/05/04/orms-and-mack/&#39;&gt;http://www.mackframework.com/2008/05/04/orms-and-mack/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Needless to say this is a good release to get, if not for the bug fixes alone, but for the great db:create rake tasks that are now in there. Thanks, again, to Darsono Sutedja for his great contributions.&lt;/p&gt;

&lt;p&gt;Changelog &lt;ul&gt;
	&lt;li&gt;Added rake db:create and db:create:all rake tasks.&lt;/li&gt;
	&lt;li&gt;Refactored out constants, such as MACK_ROOT and MACK_ENV and made them into Mack::Configuration.env, Mack::Configuration.root, etc...&lt;/li&gt;
	&lt;li&gt;Added test:stats and test:coverage Rake tasks.&lt;/li&gt;
	&lt;li&gt;Removed support for ActiveRecord and DataMapper and moved them into their own gems.&lt;/li&gt;
	&lt;li&gt;Fixed a bug where yields in ERB weren&#39;t giving the desired results.&lt;/li&gt;
	&lt;li&gt;DataMapper database.yml file can now be nested, and is generated as such.&lt;/li&gt;
	&lt;li&gt;Cleaned up some tests, and refactored the HTML generation stuff.&lt;/li&gt;
	&lt;li&gt;Fixed a bug with the scaffold generating &#39;bad&#39; methods instead of &#39;post&#39;&lt;/li&gt;
	&lt;li&gt;Made error_messages_for more compatible with DataMapper.&lt;/li&gt;
	&lt;li&gt;Fixed a bug loading url.rb and uploaded_file.rb found by Phil Darnowsky&lt;/li&gt;
	&lt;li&gt;[dsutedja] Render method (in controller_base) now accepts response status code.&lt;/li&gt;
	&lt;li&gt;gem: mack_ruby_core_extensions 0.1.23&lt;/li&gt;
	&lt;li&gt;gem: genosaurus 1.1.4&lt;/li&gt;
	&lt;li&gt;gem: datamapper 0.3.2&lt;/li&gt;
	&lt;li&gt;gem: rcov 0.8.1.2.0&lt;/li&gt;
	&lt;li&gt;gem: mack-data_mapper 0.5.0&lt;/li&gt;
	&lt;li&gt;gem: erubis 2.6.0&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Advanced Rails Recipes Book</title>
   <link href="http://www.metabates.com/2008/05/06/advanced-rails-recipes-book"/>
   <updated>2008-05-06T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/06/advanced-rails-recipes-book</id>
   <content type="html">&lt;p&gt;For those of you who haven&amp;#8217;t yet switched to Mack (and why not?) the new &lt;a href=&#39;http://www.pragprog.com/titles/fr_arr/advanced-rails-recipes&#39;&gt;Advanced Rails Recipes&lt;/a&gt; book is now shipping from the Pragmatic Programmers. The book features 84 recipes for build apps using Ruby on Rails. It just so happens that two of these recipes happen to be written by yours truly. That&amp;#8217;s right, I&amp;#8217;m now a published author. :) &lt;/p&gt;

&lt;p&gt;I suggest that everyone get yourself a copy of the book, read it top to bottom, then head on over to GitHub and incorporate some of what you&amp;#8217;ve just learned into Mack.&lt;/p&gt;

&lt;p&gt;Anyway, I just want to give a quick shout out to my boy Mike Clark who compiled and edited the book. He&amp;#8217;s a great guy and he did a great job. Thanks Mike!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ORMs and Mack</title>
   <link href="http://www.metabates.com/2008/05/04/orms-and-mack"/>
   <updated>2008-05-04T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/04/orms-and-mack</id>
   <content type="html">&lt;p&gt;So a lot has been made in the last few days about my decision to drop ActiveRecord&amp;#8217;s native support in &lt;a href=&#39;http://www.mackframework.com/2008/05/01/saying-goodbye-to-activerecord/&#39;&gt;Mack&lt;/a&gt;. People have asked why can&amp;#8217;t I keep what I already have in regards to support for ActiveRecord, and why can&amp;#8217;t I support Sequel. So, I&amp;#8217;ve decided to compromise.&lt;/p&gt;

&lt;p&gt;In the next version of Mack, which should be out in the next day or two, I&amp;#8217;ve broken out support for ActiveRecord and DataMapper into their own gems, &lt;a href=&#39;http://github.com/markbates/mack-orm/tree/master&#39;&gt;http://github.com/markbates/mack-orm/tree/master&lt;/a&gt;. That means you&amp;#8217;ll be able to still use ActiveRecord, if you want. The default ORM, however, will be DataMapper. That&amp;#8217;s what you&amp;#8217;ll get out of the box with Mack.&lt;/p&gt;

&lt;p&gt;Now, keeping with my original post, I&amp;#8217;ll be actively maintaining the mack-data_mapper gem, and when I can I&amp;#8217;ll make similar changes to the mack-active_record, but I&amp;#8217;m not promising anything. Now the good thing here is that since the repos for these gems are on GitHub, anyone can contribute changes/additions to them. I&amp;#8217;ve even put a stub in there for Sequel support, that&amp;#8217;s definitely something someone else will have to support.&lt;/p&gt;

&lt;p&gt;This also has a nice advantage in keeping the Mack core clean and simple. Hopefully this will all lead to faster development time turn around for Mack.&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s also worth noting that when I talk about &amp;#8216;native&amp;#8217; support, all I mean is some Rake tasks and some generators. There&amp;#8217;s nothing stopping anyone from using ANY ORM with Mack. You could even create your own, if you really wanted to.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s to hoping this makes everyone happy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Commit Access</title>
   <link href="http://www.metabates.com/2008/05/02/commit-access"/>
   <updated>2008-05-02T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/02/commit-access</id>
   <content type="html">&lt;p&gt;So after my post about dropping ActiveRecord for DataMapper, I&amp;#8217;ve received some very interesting feedback, mostly good, which is great. The best comment I received was from Sam Smoot, lead developer of DataMapper. Sam offered to give me commit access to the DataMapper repos on GitHub.&lt;/p&gt;

&lt;p&gt;I took Sam up on his offer and I&amp;#8217;ve already made several contributions. This is GREAT news for the Mack Framework. When the best technologies start working in concert, only good things can happen.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m really excited about what&amp;#8217;s happening with DataMapper 0.9.0, and I know it&amp;#8217;s only going to make Mack a better framework. I&amp;#8217;ve already started working on upgrading Mack to use, the yet unreleased, DataMapper 0.9.0 code base.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;ll keep you all posted.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Speaking @ The Boston Ruby Users Group</title>
   <link href="http://www.metabates.com/2008/05/01/speaking-the-boston-ruby-users-group"/>
   <updated>2008-05-01T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/01/speaking-the-boston-ruby-users-group</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve mentioned this before, but now the details are finally in. I&amp;#8217;ll be speaking at the Boston Ruby Users Group on May 13th.&lt;/p&gt;

&lt;p&gt;Here are the details: Sermo 215 First Ave. Cambridge, MA&lt;/p&gt;

&lt;p&gt;The show starts at 7pm.&lt;/p&gt;

&lt;p&gt;Also speaking that night are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Daniel Higginbotham will be presenting a tool he developed, Palmist, that is used to optimize MySQL databases on Rails sites. &lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Jonathan Barket will be presenting restful-authorization, an authorization and workflow mechanism built on top of restful_authentication &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;#8217;re in the neighborhood, and enjoy being a bit of a nerd, come on down.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Saying Goodbye to ActiveRecord</title>
   <link href="http://www.metabates.com/2008/05/01/saying-goodbye-to-activerecord"/>
   <updated>2008-05-01T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/05/01/saying-goodbye-to-activerecord</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been wrestling with this for a while now, and I&amp;#8217;ve finally made my peace with it. I&amp;#8217;ve decided to remove native support for ActiveRecord from Mack. From now on it&amp;#8217;ll be DataMapper by default, out of the box. This was not an easy decision to make. Essentially it boils down to one of the key tenants of Mack, use the best of breed technologies to build a best of breed framework. I truly feel that DataMapper, especially when it hits the 0.9.0 release, is the best ORM, and persistence, system out there. I also feel that it is a natural fit for the Mack framework.&lt;/p&gt;

&lt;p&gt;The other reason why I made the decision was time. It&amp;#8217;s very time consuming to constantly maintain two different, and with 0.9.0 extremely different, ORMs. There are plenty of features that I could&amp;#8217;ve done faster, had I only been supporting the one ORM.&lt;/p&gt;

&lt;p&gt;Now I know I might come under fire from some people for this, but it&amp;#8217;s a decision that I think is best for the framework. If some enterprising developer out there wants to build a plugin, or a gem, that adds ActiveRecord support, then I&amp;#8217;m all for it! Please do!&lt;/p&gt;

&lt;p&gt;The question you&amp;#8217;re probably asking yourself now, is when will this be happening. It&amp;#8217;ll be happening in the next release of Mack, probably the end of this week or the beginning of next week.&lt;/p&gt;

&lt;p&gt;Again, I&amp;#8217;m sorry for those of you were hoping to use ActiveRecord with Mack. Check out DataMapper, I&amp;#8217;m sure you&amp;#8217;ll be happy with it.&lt;/p&gt;

&lt;p&gt;Comments?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>New group/mailing list</title>
   <link href="http://www.metabates.com/2008/04/26/new-groupmailing-list"/>
   <updated>2008-04-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/26/new-groupmailing-list</id>
   <content type="html">&lt;p&gt;At several people&amp;#8217;s request I&amp;#8217;ve created a Google group for Mack. You can find it here: &lt;a href=&#39;http://groups.google.com/group/mack-framework&#39;&gt;http://groups.google.com/group/mack-framework&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.7</title>
   <link href="http://www.metabates.com/2008/04/25/release-047"/>
   <updated>2008-04-25T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/25/release-047</id>
   <content type="html">&lt;ol&gt;
&lt;li&gt;
&lt;li&gt;7 is a MUST have release. It fixes a few good bugs, like the ability to upload files now works! Plus it introduces a few nice little goodies.&lt;/li&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;File uploads are now pretty easy to do. There&amp;#8217;s a new Mack::Request::UploadedFile that helps to wrap the Hash that Rack gives you when you upload a file. Here&amp;#8217;s a simple example of it being used: &lt;pre&gt;class UploadsController &amp;lt; Mack::Controller::Base
  def create
    @my_new_file = request.file(:my_new_file)
    @my_new_file.save_to([MACK_PUBLIC, &quot;uploaded_files&quot;, @my_new_file.file_name])
  end
end&lt;/pre&gt; That&amp;#8217;s it! That&amp;#8217;s all you need to upload a file! I&amp;#8217;m going to add file uploads to the blog demo over the next few days.&lt;/p&gt;

&lt;p&gt;You can now do &amp;#8216;namespaced&amp;#8217; routes, such as Admin::UserController. You can very simply map them in your routes.rb as: &lt;pre&gt;r.resource &quot;admin/users&quot;&lt;/pre&gt; There&amp;#8217;s now a new rake task, generator:list, that shows all the generators available to your app.&lt;/p&gt;

&lt;p&gt;Darsono Sutedja gets the prize for being the first person, other than myself, to contribute to Mack. Thanks a ton Darsono! It&amp;#8217;s much appreciated.&lt;/p&gt;

&lt;p&gt;All of the generators now use the Genosaurus generator system. Not really that exciting, but it makes for a nice, cleaner code base.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s a few other things in there as well. The changelog below has a few more things. Enjoy!&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Added Mack::Request::UploadFile class to make dealing with file uploads easy.&lt;/li&gt;
	&lt;li&gt;Fixed bug where if a controller didn&#39;t exist it wasn&#39;t checking the public directory.&lt;/li&gt;
	&lt;li&gt;Generated DataMapper models no longer extend DataMapper::Base, but rather &#39;include DataMapper::Persistence&#39;. This corresponds to the 0.9.0 upcoming release of DataMapper.&lt;/li&gt;
	&lt;li&gt;Fixed a bug in request.params that was making file uploads into strings.&lt;/li&gt;
	&lt;li&gt;Namespaced resourced routes, such as Admin::UserController, now work.&lt;/li&gt;
	&lt;li&gt;Added rake generator:list task to list all the available generators.&lt;/li&gt;
	&lt;li&gt;scaffold generator now creates a stub functional test.&lt;/li&gt;
	&lt;li&gt;model generator now creates a stub unit test.&lt;/li&gt;
	&lt;li&gt;Rake tasks in plugins now show up in the Rake tasks list.&lt;/li&gt;
	&lt;li&gt;All generators, including the &#39;mack&#39; binary are now using Genosaurus.&lt;/li&gt;
	&lt;li&gt;[dsutedja] initializer will load MACK_APP/controllers/default_controller.rb if it exists&lt;/li&gt;
	&lt;li&gt;[dsutedja] added link_image_to and image_tag to html helper.&lt;/li&gt;
	&lt;li&gt;gem: thin 0.8.1&lt;/li&gt;
	&lt;li&gt;gem: genosaurus 1.1.1&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Thin Adapter</title>
   <link href="http://www.metabates.com/2008/04/23/thin-adapter"/>
   <updated>2008-04-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/23/thin-adapter</id>
   <content type="html">&lt;p&gt;So yesterday I committed a Mack adapter to &lt;a href=&#39;http://github.com/macournoyer/thin/commit/ce6d00751644715c82044d1194a34fc61ca0823d&#39;&gt;Thin&lt;/a&gt;. What does this mean? It means that in the next release of Thin there will native support for Mack. That means We can get rid of those silly config/thin.yml and config/thin.ru files. It also means we can make really easy use of all that the &amp;#8216;thin&amp;#8217; command line executable has to offer.&lt;/p&gt;

&lt;p&gt;When the next version of Thin comes out, there will be an update to Mack to support these changes.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Genosaurus 1.1.1</title>
   <link href="http://www.metabates.com/2008/04/23/genosaurus-111"/>
   <updated>2008-04-23T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/23/genosaurus-111</id>
   <content type="html">&lt;p&gt;So this week I took a small break away from Mack to build another library, &lt;a href=&#39;http://genosaurus-api.mackframework.com/&#39;&gt;Genosaurus&lt;/a&gt;. I found that in Mack I had basically written a generator system, so I extracted it out into a stand alone library that anybody can use, and I called it Genosaurus. Genosaurus is, in my opinion, an incredibly easy to use generator framework. Let&amp;#8217;s be honest, we&amp;#8217;ve all basically built a generator system at one point or another, so I&amp;#8217;ve just wrapped it up nicely. The next release of Mack, due out the end of this week, will have all it&amp;#8217;s generators converted to use Genosaurus. Let&amp;#8217;s take a look at a section of the README for Genosaurus: &lt;h3&gt;Implied Manifests&lt;/h3&gt; The easiest way to use Genosaurus is to let it do the work for you. Letâ€˜s looked at whatâ€˜s called an â€˜impliedâ€™ manifest: &lt;pre&gt;  dir:
    simple_generator.rb
    templates:
      hello_world.txt.template&lt;/pre&gt; Thatâ€˜s our folder structure. Now letâ€˜s look at simple_generator.rb: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;  require &amp;apos;rubygems&amp;apos;
  require &amp;apos;genosaurus&amp;apos;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;class SimpleGenerator &amp;#60; Genosaurus end&amp;lt;/pre&amp;gt; Now if we run that generator: &lt;pre&gt;  $irb: SimpleGenerator.run&lt;/pre&gt; We should get a file called hello_world.txt generated in the current directory. Yes, it truly is that simple! With implied manifests our directory structure under â€˜templatesâ€™ tells the whole story, and Genosaurus is smart enough to figure it out. All the file names, and the same goes for folders, need to end in .template, and Genosaurus will do the rest. All the files will go through ERB before they generated, so you can put all your lovely little dynamic goodies in there. File, and folder, names also get run through ERB so you can even make the file name dynamic too! Letâ€˜s look at a more complex example: &lt;pre&gt;  dir:
    complex_generator.rb
    templates:
      app:
        views:
          &amp;lt;%=param(:name).plural%&amp;gt;.template:
            hello_world.html.erb
        models:
          &amp;lt;%=param(:name)%&amp;gt;.rb.template&lt;/pre&gt; Letâ€˜s run our complex_generator.rb file: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;  require &amp;apos;rubygems&amp;apos;
  require &amp;apos;genosaurus&amp;apos;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;class ComplexGenerator &amp;#60; Genosaurus require_param: name end&amp;lt;/pre&amp;gt; Now if we run that generator: &lt;pre&gt;  $irb: ComplexGenerator.run(&quot;name&quot; =&amp;gt; &quot;user&quot;)&lt;/pre&gt; Now you should end up with the following: &lt;pre&gt;  app:
    views:
      users:
        hello_world.html.erb
    models:
      user.rb.template&lt;/pre&gt; In the ComplexGenerator we told Genosaurus that we are requiring that the parameter, name, be passed into it. We are then using that parameter to generate the names of some files and folders. Pretty cool, eh? See how simple that is. &lt;h3&gt;Explicit Manifests&lt;/h3&gt; Explicit manifests are used when there is a manifest.yml supplied at the same level as the generator. If there is a manifest.yml file then implied manifests are not used. This means you have to define the entire generation process. This is great if you have a pretty complicated generator, as the manifest.yml is also sent through ERB before being loaded. Letâ€˜s look at the manifest.yml file for our simple_generator example: &lt;pre&gt;  template_1:
    type: file
    template_path: &amp;lt;%= File.join(templates_directory_path, &quot;templates&quot;, &quot;hello_world.txt.template&quot;)
    output_path: hello_world.txt&lt;/pre&gt; Pretty simple. We give the template a name, template_1, it really doesnâ€˜t matter what it is, but Hash objects need keys. The â€˜typeâ€™ parameter is either file or directory. The template_path is the path to the template. Finally, the output_path is the where you want the file to be generated. Letâ€˜s look at our more complex example. We can change the directory structure a bit, since we really donâ€˜t need ERB in the file names now: &lt;pre&gt;  dir:
    complex_generator.rb
    templates:
      hello_world.html.erb.template
      model.rb.template&lt;/pre&gt; Our manifest.yml file would look like this: &lt;pre&gt;  hello_world_template:
    type: file
    template_path: &amp;lt;%= File.join(templates_directory_path, &quot;templates&quot;, &quot;hello_world.html.erb&quot;)
    output_path: &amp;lt;%= File.join(&quot;app&quot;, &quot;views&quot;, param(:name).plural, &quot;hello_world.html.erb&quot;) %&amp;gt;
  model_template:
    type: file
    template_path: &amp;lt;%= File.join(templates_directory_path, &quot;templates&quot;, &quot;model.html.erb&quot;)
    output_path: &amp;lt;%= File.join(&quot;app&quot;, &quot;models&quot;, &quot;#{param(:name)}.rb&quot;) %&amp;gt;&lt;/pre&gt; This will generate the exact same thing as our implied manifest.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.6</title>
   <link href="http://www.metabates.com/2008/04/18/release-046"/>
   <updated>2008-04-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/18/release-046</id>
   <content type="html">&lt;p&gt;This is a pretty cool release. First off Thin has been updated to 0.8.0, a rather nice, stable release. ERB has been replaced with &lt;a href=&#39;http://www.kuwata-lab.com/erubis/&#39;&gt;Erubis&lt;/a&gt; to give a significant improvement in speed, which, after all is one of Mack&amp;#8217;s most important traits. &lt;/p&gt;

&lt;p&gt;There&amp;#8217;s been a general overhaul of the generators included with Mack. Mostly, cleaning them up. With that said things like the scaffold, model, and migration generators have been updated to do what a lot of people have been asking for, that is take a &amp;#8216;cols&amp;#8217; parameter and build out the generated code corrrectly. This really makes life, very, very simple.&lt;/p&gt;

&lt;p&gt;There will be a re-written &amp;#8216;blog&amp;#8217; tutorial coming out soon to make use of this, as well as migration support that&amp;#8217;s now part of Mack.&lt;/p&gt;

&lt;p&gt;Very exciting stuff! Enjoy!&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Mack now uses Erubis, http://www.kuwata-lab.com/erubis/, for it&#39;s rendering engine instead of ERB. This makes Mack even faster now! Yippie!&lt;/li&gt;
	&lt;li&gt;Added rake generate:model name=&amp;lt;model_name&amp;gt; (optional: cols=&amp;lt;col_1&amp;gt;:&amp;lt;col_1_type&amp;gt;,&amp;lt;col_2&amp;gt;:&amp;lt;col_2_type&amp;gt;) This will also create a migration for you.&lt;/li&gt;
	&lt;li&gt;Updated rake generate:migration name=&amp;lt;model_name&amp;gt; (optional: cols=&amp;lt;col_1&amp;gt;:&amp;lt;col_1_type&amp;gt;,&amp;lt;col_2&amp;gt;:&amp;lt;col_2_type&amp;gt;) This will create the proper table migration for you.&lt;/li&gt;
	&lt;li&gt;Updated rake generate:scaffold to use the ModelGenerator now.&lt;/li&gt;
	&lt;li&gt;ScaffoldGenerator now create input fields based on the type of columns, if any, passed in.&lt;/li&gt;
	&lt;li&gt;Overall general refactoring of the generator classes.&lt;/li&gt;
	&lt;li&gt;Fixed a bug with request logging not, well, logging.&lt;/li&gt;
	&lt;li&gt;gem: erubis 2.5.0&lt;/li&gt;
	&lt;li&gt;gem: thin 0.8.0&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>0.4.6: The Obligatory &#39;Blog&#39; Demo - Take 2</title>
   <link href="http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2"/>
   <updated>2008-04-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/18/046-the-obligatory-blog-demo-take-2</id>
   <content type="html">&lt;p&gt;This post has moved to the wiki @&amp;#160;&lt;a href=&#39;http://wiki.mackframework.com/index.php/Blog%20Tutorial&#39;&gt;http://wiki.mackframework.com/index.php/Blog%20Tutorial&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.5</title>
   <link href="http://www.metabates.com/2008/04/14/release-045"/>
   <updated>2008-04-14T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/14/release-045</id>
   <content type="html">&lt;p&gt;Well, here it is! The release you all were waiting for, the one that finally gives migration support to Mack! That&amp;#8217;s right, now whether you use ActiveRecord or DataMapper, you can use the familiar rake task &amp;#8216;db:migrate&amp;#8217; to run your migrations. Yippie! The scaffold generator will also generate a migration for you, assuming you have ORM support enabled.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s still some work to go on this, like the ability to pass in command line args to the task to build the full migration for you, but it&amp;#8217;s a start! It&amp;#8217;s now pretty easy to get your app going.&lt;/p&gt;

&lt;p&gt;Also in this release is a rewrite of the distributed routing functionality. It&amp;#8217;s now been rewritten to use Rinda. This is going to be the standard for all the distributed functionality that will be coming Mack over the next couple of months. As more functionality lke this is developed, the more it will be wrapped in nice, easy to use APIs.&lt;/p&gt;

&lt;p&gt;There&amp;#8217;s also been some tidying up here in there in the code tree. For example, new applications don&amp;#8217;t get generated with a boot.rb file. Looking at it, there&amp;#8217;s really no need for it, since everything is done with Rake tasks.&lt;/p&gt;

&lt;p&gt;Overall, I&amp;#8217;m very happy with the release, and I feel that this release definitely makes Mack a VERY useable framework because of the migration support. Enjoy!&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Removed boot.rb file. It was unnecessary.&lt;/li&gt;
	&lt;li&gt;When a new Mack application is generated the Rakefile that gets generated is stamped with the Mack gem version used to create it. This ties the project to that gem. This can, of course, be upgraded as new Mack gems come out, but it&#39;s a good way of tying your app to a specific revision of Mack.&lt;/li&gt;
	&lt;li&gt;Added support for migrations for both ActiveRecord and DataMapper. DataMapper migration support requires DataMapper 0.3.0 gem. Please keep in mind, though, that DataMapper 0.3.0 has a serious bug in it, which may prevent you from using it. Please see [http://www.mackframework.com/2008/04/09/horrible-bug-in-datamapper-030/](http://www.mackframework.com/2008/04/09/horrible-bug-in-datamapper-030/) for more information.&lt;/li&gt;
	&lt;li&gt;Rewrote distributed routing support to use Rinda inside of plain old DRb. This makes for an almost zero configuration usage.&lt;/li&gt;
	&lt;li&gt;Added: mack_ring_server binary to start a Rinda ring server for use with distributed routing.&lt;/li&gt;
	&lt;li&gt;Sqlite3 is now the default database for Mack applications configured with ORM support.&lt;/li&gt;
	&lt;li&gt;Added a test helper method, rake_task, to aid in the testing of Rake tasks.&lt;/li&gt;
	&lt;li&gt;Added: rake generate:migration name=&amp;lt;migration_name&amp;gt;&lt;/li&gt;
	&lt;li&gt;Added: rake db:migrate&lt;/li&gt;
	&lt;li&gt;Added: rake db:abort_if_pending_migrations&lt;/li&gt;
	&lt;li&gt;Added: rake db:rollback&lt;/li&gt;
	&lt;li&gt;Added: rake db:version&lt;/li&gt;
	&lt;li&gt;Added: rake mack:ring_server:start&lt;/li&gt;
	&lt;li&gt;Added: rake mack:ring_server:stop&lt;/li&gt;
	&lt;li&gt;Added: rake mack:ring_server:restart&lt;/li&gt;
	&lt;li&gt;Added: rake mack:ring_server:services:list&lt;/li&gt;
	&lt;li&gt;gem: application_configuration 1.2.2&lt;/li&gt;
	&lt;li&gt;gem: daemons 1.0.10&lt;/li&gt;
&lt;/ul&gt; &lt;ol /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Ruby Inside review of Mack</title>
   <link href="http://www.metabates.com/2008/04/11/ruby-inside-review-of-mack"/>
   <updated>2008-04-11T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/11/ruby-inside-review-of-mack</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;http://www.rubyinside.com/mack-a-fast-best-of-the-rest-web-app-framework-856.html&#39;&gt;http://www.rubyinside.com/mack-a-fast-best-of-the-rest-web-app-framework-856.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you may, or may not not, I&amp;#8217;m a big fan of Ruby Inside. It&amp;#8217;s one of my favorite Ruby based blogs on the web. Peter Cooper does a great job with this site, and has recently started the RubyFlow.com website, which is a bit more of a &amp;#8216;firehouse of Ruby&amp;#8217; type site. &lt;/p&gt;

&lt;p&gt;Anyway, today Peter gave a very favorable review of Mack. I would definitely encourage you to head on over and have a read of it.&lt;/p&gt;

&lt;p&gt;Thanks Peter.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Migration support almost there.</title>
   <link href="http://www.metabates.com/2008/04/10/migration-support-almost-there"/>
   <updated>2008-04-10T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/10/migration-support-almost-there</id>
   <content type="html">&lt;p&gt;Now that I&amp;#8217;m back on track with DataMapper, I&amp;#8217;ve got migration support for both it and ActiveRecord just about done. In addition to the actual rake task, db:migrate (btw), I had to set up a good way to test rake tasks, something I&amp;#8217;ll share at a later date, but needless to say it&amp;#8217;s included with Mack. I also had to deal with the pain in the ass-ness of dealing with two VERY different ORMs, in the same test system! Let me tell you, that sucked!&lt;/p&gt;

&lt;p&gt;Good news is that things seem to be working, at least going in the &amp;#8216;up&amp;#8217; direction anyway. I still need to write the &amp;#8216;down&amp;#8217; direction revert stuff. Hopefully, that shouldn&amp;#8217;t take too long now that I have a good way of testing the task and the migration stuff.&lt;/p&gt;

&lt;p&gt;Unfortunately, I feel as though as soon as I release this stuff, which should be by the end of this weekend, DataMapper 0.9.0 will be out, and I&amp;#8217;ll have to re-write most of the DataMapper stuff because the API is changing so radically. I guess I&amp;#8217;ll just have to deal with that when the time comes.&lt;/p&gt;

&lt;p&gt;In the meantime I&amp;#8217;ll let y&amp;#8217;all know when migrations are done and out there in the wild.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The state of migrations and the distributed routes rework</title>
   <link href="http://www.metabates.com/2008/04/09/the-state-of-migrations-and-the-distributed-routes-rework"/>
   <updated>2008-04-09T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/09/the-state-of-migrations-and-the-distributed-routes-rework</id>
   <content type="html">&lt;p&gt;I was really hoping to get the rewrite of distributed routes using Rinda, as well as migration support for both ActiveRecord and DataMapper out either today, or by the end of the week. As it turns out, because of the Class bug in DataMapper 0.3.0 it doesn&amp;#8217;t look like that&amp;#8217;s going to happen till early next week. Sorry about that folks. I&amp;#8217;ve lost a lot of time on the DataMapper thing, but I&amp;#8217;ve got a work around, locally anyway, that is allowing me to keep developing. As soon as I get it all done, I&amp;#8217;ll be very happy to release it all. Stay tuned.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Temporary fix for the DataMapper bug</title>
   <link href="http://www.metabates.com/2008/04/09/temporary-fix-for-the-datamapper-bug"/>
   <updated>2008-04-09T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/09/temporary-fix-for-the-datamapper-bug</id>
   <content type="html">&lt;p&gt;If like me you&amp;#8217;re plagued by this DataMapper bug that kills your test cases. I&amp;#8217;ve packaged up a temporary version of the DataMapper gem that seems to fix the problem.&lt;/p&gt;

&lt;p&gt;WARNING: This gem is NOT sanctioned by the DataMapper team. Use at your own risk.&lt;/p&gt;

&lt;p&gt;If you use this gem and find any issues, please let me know. Also, if you use this gem and things seem to be working just fine, then please let me know that too. Good luck!&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://www.mackframework.com/wp-content/uploads/2008/04/datamapper-0301gem.zip&#39;&gt;DataMapper-0.3.0.1.gem&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>My thoughts on spec tests</title>
   <link href="http://www.metabates.com/2008/04/09/my-thoughts-on-spec-tests"/>
   <updated>2008-04-09T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/09/my-thoughts-on-spec-tests</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been asked by people why I&amp;#8217;m not using spec tests to test Mack. I&amp;#8217;m currently using just plain old regular unit tests for my tests. It&amp;#8217;s a good question, but not really a valid one, I think. Should it matter what type of tests I&amp;#8217;m using as long as I&amp;#8217;m testing? Tests are tests. The framework you use to do your tests is moot as long as the tests you write are good, solid tests.&lt;/p&gt;

&lt;p&gt;I jumped on the spec test bandwagon about a year or so ago. I forced my whole team to start writing in nothing but spec tests. The team, is still not impressed. If I were to tell them we weren&amp;#8217;t using spec tests anymore, they would be EXTREMELY happy with that.Spec tests are certainly prettier than &amp;#8216;regular&amp;#8217; tests. I&amp;#8217;ll give you that. They are more &amp;#8216;human readable&amp;#8217;. With that said I find assert_equal to be fairly easy to read.&lt;/p&gt;

&lt;p&gt;So why do I use regular tests, and not spec tests? A couple of reasons. First, they&amp;#8217;re there and built right in to Ruby, ready to go, no new gems or syntax to learn. They&amp;#8217;re fast. They are faster than spec tests. I see it everyday at work. I can also, and this one is HUGE, run just a single test or a regex&amp;#8217;d series of tests. I really love that last bit. I have yet to find a way to do that, easily, with spec tests.&lt;/p&gt;

&lt;p&gt;Again, how people write tests doesn&amp;#8217;t really matter so much to me, it&amp;#8217;s just that they write them. Testing is too easy in Ruby, there&amp;#8217;s just no reason for not writing them.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Horrible bug in DataMapper 0.3.0</title>
   <link href="http://www.metabates.com/2008/04/09/horrible-bug-in-datamapper-030"/>
   <updated>2008-04-09T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/09/horrible-bug-in-datamapper-030</id>
   <content type="html">&lt;p&gt;&lt;a href=&#39;http://wm.lighthouseapp.com/projects/4819-datamapper/tickets/185-including-comparable-in-class-class-breaks-test-unit-and-probably-more#ticket-185-8&#39;&gt;http://wm.lighthouseapp.com/projects/4819-datamapper/tickets/185-including-comparable-in-class-class-breaks-test-unit-and-probably-more#ticket-185-8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In the gem at the bottom of lib/data_mapper/support/typed_set.rb there is the following code: &lt;pre&gt;class Class
  include Comparable
  def &amp;lt;=&amp;gt;(other)
    name &amp;lt;=&amp;gt; other.name
  end
end&lt;/pre&gt; This causese Test::Runner to through up an error similar to this: &lt;pre&gt;/usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:25:in `collect&#39;: undefined method `suite&#39; for Gem::LoadError:Class (NoMethodError)
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `each_object&#39;
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `collect&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:58
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `[]&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `run&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:12:in `run&#39;
from /usr/local/lib/ruby/1.8/test/unit.rb:278
from /usr/local/lib/ruby/gems/1.8/gems/rake-0.8.1/lib/rake/rake_test_loader.rb:5
rake aborted!&lt;/pre&gt; It also causes your tests to blow up and not run. Which, if you&amp;#8217;re trying to do any development causes some real problems! If you comment out &amp;#8216;include Comparable&amp;#8217; from Class things seem to work just fine. I say seem, because I haven&amp;#8217;t done any real extensive testing with this. The other thing you can do is revert to 0.2.5, but that&amp;#8217;s up to you. Either way, it&amp;#8217;s not really optimal. Let&amp;#8217;s hope they fix this soon.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rethinking DataMapper</title>
   <link href="http://www.metabates.com/2008/04/07/rethinking-datamapper"/>
   <updated>2008-04-07T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/07/rethinking-datamapper</id>
   <content type="html">&lt;p&gt;So about 2 minutes after my post earlier about DataMapper a video was posted by one of the developers:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://mtnwestrubyconf2008.confreaks.com/04katz.html&#39;&gt;http://mtnwestrubyconf2008.confreaks.com/04katz.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I watched the video, start to finish, and I do believe I&amp;#8217;m starting to come around to the idea of DataMapper. I even understand why they do the &amp;#8216;properties&amp;#8217; in the model. Once you understand that DataMapper is meant to be used with an persistent back end, not just a database, that starts to make more sense.&lt;/p&gt;

&lt;p&gt;The concepts, and the ideas, behind what they&amp;#8217;re trying to do is really good, and I love some of the features that are hidden behind an almost ActiveRecord like syntax.&lt;/p&gt;

&lt;p&gt;With that said, I still don&amp;#8217;t understand why I&amp;#8217;m getting the performance numbers that I&amp;#8217;m getting. It just doesn&amp;#8217;t seem to right to me. I feel as though I&amp;#8217;m missing some fundamental.&lt;/p&gt;

&lt;p&gt;So, again, I throw the challenge out there to people to help me figure out why I&amp;#8217;m not seeing great numbers when it comes to DataMapper.&lt;/p&gt;

&lt;p&gt;In the meantime, I&amp;#8217;m going to start to really get to know it&amp;#8217;s API, because I think it has a lot of potential.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Let&#39;s talk DataMapper</title>
   <link href="http://www.metabates.com/2008/04/07/lets-talk-data-mapper"/>
   <updated>2008-04-07T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/07/lets-talk-data-mapper</id>
   <content type="html">&lt;p&gt;As you may, or may not know, DataMapper is the new ORM framework on the scene these days in the Ruby world. It&amp;#8217;s getting a lot of hype for being clean, fast, simple, and feature rich. Oh, and it&amp;#8217;s not ActiveRecord. I think that seems to be the real thing that is driving people to DataMapper, the fact that it&amp;#8217;s not ActiveRecord.&lt;/p&gt;

&lt;p&gt;I will say DataMapper is clean, simple, and feature rich. In 0.3.0 they&amp;#8217;ve added migrations, which is great. Btw, a little off topic, but I&amp;#8217;m working on migration support for both ActiveRecord and DataMapper in Mack as we speak. It should, hopefully, be out sometime this week. What I won&amp;#8217;t give DataMapper is that it&amp;#8217;s fast. In my tests, and I&amp;#8217;ll provide some number below, DataMapper only seems to win on inserts, after that ActiveRecord beats it hands down. In all fairness to DataMapper I&amp;#8217;m starting to think that the problems are not at the DataMapper layer, but at the underlying Data Objects layer that DataMapper uses. As you&amp;#8217;ll see from my tests DataMapper seems very heavily optimized towards MySQL over PostgreSQL. This, to me, leans towards a difference in the underlying adapters.&lt;/p&gt;

&lt;p&gt;Another problem I have with DataMapper is that I have to set the &amp;#8216;properties&amp;#8217; of the model inside the model itself. It&amp;#8217;s an old school approach, and it does have the benefit of being self documenting, but it also has the drawbacks of constant maintenance and clutter at the top of your model. Not to mention potential conflicts when running through migrations, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m also having one other little problem these days. This has only been a problem since I&amp;#8217;ve gone DataMapper 0.3.0. At the end of some of rake tasks, if I have DataMapper required, I get this:&lt;/p&gt;

&lt;p&gt;  &lt;pre&gt;/usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:25:in `collect&#39;: undefined method `suite&#39; for Gem::VerificationError:Class (NoMethodError)
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `each_object&#39;
from /usr/local/lib/ruby/1.8/test/unit/collector/objectspace.rb:23:in `collect&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:58
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `[]&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:213:in `run&#39;
from /usr/local/lib/ruby/1.8/test/unit/autorunner.rb:12:in `run&#39;
from /usr/local/lib/ruby/1.8/test/unit.rb:278&lt;/pre&gt; The rake task completed successfully, but I get this fairly random error message. If anyone out there is also getting this message, please let me know what it is. I&amp;#8217;m open for ideas on this one.&lt;/p&gt;

&lt;p&gt;Despite these issues I have with DataMapper, I&amp;#8217;m going to keep striving to provide support for both it and ActiveRecord in Mack. I think it&amp;#8217;s important to give people a choice and not force them to use the one I think is either easier to code for, or better. Both of which I&amp;#8217;m not saying about ActiveRecord, but in technologies in general.&lt;/p&gt;

&lt;p&gt;Anyway, enough of my blather, here are the test results I was speaking about:&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;span style=&#39;color: #800000;&#39;&gt;Running time 1.693881 seconds. [MESSAGE]: DM: postgresql: Inserts&lt;/span&gt;
&lt;p&gt;Running time 2.799189 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: AR: postgresql: Inserts&lt;/p&gt;

&lt;p&gt;Running time 1.368185 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: postgresql: Individual Reads &lt;span style=&#39;color: #800000;&#39;&gt;Running time 0.734143 seconds. [MESSAGE]: AR: postgresql: Individual Reads&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Running time 0.917551 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: postgresql: Bulk Reads &lt;span style=&#39;color: #800000;&#39;&gt;Running time 0.121198 seconds. [MESSAGE]: AR: postgresql: Bulk Reads&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Running time 2.309244 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: postgresql: Updates &lt;span style=&#39;color: #800000;&#39;&gt;Running time 2.079578 seconds. [MESSAGE]: AR: postgresql: Updates&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Running time 1.802914 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: postgresql: Deletes &lt;span style=&#39;color: #800000;&#39;&gt;Running time 1.708714 seconds. [MESSAGE]: AR: postgresql: Deletes&lt;/span&gt;&lt;/p&gt;
&lt;span style=&#39;color: #800000;&#39;&gt;Running time 0.433761 seconds. [MESSAGE]: DM: mysql: Inserts&lt;/span&gt;
&lt;p&gt;Running time 2.621093 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: AR: mysql: Inserts&lt;/p&gt;

&lt;p&gt;Running time 1.073741 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: mysql: Individual Reads &lt;span style=&#39;color: #800000;&#39;&gt;Running time 0.207305 seconds. [MESSAGE]: AR: mysql: Individual Reads&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Running time 0.827842 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: DM: mysql: Bulk Reads &lt;span style=&#39;color: #800000;&#39;&gt;Running time 0.073593 seconds. [MESSAGE]: AR: mysql: Bulk Reads&lt;/span&gt;&lt;/p&gt;
&lt;span style=&#39;color: #800000;&#39;&gt;Running time 1.204845 seconds. [MESSAGE]: DM: mysql: Updates&lt;/span&gt;
&lt;p&gt;Running time 1.738602 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: AR: mysql: Updates&lt;/p&gt;
&lt;span style=&#39;color: #800000;&#39;&gt;Running time 1.010774 seconds. [MESSAGE]: DM: mysql: Deletes&lt;/span&gt;
&lt;p&gt;Running time 1.251691 seconds. &lt;span&gt;MESSAGE&lt;/span&gt;: AR: mysql: Deletes&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt; &lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.2</title>
   <link href="http://www.metabates.com/2008/04/02/release-042"/>
   <updated>2008-04-02T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/04/02/release-042</id>
   <content type="html">&lt;p&gt;Another week, another release, eh? That seems to be the M.O. and today doesn&amp;#8217;t seem to be any difference. This week&amp;#8217;s release has a few new cool things in it, but overall isn&amp;#8217;t the sexiest of releases, but definitely one I would highly recommend downloading. &lt;h3&gt;Initializers&lt;/h3&gt; First up, the config/initializers directory. Any .rb files you put in this directory will be loaded up as part of the initialization process&lt;/p&gt;

&lt;p&gt;Current Mack initialization load order: &lt;ol&gt;
	&lt;li&gt;Configuration files.&lt;/li&gt;
	&lt;li&gt;Logging.&lt;/li&gt;
	&lt;li&gt;Orm Support, if any.&lt;/li&gt;
	&lt;li&gt;Mack libraries.&lt;/li&gt;
	&lt;li&gt;Routes.&lt;/li&gt;
	&lt;li&gt;Initializers.&lt;/li&gt;
	&lt;li&gt;Gems.&lt;/li&gt;
	&lt;li&gt;Plugins.&lt;/li&gt;
	&lt;li&gt;&#39;app&#39; files.&lt;/li&gt;
	&lt;li&gt;&#39;lib&#39; files.&lt;/li&gt;
	&lt;li&gt;Helpers.&lt;/li&gt;
&lt;/ol&gt; In a future release you&amp;#8217;ll be able to re-order this list as part of step #1, but that&amp;#8217;s a bit of a ways off for right now. Let&amp;#8217;s focus on what you can do right now. &lt;h3&gt;Gems&lt;/h3&gt; When you create a new Mack app you will find a file called gems.rb in config/initializers. There you can &amp;#8216;require&amp;#8217; gems into your application.&lt;/p&gt;

&lt;p&gt;Example: &lt;pre&gt;require_gems do |gem|
  gem.add :redgreen, :version =&amp;gt; &quot;1.2.2&quot;, :libs =&amp;gt; :redgreen
  gem.add :termios
  gem.add :rubyzip, :source =&amp;gt; &quot;http://gems.rubyforge.org&quot;
end&lt;/pre&gt; When the application gets loaded up it will call the &amp;#8216;gem&amp;#8217; method for each of the gems defined, and with specific versions, if defined. If the optional arrary &amp;#8216;libs&amp;#8217; is present it will &amp;#8216;require&amp;#8217; each of those files after the &amp;#8216;gem&amp;#8217; method has been called.&lt;/p&gt;

&lt;p&gt;There are also two rake tasks that help with gems: &lt;ul&gt;
	&lt;li&gt;gems:list - This lists all the gems required by the app.&lt;/li&gt;
	&lt;li&gt;gems:install - This will install all the gems required by the app. If a version is specified the task will attempt to install that specific version. If a source is specified then the source will be used to install the gem.&lt;/li&gt;
&lt;/ul&gt; &lt;h3&gt;Filters&lt;/h3&gt; In previous versions of Mack if you had a controller inherit from another controller and you had filters defined in the parent&amp;#8217;s controller they would not get run on the child controller. This has now been fixed.&lt;/p&gt;

&lt;p&gt;Example: &lt;pre&gt;class TopController &amp;lt; Mack::Controller::Base
  before_filter :log
  protected
  def log
    # do some logging here...
  end
end
class BottomController &amp;lt; TopController
end&lt;/pre&gt; The &amp;#8216;log&amp;#8217; filter method will now be called on actions in the BottomController class.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Added config/initializers directory. All files in this directory will be required at start up time.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Gems can now be required simply using the initializers/gems.rb file and the require_gems method.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added gems:list and gems:install rake tasks. The gems:list task will list any gems being required for the application. The gems:install task will install all the gems being required for the application.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Filters in controllers can now be inherited from parent controller classes.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;gem: mack_ruby_core_extensions 0.1.5&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;gem: thing 0.7.1&lt;/li&gt;
&lt;/ul&gt; &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The First Month</title>
   <link href="http://www.metabates.com/2008/03/27/the-first-month"/>
   <updated>2008-03-27T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/27/the-first-month</id>
   <content type="html">&lt;p&gt;It dawned on me today as I released 0.4.1 that&amp;#8217;s it has been one month since the first release, 0.0.4. What a month it&amp;#8217;s been! When 0.0.4 got released I hadn&amp;#8217;t been working on Mack for more than a few weeks. So really, Mack has been going for about six weeks now. It&amp;#8217;s funny to think how far the code has progressed, how many features have been developed, and most importantly, how much attention it&amp;#8217;s received.&lt;/p&gt;

&lt;p&gt;Firsts: &lt;ul&gt;
	&lt;li&gt;First Bug: Matt Todd found the first bug with a Mack. It was a simple bug with convert_security_of_methods the second parameter wasn&#39;t being used. Matt has since become a good friend of Mack, and has a couple of other firsts on this list.&lt;/li&gt;
	&lt;li&gt;First Blog Comment: Mr. Eel questioning the validatey of some rough DataMapper vs. ActiveRecord numbers I posted.&lt;/li&gt;
	&lt;li&gt;First Link to Mack: Matt Todd gets his second &#39;first&#39; of this list.&lt;/li&gt;
	&lt;li&gt;First &#39;Demo&#39; Request: Gregg Pollack from [RailsEnvy.com](http://www.railsenvy.com) requested a demo app so he could feature Mack on the RailsEnvy.com podcast.&lt;/li&gt;
	&lt;li&gt;First Podcast: I think this one is fairly obvious, but it goes to the [RailsEnvy.com ](http://www.railsenvy.com)guys. Thanks for the press!&lt;/li&gt;
	&lt;li&gt;First Speaking Request: Tom Dyer/Boston Ruby Users Group. I&#39;ll be speaking May 13th on the joys of Mack.&lt;/li&gt;
	&lt;li&gt;First Request to Contribute: Arun Agrawal.&lt;/li&gt;
	&lt;li&gt;First Tech Support Request: Brian Dunbar. He had some trouble running the demo app. Turns out it was a bad require in the cachetastic gem, that I subsequently fixed.&lt;/li&gt;
	&lt;li&gt;First &#39;Watcher&#39; on GitHub.com: Once again, Mr. Matt Todd! Gotta love the Matt.&lt;/li&gt;
	&lt;li&gt;First Fork on GitHub.com:          &lt;span id=&#39;profile_name&#39; rel=&#39;/users/kabari&#39;&gt;Kabari Hendrick. Based out of Chicago, [http://www.threedozen.com/](http://www.threedozen.com/), I&#39;m excited to see what he does with his fork.&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt; Wow! That&amp;#8217;s a lot of firsts for a first month. Here&amp;#8217;s a list of some of the features that have been released in that time: &lt;ul&gt;
	&lt;li&gt;Distributed Routes!&lt;/li&gt;
	&lt;li&gt;Better testing support&lt;/li&gt;
	&lt;li&gt;Built-in encryption/decryption&lt;/li&gt;
	&lt;li&gt;XML support&lt;/li&gt;
	&lt;li&gt;A Generator framework&lt;/li&gt;
	&lt;li&gt;&#39;Scaffold&#39; generator&lt;/li&gt;
	&lt;li&gt;Plugin support&lt;/li&gt;
	&lt;li&gt;Server-side redirects&lt;/li&gt;
	&lt;li&gt;Inflection&lt;/li&gt;
	&lt;li&gt;Render url&lt;/li&gt;
	&lt;li&gt;Extensible rendering system&lt;/li&gt;
	&lt;li&gt;&#39;Format&#39; driven content&lt;/li&gt;
&lt;/ul&gt; That&amp;#8217;s just a few things that have gone in there. That&amp;#8217;s not to mention refactoring, documentation, demo apps, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;I&amp;#8217;d like to this time to say thank you to everyone on the &amp;#8216;firsts&amp;#8217; lists. I would like to thank everyone else who&amp;#8217;s shown interest, commented, wrote about, or even just thought of Mack. Every comment on the site, every email I get, every blog link I see fills me with great happiness and makes me think that I&amp;#8217;m on to something here.&lt;/p&gt;

&lt;p&gt;I truly feel that there is a void for a Ruby web framework that deals with distributed, portal-like applications, and that&amp;#8217;s where Mack is headed. That&amp;#8217;s what makes Mack different from Rails or Merb or Ramaze or Sinatra or any other framework out there.&lt;/p&gt;

&lt;p&gt;What&amp;#8217;s on the horizon for Mack? A lot. I&amp;#8217;m going to be speaking at the Boston Ruby Users Group on May 13th. Of course, I&amp;#8217;ll be showing off Mack, so if you&amp;#8217;re in town, I would recommend coming on down. Details on that as we get closer to the event. You can expect more app to app communication, more generators, more ORM support, more testing support, page caching, &amp;#8216;portlets&amp;#8217;, and much much more!&lt;/p&gt;

&lt;p&gt;Once again, thanks to everyone for their support. I&amp;#8217;m looking forward to see what the future holds.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.1</title>
   <link href="http://www.metabates.com/2008/03/27/release-041"/>
   <updated>2008-03-27T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/27/release-041</id>
   <content type="html">&lt;p&gt;On the heels of yesterdays release of 0.4.0, there is a new release today, 0.4.1. Although this is not a &lt;em&gt;sexy&lt;/em&gt; release, as 0.4.0 was, this is an important release.&lt;/p&gt;

&lt;p&gt;What makes this release so important is that it fixes, adds, or improves testing support for Mack applications.&lt;/p&gt;

&lt;p&gt;The implementation of some of the testing stuff has changed under the covers, but it&amp;#8217;s the new stuff that is really important. let&amp;#8217;s take a look at some of the stuff: &lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;assigns(key)&lt;/strong&gt; - This one should be familiar to all you Rails folks out there. This allows you to get an instance variable that was set in a controller, and access it in your test.
&lt;pre&gt;def test_something
  get foo_index_url
  assert_not_nil assigns(:foo_list)
end&lt;/pre&gt;
&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;in_session&lt;/strong&gt; - This methods allows you to wrap a block in the context of a session. This is great if you&#39;re trying to do integration testing.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;set_cookie, remove_cookie&lt;/strong&gt; - These methods allow you to either set or a remove a cookie in your tests. Great if you want to test an action that reads a cookie, or test to see what happens if you set a cookie, then remove the cookie and call something else. Also great to use with the in_session method.&lt;/li&gt;
&lt;/ul&gt; There are a few other hidden treats in there, but those are some of the highlights. These things help bring Mack testing to a usable level.&lt;/p&gt;

&lt;p&gt;The Mack Demo Blog application has been updated to demonstrate some these things. You can pull the demo using Git here: &lt;a href=&#39;git://github.com/markbates/mack_blog_demo.git&#39;&gt;git://github.com/markbates/mack_blog_demo.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Improved testing support.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added assigns support to testing. This is allows for pulling instance variables that were set in a controller to tests.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added ability to do &#39;session&#39; based tests.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added assert_difference method.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added ability to set/remove cookies before requests are made.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;gem: mack_ruby_core_extensions 0.1.4&lt;/li&gt;
&lt;/ul&gt; &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Trac</title>
   <link href="http://www.metabates.com/2008/03/26/trac"/>
   <updated>2008-03-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/26/trac</id>
   <content type="html">&lt;p&gt;So after trying to use Trac for a few weeks now, I&amp;#8217;ve decided that right now it&amp;#8217;s just slowing me down. Particularly when dealing with roadmaps, etc&amp;#8230; So for now, if you find bugs, want to contribute, or you just have questions, simply visit the contribute page on this site and send me an email.&lt;/p&gt;

&lt;p&gt;As things progress and there are more contributors, and more people using Mack, this may all change. Until then&amp;#8230;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.4.0</title>
   <link href="http://www.metabates.com/2008/03/26/release-040"/>
   <updated>2008-03-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/26/release-040</id>
   <content type="html">&lt;p&gt;It&amp;#8217;s finally here! The release you&amp;#8217;ve all been waiting for, 0.4.0!! What&amp;#8217;s new in this one? Well, the big one, &lt;strong&gt;DISTRIBUTED ROUTING&lt;/strong&gt;!!! Now you can share your routes between all of your Mack applications.&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m very excited about this release. This is one of the first features that starts to set Mack apart from other Ruby frameworks such as Rails and Merb.  Mack is trying to set itself as the framework for doing multiple, distributed, portal applications. This release gets us headed in that direction.&lt;/p&gt;

&lt;p&gt;There will be a tutorial post and app in the next few days. In the meantime I highly encourage you to download this release and check it out.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Added Distributed Routes!&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;gem: mack_ruby_core_extensions 0.1.3&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;removed gem: ruby_extensions&lt;/li&gt;
&lt;/ul&gt; &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Announcing Mack Ruby Core Extensions</title>
   <link href="http://www.metabates.com/2008/03/26/announcing-mack-ruby-core-extensions"/>
   <updated>2008-03-26T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/26/announcing-mack-ruby-core-extensions</id>
   <content type="html">&lt;p&gt;Mack has been using a combination of the ruby_extensions gem as well some local extensions to the Ruby core in order to make Mack as wonderful as it is. In an effort to make life a little simpler, as well as to help share the wealth, the ruby_extensions gem and the Mack extensions have been combined into a single new gem called mack_ruby_core_extensions.&lt;/p&gt;

&lt;p&gt;One of the main Mack pieces that has been broken out into this new gem is the inflection system. Now you can have inflections as part of any Ruby application just by requiring the gem. As far as I can tell this is the first stand alone inflection system for Ruby. I know because I couldn&amp;#8217;t find one for Mack, that&amp;#8217;s why I had to write one.&lt;/p&gt;

&lt;p&gt;This gem will continually be updated, outside of the core Mack code. The forthcoming release of Mack, 0.4.0, will be converted to use the new gem.&lt;/p&gt;

&lt;p&gt;Those who wish to contribute to the gem can find it on GitHub at: &lt;a href=&#39;http://github.com/markbates/mack_ruby_core_extensions&#39;&gt;http://github.com/markbates/mack_ruby_core_extensions&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The API for mack_ruby_core_extensions can be found at: &lt;a href=&#39;http://mrce-api.mackframework.com/&#39;&gt;http://mrce-api.mackframework.com/&lt;/a&gt; &lt;pre&gt; $ sudo gem install mack_ruby_core_extensions&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack on GitHub.com</title>
   <link href="http://www.metabates.com/2008/03/21/mack-on-githubcom"/>
   <updated>2008-03-21T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/21/mack-on-githubcom</id>
   <content type="html">&lt;p&gt;The Mack source tree is now hosted on GitHub.com&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://github.com/markbates/mack&#39;&gt;http://github.com/markbates/mack&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you would like to pull it down you can clone it with:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;git://github.com/markbates/mack.git&#39;&gt;git://github.com/markbates/mack.git&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For those of you interested in contributing you can create an account with GitHub, fork the Mack project, go nuts with your changes, and then send me a pull request. It&amp;#8217;s all very well explained on the GitHub site.&lt;/p&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.3.0</title>
   <link href="http://www.metabates.com/2008/03/19/release-030"/>
   <updated>2008-03-19T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/19/release-030</id>
   <content type="html">&lt;p&gt;I&amp;#8217;ve been holding back this release so I could get distributed routing into it, but it appears that there&amp;#8217;s still a little more work that needs to be done before it&amp;#8217;s ready to go. I&amp;#8217;m hoping to get it out by the beginning of next week, but don&amp;#8217;t quote me on that.&lt;/p&gt;

&lt;p&gt;Instead of focusing on what didn&amp;#8217;t make it in, let&amp;#8217;s talk about what did make it in! There&amp;#8217;s some cool stuff in this release. &lt;h3&gt;Format Driven Content&lt;/h3&gt; Mack now allows you to drive different content based on the format requested. For example:&lt;/p&gt;

&lt;p&gt;/posts - will render app/views/posts/index.html.erb /posts.html - will also render app/views/posts/index.html.erb /posts.xml - will render app/views/posts/index.xml.erb - A special note &lt;em&gt;.xml.erb files, despite their name, do NOT get run through ERB, instead they use the XML Builder library /posts.js - will render app/views/posts/index.js.erb etc&amp;#8230;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, in your action you can now define &amp;#8216;want&amp;#8217; blocks, to run specific code based on the format. Example: &lt;pre&gt;class PostsController
  def index
    # find all the posts in the system
     @posts = Post.find(:all)
    wants(:html) do
      # this will only be run if html is requested.
      # we need a username for a &#39;welcome message in the view&#39;
      @username = @user.username
    end
    wants(:xml) do
      # this will only be run if html is requested.
      # find the last published date
      @last_pub_date = Rss.find_last_by_date_by_object(:posts)
    end
  end
end&lt;/pre&gt; &lt;h3&gt;XML Builder Support&lt;/h3&gt; I&amp;#8217;m not going to go into this, there is another nice post coming shortly that will explain how to use this library to add RSS to our blog demo. Here&amp;#8217;s the &lt;a href=&#39;http://www.mackframework.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo/&#39;&gt;post&lt;/a&gt;. &lt;h3&gt;Built-in Encryption&lt;/h3&gt; In every app I&amp;#8217;ve ever built I found the need to use encryption. Whether it&amp;#8217;s for encrypting something into a cookie, a password in the database, or a file on disk, we all need encryption, so I&amp;#8217;ve baked the crypt gem into Mack.&lt;/p&gt;

&lt;p&gt;At the very simple level you can easily do this in your code: &lt;pre&gt;@my_encrypted_value = _encrypt(&quot;hello world&quot;)&lt;/pre&gt; and you&amp;#8217;ll be returned a nice pieced of garbled data using the Crypt/Rijndael library. Decrypting is just as easy: &lt;pre&gt;_decrypt(@my_encrypted_value) # =&amp;gt; &quot;hello world&quot;&lt;/pre&gt; See, I told you it couldn&amp;#8217;t be easier. It gets even better you can even define your own &amp;#8216;worker&amp;#8217; to implement other encryption schemes. It&amp;#8217;s as simple as this: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;class Mack::Utils::Crypt::HorribleWorker
  def encrypt(value)
    value.reverse
  end
  def decrypt(value)
    value.reverse
  end
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;encrypt(&amp;#8220;hello&amp;#8221;, :horrible) # =&amp;#62; &amp;#8220;olleh&amp;#8221;&lt;/em&gt;decrypt(&amp;#8220;decrypt&amp;#8221;, :horrible) # =&amp;#62; &amp;#8220;hello&amp;#8221;&amp;lt;/pre&amp;gt; See how easy that was? You can also do: &lt;pre&gt;@my_encrypted_value = &quot;Hello&quot;.encrypt
@my_encrypted_value.decrypt #=&amp;gt; &quot;Hello&quot;&lt;/pre&gt; Either way it&amp;#8217;s now easy to handle encryption in your funky cool Mack app.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Ticket: #8 Xml Builder Support&lt;/li&gt;
	&lt;li&gt;Ticket: #7 Ability to drive certain content based on &#39;format&#39;&lt;/li&gt;
	&lt;li&gt;Ticket: #9 Added a global encryption system to make encrypting/decrypting of strings easy to use&lt;/li&gt;
	&lt;li&gt;gem: builder 2.1.2&lt;/li&gt;
	&lt;li&gt;gem: crypt 1.1.4&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>0.3.0: Adding RSS/xml feeds to our Blog demo</title>
   <link href="http://www.metabates.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo"/>
   <updated>2008-03-19T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/19/adding-rssxml-feeds-to-our-blog-demo</id>
   <content type="html">&lt;p&gt;Ok, as you remember a while back we created a simple blog using mack, &lt;a href=&#39;http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/&#39;&gt;http://www.mackframework.com/2008/03/04/the-obligatory-blog-demo/&lt;/a&gt;. Well now it&amp;#8217;s time to add the all important RSS/xml feed to it.&lt;/p&gt;

&lt;p&gt;Mack 0.3.0 introduces xml rendering support natively, so this shouldn&amp;#8217;t be so hard. First things first, let&amp;#8217;s fire up the app, shall we: &lt;pre&gt;$ rake server&lt;/pre&gt; Now let&amp;#8217;s head over to http://localhost:3000/posts. We should see our beautiful posts index page. Now let&amp;#8217;s try to go to http://localhost:3000/posts.xml you should see something that looks like this:&lt;/p&gt;
&lt;img alt=&#39;XML blog demo 1&#39; src=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/xml1.png&#39; width=&#39;450&#39; /&gt;
&lt;p&gt;Clearly, that&amp;#8217;s not what we want, is it? I didn&amp;#8217;t think so. The error is telling us that it&amp;#8217;s looking for a file called index.xml.erb in the app/views/posts directory of our blog project. Obviously that file doesn&amp;#8217;t exist.&lt;/p&gt;

&lt;p&gt;Let&amp;#8217;s take a second and talk about &lt;em&gt;why&lt;/em&gt; Mack was looking for index.xml.erb. We haven&amp;#8217;t changed anything in our controller. Our index method still looks something like this: &lt;pre&gt;def index
  @posts = Post.find(:all)
end&lt;/pre&gt; No where in there does it mention xml. The only place xml is mentioned is on the the url itself, remember? We looked for /posts.xml. By adding .xml you&amp;#8217;re telling Mack that you want to render, well&amp;#8230; xml. So it goes looking for that. That&amp;#8217;s also new in 0.3.0. The default is html, but if you append a format (.js, .xml, etc&amp;#8230;), it will go looking for app/views/&amp;#60;controller_name&amp;#62;/&amp;#60;action_name&amp;#62;.&amp;#60;format&amp;#62;.erb and render it.&lt;/p&gt;

&lt;p&gt;Ok, now that we understand why we&amp;#8217;re looking for an xml file, let&amp;#8217;s fire up our trusty text editor and create a new file called: app/views/posts/index.xml.erb. Let&amp;#8217;s edit the file to look like this: &lt;pre&gt;xml.instruct! :xml, :version=&amp;gt;&quot;1.0&quot;
xml.rss(:version =&amp;gt; &quot;2.0&quot;) do
  xml.channel do
    xml.title(&quot;My Mack Blog&quot;)
    xml.link(posts_index_full_url)
    xml.description(&quot;Find out about all the cool stuff happening on my blog!&quot;)
    xml.language(&quot;en-us&quot;)
    xml.copyright(&quot;Copyright Me&quot;)
    xml.pubDate(CGI.rfc1123_date(Time.now))
    xml.lastBuildDate(CGI.rfc1123_date(Time.now))
    @posts.each do |post|
      xml.entry do
        xml.title(post.title)
        xml.link(posts_show_full_url(:id =&amp;gt; post.id))
        xml.description(post.body)
        xml.pubDate(post.created_at.strftime(&quot;%a, %d %b %Y %H:%M:%S&quot;))
      end
    end
  end
end&lt;/pre&gt; Mack uses the standard builder gem library. I&amp;#8217;m not going to go into explaining how that works, there are plenty of other tutorials and documentation that will show you that. I&amp;#8217;m also not going to explain all the necessary pieces of an RSS feed. Instead I&amp;#8217;ll point out in that code you&amp;#8217;ll see we&amp;#8217;re using the @posts instance variable that we set in the index action of our PostsController. Just like regular &lt;em&gt;.html.erb files we have access to all the instance variables from the controller, as well, helpers, etc&amp;#8230;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So now if we go to http://localhost:3000/posts.xml we should see our RSS feed. If we did a view source we should see something that looks like this: &lt;pre id=&#39;line1&#39;&gt;&lt;span class=&#39;pi&#39;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&amp;lt;&lt;span class=&#39;start-tag&#39;&gt;rss&lt;/span&gt;&lt;span class=&#39;attribute-name&#39;&gt; version&lt;/span&gt;=&lt;span class=&#39;attribute-value&#39;&gt;&quot;2.0&quot;&lt;/span&gt;&amp;gt;
 &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;channel&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;title&lt;/span&gt;&amp;gt;My Mack Blog&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;title&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;link&lt;/span&gt;&amp;gt;http://localhost:3000/posts&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;link&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;description&lt;/span&gt;&amp;gt;Find out about all the cool stuff happening on my blog!&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;description&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;language&lt;/span&gt;&amp;gt;en-us&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;language&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;copyright&lt;/span&gt;&amp;gt;Copyright Me&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;copyright&lt;/span&gt;&amp;gt;&lt;/pre&gt; &lt;pre id=&#39;line9&#39;&gt;  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;pubDate&lt;/span&gt;&amp;gt;Tue, 18 Mar 2008 17:18:05 GMT&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;pubDate&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;lastBuildDate&lt;/span&gt;&amp;gt;Tue, 18 Mar 2008 17:18:05 GMT&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;lastBuildDate&lt;/span&gt;&amp;gt;
  &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;entry&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;title&lt;/span&gt;&amp;gt;My New Post&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;title&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;link&lt;/span&gt;&amp;gt;http://localhost:3000/posts/1&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;link&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;description&lt;/span&gt;&amp;gt;This is my first post in my cool Mack blog!&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;description&lt;/span&gt;&amp;gt;&lt;/pre&gt; &lt;pre id=&#39;line15&#39;&gt;   &amp;lt;&lt;span class=&#39;start-tag&#39;&gt;pubDate&lt;/span&gt;&amp;gt;Tue, 18 Mar 2008 11:58:30&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;pubDate&lt;/span&gt;&amp;gt;
  &amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;entry&lt;/span&gt;&amp;gt;
 &amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;channel&lt;/span&gt;&amp;gt;
&amp;lt;/&lt;span class=&#39;end-tag&#39;&gt;rss&lt;/span&gt;&amp;gt;&lt;/pre&gt; Awesome! All that&amp;#8217;s really left is create one of those fancy RSS tags in the location field of our browsers that people can click and go straight to the RSS feed. Let&amp;#8217;s do that now.&lt;/p&gt;

&lt;p&gt;At the top of your app/views/posts/index.html.erb file add the following: &lt;pre&gt;&amp;lt;%= rss_tag(posts_index_url(:format =&amp;gt; :xml)) %&amp;gt;&lt;/pre&gt; Now, refresh the page in your browser, and there you go, you should now see the little RSS button in the location bar of your browser. If you click that you should be taken to your feed.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s all there is to adding not only xml, but an RSS feed to your new blog.&lt;/p&gt;

&lt;p&gt;The code for this demo can be found &lt;a href=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/mack_blog_demo.zip&#39; title=&#39;Blog Demo w/ XML&#39;&gt;here&lt;/a&gt;.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>&#39;Helpers&#39; in Mack</title>
   <link href="http://www.metabates.com/2008/03/18/helpers-in-mack"/>
   <updated>2008-03-18T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/18/helpers-in-mack</id>
   <content type="html">&lt;p&gt;Let&amp;#8217;s talk a bit about &amp;#8216;helpers&amp;#8217; in Mack, shall we? &lt;h2&gt;How does Rails handle helpers?&lt;/h2&gt; Those of  you familiar with Rails are already familiar with this concepts. In Rails helpers are modules of code that get included into views for certain controllers, or all controllers in the case of ApplicationHelper. These helpers are meant to clean up the views and encapsulate commonly used Ruby code and keep it out of the views. In Rails 2.0 it&amp;#8217;s easier now to include some of these helper methods into the controller, but by default, they&amp;#8217;re not readily available. &lt;h2&gt;How does Mack handle helpers?&lt;/h2&gt; Mack deals with helpers a little differently. Let&amp;#8217;s start with ApplicationHelper. In Rails, ApplicationHelper gets included into all the views for every controller. This is extremely useful, and from my experience it&amp;#8217;s the most used helper in Rails. The same is true of Mack. Regardless of which controller/view you&amp;#8217;re in, ApplicationHelper is there to assist. This brings us to our first difference between Rails and Mack:&lt;/p&gt;
&lt;strong&gt;* ApplicationHelper is included into both the views AND the controllers.&lt;/strong&gt;
&lt;p&gt;That&amp;#8217;s right, you no longer have to do special voodoo magic to get the contents of ApplicationHelper included into your controller, it&amp;#8217;s right there by default, ready to go. Now, I know at this stage you&amp;#8217;re saying, if ApplicationHelper is included into all controllers, as well as views, then aren&amp;#8217;t the methods in there publicly accessible as actions? The answer is no. Which brings us to our next point on helpers:&lt;/p&gt;
&lt;strong&gt;* All helper public helper methods are converted to protected methods prior to be included into controllers/views.&lt;/strong&gt;
&lt;p&gt;By converting all public methods in helpers to protected methods we get around the security concerns regarding the methods becoming publicly available actions in the controllers.&lt;/p&gt;

&lt;p&gt;Now, in Rails when you create a controller it creates a new helper module file for that controller. The idea being that you can put helpers into this module that are only available to that controller&amp;#8217;s views.&lt;/p&gt;
&lt;strong&gt;* Mack helpers are NOT controller specific.&lt;/strong&gt;
&lt;p&gt;Mack, doesn&amp;#8217;t do what Rails does in this respect. It&amp;#8217;s been my personal experience that these files end up empty and just take up space on my disk. So screw em! We don&amp;#8217;t need em. &lt;h2&gt;Mack only helper concepts&lt;/h2&gt; Ok, so we&amp;#8217;ve covered the basics of helpers, let&amp;#8217;s talk about a couple of concepts that are available only in the Mack world. &lt;h3&gt;Controller Helpers:&lt;/h3&gt; What are controller helpers? In my experience working with Rails I found that I would have &amp;#8216;helper&amp;#8217; methods, protected or private of course, in my controllers that were meant to assist the actual actions in that controller. Two things eventually dawned on me. The first was that I&amp;#8217;m cluttering up my controllers with all these helper methods. The second was that there should be a way to share these amongst other controllers that could probably use them as well. (Example, methods dealing with authentication)&lt;/p&gt;

&lt;p&gt;In the Rails world I wrote a gem, controller_helpers, that helps to facilitate this. Well, being as this is the Mack world, this facility is built right in.&lt;/p&gt;

&lt;p&gt;If you go and create a module in the app/helpers folder that&amp;#8217;s follows the naming convention &amp;#60;controller_name&amp;#62;Helper then it will automatically be included into the appropriate controller. Two things to note here, the security model is still applied, public methods become protected methods. The second is these methods are available in that controller ONLY. They are not available in other controllers or any views within that controller. &lt;pre&gt;class BlogController &amp;lt; Mack::Controller::Base
  before_filter :authenticate
end&lt;/pre&gt; &lt;pre&gt;module BlogControllerHelper
  def authenticate
    # do work to authenticate user here...
  end
end&lt;/pre&gt; As we see the controller name in the previous example was BlogController and it&amp;#8217;s helper name was BlogControllerHelper. Now in the example we had an authenticate method in BlogControllerHelper, we realize that we also want to use that in our CommentsController as well. So we can refactor that example to look like this: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;class BlogController &amp;amp;lt; Mack::Controller::Base
  before_filter :authenticate
end&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;class CommentsController &amp;#60; Mack::Controller::Base before_filter :authenticate end&amp;lt;/pre&amp;gt; &lt;pre&gt;module AuthenticationControllerHelper
  def authenticate
    # do work to authenticate user here...
  end
  include_safely_into(BlogController, CommentsController)
end&lt;/pre&gt; Here you can see in our new AuthenticationControllerHelper module we use the include_safely_into method. This method is documented in the RDoc for Mack, but basically what it does is includes that module into the list of Classes defined, and changes it&amp;#8217;s public methods to protected.&lt;/p&gt;

&lt;p&gt;Now we have included controller helpers into several different controllers. This helps to keep our controllers limited to just actions, and helps us to reuse code in other places. All very good things. &lt;h3&gt;Refactoring ApplicationHelper&lt;/h3&gt; So, if you&amp;#8217;re like me, your Rails ApplicationHelper module is absolutely overflowing with all sorts of bits of code. In one project I have it&amp;#8217;s 682 lines of code! Some code does authentication like stuff, is_logged_in?, is_logged_out?, etc&amp;#8230; some does formatting, some does other stuff. It&amp;#8217;s a big steaming pile of unrelated code.&lt;/p&gt;

&lt;p&gt;In Mack you can solve this problem by breaking your code out into Mack::ViewHelpers::&amp;#60;module_name&amp;#62; modules. If  you do this then that module is automatically included into all views. Modules in the Mack::ViewHelpers namespace do NOT get included into the controllers. If you want to include them into controllers you can use the include_safely_into method to achieve that goal. &lt;h2&gt;Conclusion&lt;/h2&gt; Well, I hope you enjoyed, and are still awake, this brief overview of the way helpers work in Mack. They are different from Rails. I feel these differences are what make Mack helpers really really useful. Mack helpers do more then Rails, and these features can be not only be really powerful, but can really help to keep your code nice and DRY.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.2.0.1</title>
   <link href="http://www.metabates.com/2008/03/14/release-0201"/>
   <updated>2008-03-14T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/14/release-0201</id>
   <content type="html">&lt;p&gt;As previously mentioned there was an issue in a Mack dependency, cachetastic. Mack 0.2.0 used cachetastic-1.3.1 which had a require for the memcache-client gem.&lt;/p&gt;

&lt;p&gt;If you didn&amp;#8217;t have the gem installed you would get some not very nice messages. This require was fixed in cachetastic-1.4.1. Mack 0.2.0.1 uses the new version of cachetastic. There is no new functionality in 0.2.0.1, it&amp;#8217;s simply the require fix.&lt;/p&gt;

&lt;p&gt;Some really cool functionality is in the works for 0.3.0 of Mack, including everyone&amp;#8217;s favorite, distributed routes. This, unfortunately, probably won&amp;#8217;t be out till the end of next week. &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; Like always, please allow time for the gem to propagate throughout the RubyForge mirrors.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Memcache issue with Mack 0.2.0</title>
   <link href="http://www.metabates.com/2008/03/14/memcache-issue-with-mack-020"/>
   <updated>2008-03-14T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/14/memcache-issue-with-mack-020</id>
   <content type="html">&lt;p&gt;If you get this error: &lt;pre&gt;no such file to load -- memcache&lt;/pre&gt; The problem is mack-0.2.0 uses the cachetastic-1.3.1 gem, which has an errant require in the memcache adapter. There will be a patch forthcoming for Mack to use the lastest version of cachetastic which solves this issue.&lt;/p&gt;

&lt;p&gt;Until that patch is out, the easiest thing to do is install the memcache-client gem, like such: &lt;pre&gt;$ sudo gem install memcache-client&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Mack featured on the RailsEnvy.com podcast</title>
   <link href="http://www.metabates.com/2008/03/13/mack-featured-on-the-railsenvycom-podcast"/>
   <updated>2008-03-13T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/13/mack-featured-on-the-railsenvycom-podcast</id>
   <content type="html">&lt;p&gt;Well, um&amp;#8230; the title of the post really says it all. Mack is briefly discussed about 3/4 of the way in.&lt;/p&gt;

&lt;p&gt;Here&amp;#8217;s the podcast: &lt;a href=&#39;http://railsenvy.com/assets/2008/3/12/Podcast_22.mp3&#39;&gt;http://railsenvy.com/assets/2008/3/12/Podcast_22.mp3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Make sure to checkout their other podcasts, &lt;a href=&#39;http://www.railsenvy.com&#39;&gt;RailsEnvy.com&lt;/a&gt; Those guys do a great job, and their quite funny to listen to as well. &lt;h3&gt;Other Mack Sitings:&lt;/h3&gt; &lt;a href=&#39;http://www.nomedojogo.com/2008/03/13/rails-podcast-brasil-episodio-9/&#39;&gt;http://www.nomedojogo.com/2008/03/13/rails-podcast-brasil-episodio-9/&lt;/a&gt; - This appears to be the RailsEnvy podcast in Portuguese, but since I don&amp;#8217;t speak Portuguese, so I can&amp;#8217;t really say.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#39;http://blog.libinpan.com/2008/03/13/links-for-2008-03-13/&#39;&gt;http://blog.libinpan.com/2008/03/13/links-for-2008-03-13/&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.2.0</title>
   <link href="http://www.metabates.com/2008/03/11/release-020"/>
   <updated>2008-03-11T00:00:00-04:00</updated>
   <id>http://www.metabates.com/2008/03/11/release-020</id>
   <content type="html">&lt;p&gt;A couple of really cool features in this release. In controllers and views you can  now call: &lt;pre&gt;render(:url=&amp;gt; &quot;http://www.mycoolurl.com&quot;)&lt;/pre&gt; Developers can now also develop their own custom rendering systems, without monkey patching the core: &lt;pre&gt;class Mack::Rendering::Pdf &amp;lt; Mack::Rendering::Base
  def render
    # do work to render stuff as a PDF
  end
end&lt;/pre&gt; Now add this to the list of available render systems: &lt;pre&gt;app_config.mack.rendering_systems &amp;lt;&amp;lt; :pdf&lt;/pre&gt; You should now be able to do this in your controller: &lt;pre&gt;class MyAwesomeController &amp;lt; Mack::Controller::Base
  def pdf
    render(:pdf =&amp;gt; &quot;my_pdf_template&quot;)
  end
end&lt;/pre&gt; Install: &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; Changelog: &lt;ul&gt;
	&lt;li&gt;ticket: [3](http://trac.mackframework.com/ticket/3) Render url in Controllers/Views&lt;/li&gt;
	&lt;li&gt;ticket: [5](http://trac.mackframework.com/ticket/5) Render Extension System.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Trac now online</title>
   <link href="http://www.metabates.com/2008/03/05/trac-now-online"/>
   <updated>2008-03-05T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/03/05/trac-now-online</id>
   <content type="html">&lt;p&gt;There is now a Trac system set up to help deal with bug/feature tickets, wiki, roadmap, etc&amp;#8230; You can find it at &lt;a href=&#39;http://trac.mackframework.com&#39;&gt;http://trac.mackframework.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While you&amp;#8217;re there you can browse the new SVN repository, see what code is in the pipelines, etc&amp;#8230;&lt;/p&gt;

&lt;p&gt;It&amp;#8217;s all very exciting, in a really geeky sort of way.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>0.1.0: The Obligatory &#39;Blog&#39; Demo</title>
   <link href="http://www.metabates.com/2008/03/04/the-obligatory-blog-demo"/>
   <updated>2008-03-04T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/03/04/the-obligatory-blog-demo</id>
   <content type="html">&lt;p&gt;Ok, because every good framework should tell you how to create a blog, why should Mack be any different? Let&amp;#8217;s start off with the basics. Is Mack installed? If not, here&amp;#8217;s how: &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; Great! Before we move on, make sure that the gem you installed is at LEAST version 0.1.0, otherwise, you&amp;#8217;re not going to get very far in this tutorial. Now, let&amp;#8217;s move on. Now let&amp;#8217;s generate our kick ass new blog, and since we&amp;#8217;re going to need some sort of database support for our blog, we&amp;#8217;ll configure it to use DataMapper. If you don&amp;#8217;t have DataMapper installed, please head over to &lt;a href=&#39;http://datamapper.org&#39;&gt;http://datamapper.org&lt;/a&gt; to find out how to install it. Mack has support for ActiveRecord as well, but it&amp;#8217;s just easier to get DataMapper going because you don&amp;#8217;t have to deal with migrations. &lt;pre&gt;$ mack my_kick_ass_blog -o data_mapper
$ cd my_kick_ass_blog&lt;/pre&gt; That should&amp;#8217;ve created a whole bunch of files and folders for your blog. Now let&amp;#8217;s generate some scaffold code for our blog: &lt;pre&gt;$ rake generate:scaffold name=posts&lt;/pre&gt; That should&amp;#8217;ve created even more files for you. One of those files is app/models/post.rb, let&amp;#8217;s open that up, so we can edit it for DataMapper.&lt;/p&gt;

&lt;p&gt;Edit the file so it looks something like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;Now, I&amp;#8217;m not going to go into detail as to what that&amp;#8217;s doing, that&amp;#8217;s for the guys at DataMapper to explain. Before we move on to the next step, you&amp;#8217;ll probably want to crack open config/database.yml and edit it so it the paths to your database are correct, you&amp;#8217;ll probably also want to go to your database system and make sure that the database name you configured in your config/database.yml is created, otherwise this will be a very short trip. I&amp;#8217;ll wait while you do that. Finished, great! Let&amp;#8217;s move on.&lt;/p&gt;

&lt;p&gt;We need to now open a Mack console so we can create the tables needed for our blog. &lt;pre&gt;$ rake console
$ Post.table.create!
$ exit&lt;/pre&gt; Ok, we should now have a posts table in our new database. Isn&amp;#8217;t life wonderful? We&amp;#8217;re so close to showing the world how wonderful we are as developers.&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s edit our views, so they look something like this:&lt;/p&gt;

&lt;p&gt;app/views/posts/index.html.erb: Liquid error: No such file or directory - posix_spawnp app/views/posts/edit.html.erb: &lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;pre&amp;gt;&amp;lt;h1&amp;gt;Edit post&amp;lt;/h1&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;%= error_messages_for :post %&amp;gt;&lt;/p&gt;
&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;form action=&amp;quot;&amp;lt;%= posts_update_url(:id =&amp;gt; @post.id) %&amp;gt;&amp;quot; class=&amp;quot;edit_post&amp;quot; id=&amp;quot;edit_post&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;input type=&amp;quot;hidden&amp;quot; name=&amp;quot;_method&amp;quot; value=&amp;quot;put&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Title&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;input id=&amp;quot;post_title&amp;quot; name=&amp;quot;post[title]&amp;quot; size=&amp;quot;30&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;&amp;lt;%= @post.title %&amp;gt;&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Body&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;textarea id=&amp;quot;post_body&amp;quot; name=&amp;quot;post[body]&amp;quot;&amp;gt;&amp;lt;%= @post.body %&amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Email&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;input id=&amp;quot;post_email&amp;quot; name=&amp;quot;post[email]&amp;quot; size=&amp;quot;30&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;&amp;lt;%= @post.email %&amp;gt;&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;input id=&amp;quot;post_submit&amp;quot; name=&amp;quot;commit&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;Create&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;%= link_to(&amp;quot;Back&amp;quot;, posts_index_url) %&amp;gt;&amp;lt;/pre&amp;gt;
app/views/posts/show.html.erb:
&amp;lt;pre&amp;gt;&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Title:&amp;lt;/b&amp;gt;
  &amp;lt;%= @post.title %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;/p&gt;
&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Body:&amp;lt;/b&amp;gt;
  &amp;lt;%= @post.body %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Email:&amp;lt;/b&amp;gt;
  &amp;lt;%= @post.email %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Created at:&amp;lt;/b&amp;gt;
  &amp;lt;%= @post.created_at %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;p&amp;gt;
  &amp;lt;b&amp;gt;Updated at:&amp;lt;/b&amp;gt;
  &amp;lt;%= @post.updated_at %&amp;gt;
&amp;lt;/p&amp;gt;&lt;/pre&gt;
&lt;p&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;%= link_to(&amp;quot;Edit&amp;quot;, posts_edit_url(:id =&amp;gt; @post.id)) %&amp;gt; |
&amp;lt;%= link_to(&amp;quot;Back&amp;quot;, posts_index_url) %&amp;gt;&amp;lt;/pre&amp;gt;
app/views/posts/new.html.erb:
&amp;lt;pre&amp;gt;&amp;lt;h1&amp;gt;New post&amp;lt;/h1&amp;gt;&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;%= error_messages_for :post %&amp;gt;&lt;/p&gt;
&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
&amp;lt;form action=&amp;quot;&amp;lt;%= posts_create_url %&amp;gt;&amp;quot; class=&amp;quot;new_post&amp;quot; id=&amp;quot;new_post&amp;quot; method=&amp;quot;post&amp;quot;&amp;gt;
  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Title&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;input id=&amp;quot;post_title&amp;quot; name=&amp;quot;post[title]&amp;quot; size=&amp;quot;30&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;&amp;lt;%= @post.title %&amp;gt;&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;&lt;/pre&gt;&lt;pre class=&#39;markdown-html-error&#39; style=&#39;border: solid 3px red; background-color: pink&#39;&gt;REXML could not parse this XML/HTML: 
  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Body&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;textarea id=&amp;quot;post_body&amp;quot; name=&amp;quot;post[body]&amp;quot;&amp;gt;&amp;lt;%= @post.body %&amp;gt;&amp;lt;/textarea&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;b&amp;gt;Email&amp;lt;/b&amp;gt;&amp;lt;br /&amp;gt;
    &amp;lt;input id=&amp;quot;post_email&amp;quot; name=&amp;quot;post[email]&amp;quot; size=&amp;quot;30&amp;quot; type=&amp;quot;text&amp;quot; value=&amp;quot;&amp;lt;%= @post.email %&amp;gt;&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;

  &amp;lt;p&amp;gt;
    &amp;lt;input id=&amp;quot;post_submit&amp;quot; name=&amp;quot;commit&amp;quot; type=&amp;quot;submit&amp;quot; value=&amp;quot;Create&amp;quot; /&amp;gt;
  &amp;lt;/p&amp;gt;
&amp;lt;/form&amp;gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;%= link_to(&amp;#8220;Back&amp;#8221;, posts_index_url) %&amp;gt;&amp;lt;/pre&amp;gt; Ok, so now we&amp;#8217;ve created our forms, and setup our index page. Let&amp;#8217;s actually go to the site and see it all works!&lt;/p&gt;

&lt;p&gt;First we need to start the server:&lt;/p&gt;

&lt;p&gt;$ rake server&lt;/p&gt;

&lt;p&gt;Now let&amp;#8217;s head on over to http://localhost:3000/posts and see what we&amp;#8217;ve got. You should see a page that looks something like this:&lt;/p&gt;
&lt;img alt=&#39;Blog Demo 1&#39; src=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/12.png&#39; /&gt;
&lt;p&gt;Now let&amp;#8217;s click on that &amp;#8216;New Post&amp;#8217; link and fill out the form:&lt;/p&gt;
&lt;img alt=&#39;Blog Demo 2&#39; src=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/21.png&#39; /&gt;
&lt;p&gt;Now, let&amp;#8217;s hit that wonderful &amp;#8216;Create&amp;#8217; button and see what happens!&lt;/p&gt;
&lt;img alt=&#39;Blog Demo 3&#39; src=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/31.png&#39; /&gt;
&lt;p&gt;Congrats! You just created your first blog post! Now let&amp;#8217;s head back to http://localhost:3000/posts and see what we&amp;#8217;ve got.&lt;/p&gt;
&lt;img alt=&#39;Blog Demo 4&#39; src=&#39;http://www.mackframework.com/wp-content/uploads/2008/03/41.png&#39; /&gt;
&lt;p&gt;Wonderful! Now all that&amp;#8217;s left to do is to set our home page to our posts index page. Let&amp;#8217;s open up our config/routes.rb and edit the following line: &lt;pre&gt;r.home_page &quot;/&quot;, :controller =&gt; :default, :action =&gt; :index&lt;/pre&gt; so that it&amp;#8217;s now: &lt;pre&gt;r.home_page &quot;/&quot;, :controller =&gt; :posts, :action =&gt; :index&lt;/pre&gt; Now all you have to do is to restart your server and Bob&amp;#8217;s your uncle when you hit http://localhost:3000 again you should your fantastic posts index page.&lt;/p&gt;

&lt;p&gt;This concludes our brief introductory tutorial on getting going on Mack. Obviously Mack does a lot more, and I highly encourage you to read the &lt;a href=&#39;http://api.mackframework.com&#39;&gt;RDoc&lt;/a&gt; to find out more about what it can do.&lt;/p&gt;

&lt;p&gt;Enjoy.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.1.0</title>
   <link href="http://www.metabates.com/2008/03/04/release-010"/>
   <updated>2008-03-04T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/03/04/release-010</id>
   <content type="html">&lt;p&gt;Rejoice! Yet another new release. Please be patient for the gem mirrors to pick it up.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;Added an inflections system. The default inflections are from Jeremy McAnally&#39;s great Rails plugin, acts_as_good_speeler. Thanks Jeremy! [http://www.jeremymcanally.com/](http://www.jeremymcanally.com/)&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added a to_params method to Hash to help with testing.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Added rake generate:scaffold task.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.0.7.0</title>
   <link href="http://www.metabates.com/2008/03/03/release-0070"/>
   <updated>2008-03-03T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/03/03/release-0070</id>
   <content type="html">&lt;p&gt;Nothing exciting at all in this release. It&amp;#8217;s just a reorganization of the gem. No need to rush out and download the latest gem. &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; Changelog: &lt;ul&gt;
	&lt;li&gt;Fixed \[#18488\] Recommend moving files under lib/&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.0.6.2</title>
   <link href="http://www.metabates.com/2008/02/29/release-0062"/>
   <updated>2008-02-29T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/29/release-0062</id>
   <content type="html">&lt;p&gt;Please allow for mirror prorogation.  Thanks to &lt;a href=&#39;http://maraby.org/post/27611841&#39;&gt;Matt Todd&lt;/a&gt; for finding the first official Mack bug! Strangely enough, I actually welcome people finding bugs in Mack. It only serves to make it a better framework.&lt;/p&gt;

&lt;p&gt;If you find a bug, please head on over to &lt;a href=&#39;http://rubyforge.org/tracker/?group_id=4405&#39;&gt;RubyForge&lt;/a&gt; and submit a ticket for it, and I&amp;#8217;ll do my best to turn it around as quick as possible.&lt;/p&gt;

&lt;p&gt;Changelog: &lt;ul&gt;
	&lt;li&gt;gem: thin 0.7.0&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;gem: cachetastic 1.3.1&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;Fixed 18487: #convert_security_of_methods ignores new_level param&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Philosphy of releases</title>
   <link href="http://www.metabates.com/2008/02/29/philosphy-of-releases"/>
   <updated>2008-02-29T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/29/philosphy-of-releases</id>
   <content type="html">&lt;p&gt;If you haven&amp;#8217;t noticed by now, I tend to release smaller releases more often. I know there isn&amp;#8217;t much precedent for that as Mack has only been out a week, and there&amp;#8217;s only been three releases, but I can assure you, it&amp;#8217;s a sign of things to come.&lt;/p&gt;

&lt;p&gt;I feel that at this stage in a code&amp;#8217;s life cycle, it benefits from getting out into the wild sooner, rather then later. Sure, I could bulk up features and bug fixes and do big &amp;#8216;wow&amp;#8217; factor releases, but why should I sit on a cool feature or an important bug fix simply so I can have a bit of &amp;#8216;wow&amp;#8217;? Why not let people start to enjoy those new features, and give me important feedback earlier?&lt;/p&gt;

&lt;p&gt;I&amp;#8217;m sure as the code tree grows and people start really using Mack, things may slow down a bit. When there are more developers then just myself, things will definitely slow down a pace, but until then, I just don&amp;#8217;t see the point in holding back.&lt;/p&gt;

&lt;p&gt;When I have something cool and ready to go, I&amp;#8217;m going to release it. You don&amp;#8217;t &lt;em&gt;have&lt;/em&gt; to upgrade your Mack environment if you don&amp;#8217;t want to, you can if you want. If you would prefer to &amp;#8216;bulk&amp;#8217; them up yourself, then that&amp;#8217;s entirely up to you. Like I&amp;#8217;ve said before, Mack is trying to be as non-opinionated as it can be. That includes how you update your system.&lt;/p&gt;

&lt;p&gt;Anyway, I just thought I would share a bit of how things will be handled going forward. I hope that&amp;#8217;s fine with you.&lt;/p&gt;

&lt;p&gt;Have a good weekend.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Release 0.0.6</title>
   <link href="http://www.metabates.com/2008/02/28/release-006"/>
   <updated>2008-02-28T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/28/release-006</id>
   <content type="html">&lt;p&gt;Get it while it&amp;#8217;s hot! Of course, you&amp;#8217;ll probably want to wait a bit for it to propagate to all the gem mirrors. If you really can&amp;#8217;t wait, you can find it &lt;a href=&#39;http://rubyforge.org/frs/download.php/33146/mack-0.0.6.gem&#39;&gt;here&lt;/a&gt;. &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; From the CHANGELOG: &lt;ul&gt;
	&lt;li&gt;rake generate:&amp;lt;generator_name&amp;gt;&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;rake generate:plugin - will generate the stub of a plugin in the vendor/plugins directory.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;rake dump:config - prints out the configuration information for the specified environment.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;redirect_to now takes an optional Hash as a second parameter, instead of a fixnum.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;redirect_to will now do server side redirects if passed :server_side =&amp;gt; true as part of the optional second argument Hash.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;plugin in support. plugins get loaded before the &#39;app&#39; directory. each plugins &#39;lib&#39; directory is added to the global load path and then each plugins &#39;init.rb&#39; file is called, which is responsible for loading the necessary files. The &#39;lib&#39; directories are finally removed from the global load path.&lt;/li&gt;
&lt;/ul&gt; &lt;ul&gt;
	&lt;li&gt;renamed initialize directory to initialization. moved logging, orm_support, and plugins to a subfolder called initializers.&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The History Of Mack, pt. 3</title>
   <link href="http://www.metabates.com/2008/02/27/the-history-of-mack-pt-3"/>
   <updated>2008-02-27T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/27/the-history-of-mack-pt-3</id>
   <content type="html">&lt;p&gt;Why did I fall in love with &lt;a href=&#39;http://rack.rubyforge.org/&#39;&gt;Rack&lt;/a&gt; and &lt;a href=&#39;http://code.macournoyer.com/thin/&#39;&gt;Thin&lt;/a&gt;? That&amp;#8217;s easy. I love Thin because it lives up to it&amp;#8217;s name. It&amp;#8217;s thin. It&amp;#8217;s incredibly fast, has great clustering support built in, and is the next generation of Ruby web servers. It kicks Mongrel&amp;#8217;s ass and it takes names. I&amp;#8217;m sure if you asked Zed Shaw he would have no problem with Thin replacing Mongrel.&lt;/p&gt;

&lt;p&gt;Rack I love because of it&amp;#8217;s simplicity, and it&amp;#8217;s uniformity. It&amp;#8217;s setting out to create a standard for which any Ruby web application can very easily be plugged into a web server. By abstracting that layer out it makes it easier for developers to focus on writing great apps, and not having to worry about how to deploy them.&lt;/p&gt;

&lt;p&gt;Once I started to play around with Rack it didn&amp;#8217;t take me more then a few minutes to have a very simple site up and running.&lt;/p&gt;

&lt;p&gt;Within a few days I had the basics of a Rails like framework rocking, and within two weeks I had the core of Mack coded, and that&amp;#8217;s where I am today.&lt;/p&gt;

&lt;p&gt;Mack is a very fast, stable, and extensible framework. It&amp;#8217;s designed to be lean and mean and not be all things to all people. It&amp;#8217;s meant to get you started on the right path, but to let you have your own opinions. It&amp;#8217;s designed to help you build portal applications simply and efficiently, and deploy with just as much ease.&lt;/p&gt;

&lt;p&gt;Mack is ORM agnostic, although it does have some special hooks for ActiveRecord and DataMapper. It does not force you to use a certain type of system for doing web services, although it does promote a RESTful lifestyle. Configuration and setup is system, but there&amp;#8217;s no reason for you to use it as is out of the box.&lt;/p&gt;

&lt;p&gt;Mack encourages experimentation, and  it hopes that you customize it make it your own.&lt;/p&gt;

&lt;p&gt;Go and scour through the &lt;a href=&#39;http://api.mackframework.com/&#39;&gt;API&lt;/a&gt; and then download the gem and start building your next generation application the way YOU want to, not the way someone else tells you you have to.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>ORM Support</title>
   <link href="http://www.metabates.com/2008/02/27/orm-support"/>
   <updated>2008-02-27T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/27/orm-support</id>
   <content type="html">&lt;p&gt;If you would like to add ORM support to your application, it&amp;#8217;s simple. Out of the box Mack has support for two popular ORMs, ActiveRecord and DataMapper.Our tests show that DataMapper is 10x slower then ActiveRecord, but who knows, your mileage my vary.&lt;/p&gt;

&lt;p&gt;When you create your mack app you can do the following which will add ORM support to your generated app:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;If you already have a mack app you can very easily add ORM support by adding the following configuration parameter to the default.yml file:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;

&lt;p&gt;And also add a database.yml file to your config directory that looks like this:&lt;/p&gt;

&lt;p&gt;Liquid error: No such file or directory - posix_spawnp&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting Started</title>
   <link href="http://www.metabates.com/2008/02/27/getting-started"/>
   <updated>2008-02-27T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/27/getting-started</id>
   <content type="html">&lt;p&gt;Installing Mack is pretty simple: &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt; This will install a few gems that Mack is dependent on. Once you&amp;#8217;ve got all the gems installed you can create your mack app with the following: &lt;pre&gt;$ mack my_cool_mack_app&lt;/pre&gt; That should create a folder called my_cool_mack_app with a bunch of files and folders underneath it. Now, to fire up the app: &lt;pre&gt;$ cd my_cool_mack_app
$ rake server&lt;/pre&gt; Now point your browser to http://localhost:3000 and you should see a nice &amp;#8220;welcome to mack&amp;#8221; screen.&lt;/p&gt;

&lt;p&gt;That&amp;#8217;s it. Now you can start rocking your super cool application.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>First release! 0.0.4</title>
   <link href="http://www.metabates.com/2008/02/27/first-release-004"/>
   <updated>2008-02-27T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/27/first-release-004</id>
   <content type="html">&lt;p&gt;Last night the first public release of Mack was made available on RubyForge. So get it now: &lt;pre&gt;$ sudo gem install mack&lt;/pre&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The History Of Mack, pt. 2</title>
   <link href="http://www.metabates.com/2008/02/26/the-history-of-mack-pt-2"/>
   <updated>2008-02-26T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/26/the-history-of-mack-pt-2</id>
   <content type="html">&lt;p&gt;After two years of developing Menderchuck using Rails, I sat down with the VP of Development and the Director of Development and we took at a look at what the future of the company. We reviewed some of the stuff the business would like to build and where the CEO saw the company headed, and we looked at the technologies we were using and determined that it was time to investigate alternatives.&lt;/p&gt;

&lt;p&gt;The first things to come under the microscope were Rails/Mongrel. As previously stated we found Rails to be a bit too opinionated for our use. One of the big jokes within the dev team was that I was basically rewriting Rails one section at a time. As sad as that joke is, it&amp;#8217;s partially true.&lt;/p&gt;

&lt;p&gt;I started to investigate other frameworks, particularly Merb and Ramaze, both of which are great frameworks. Both are lightweight and fast, and are a great alternative to Rails. But, they both didn&amp;#8217;t quite offer what Menderchuck needed to grow into the future.&lt;/p&gt;

&lt;p&gt;Menderchuck needed a platform that was fast and scalable. We needed something that would allow us to be a portal application. We needed something that was easy to deploy. We wanted to be able to build/deploy separate applications and have them &amp;#8216;automagically&amp;#8217; linked together. And most importantly we needed something very configurable, and less opinionated.&lt;/p&gt;

&lt;p&gt;In the search for a framework utopia, I came across two technologies I really fell in love with, &lt;a href=&#39;http://rack.rubyforge.org/&#39;&gt;Rack&lt;/a&gt; and &lt;a href=&#39;http://code.macournoyer.com/thin/&#39;&gt;Thin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;(More to come&amp;#8230;)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>The History Of Mack, pt. 1</title>
   <link href="http://www.metabates.com/2008/02/26/the-history-of-mack-pt-1"/>
   <updated>2008-02-26T00:00:00-05:00</updated>
   <id>http://www.metabates.com/2008/02/26/the-history-of-mack-pt-1</id>
   <content type="html">&lt;p&gt;Let me start by answering the question at the top of your head, &amp;#8220;why another ruby web application framework?&amp;#8221; Great question.&lt;/p&gt;

&lt;p&gt;I work for a company that for the time being shall be called Menderchuck. Menderchuck has been using Ruby on Rails since the company started two years ago. I am employee number three at Menderchuck, and was hired directly by the VP of Development. I was hired as the Senior Software Architect. I&amp;#8217;m now the Director of Architecture for the company. :) Sorry about the bragging, I just like telling people I&amp;#8217;m a director!&lt;/p&gt;

&lt;p&gt;Prior to joining the company I had been using Rails for about 6 months, long before v1.0.0 of the now widely used framework. I loved Rails. I still do in fact, well, kind of. More on that later. Rails was the only choice for developing Menderchuck. The VP of Development and myself were huge fans, and having both come from Java backgrounds, we loved the flexibility and fun of Ruby as a language and Rails as a framework.&lt;/p&gt;

&lt;p&gt;As I said we&amp;#8217;ve spent the past two years developing Menderchuck using Rails, and for the most part things have been OK. I can&amp;#8217;t say that they&amp;#8217;ve been great, because, well, they haven&amp;#8217;t. We&amp;#8217;ve had scalability problems, deployment problems, and most importantly problems with the constraints that Rails places on development team.&lt;/p&gt;

&lt;p&gt;The idea of an opinionated framework is great, in theory. If you follow and play by their rules things are great. The problem arises if you want to stray from the beaten path. Then you are left out on your own. Left to forge your own path, and as we&amp;#8217;ve found at Menderchuck, you end up doing a whole hell of a lot of hacking!&lt;/p&gt;

&lt;p&gt;Rails was designed for, and is incredible for building Web 2.0 applications. Menderchuck, although touted by the CEO as a Web 2.0 application, is really more of a complex and large scale web application, in the flavor of Web 1.0 applications. It&amp;#8217;s also more of a portal, which can be a very difficult thing to build with the Rails framework.&lt;/p&gt;

&lt;p&gt;Now don&amp;#8217;t get me wrong, you CAN build a portal using Rails, but it really involves turning the framework on it&amp;#8217;s head and kicking it in the neck. That just shouldn&amp;#8217;t be the way build things.&lt;/p&gt;

&lt;p&gt;Enter Mack. (More to come&amp;#8230;)&lt;/p&gt;</content>
 </entry>
 
 
</feed>